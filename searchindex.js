Search.setIndex({"alltitles": {"API Documentation": [[0, "api-documentation"]], "Auto-formatting with black anf flynt": [[8, "auto-formatting-with-black-anf-flynt"]], "Basic usage": [[276, "basic-usage"], [277, "basic-usage"], [278, "basic-usage"], [279, "basic-usage"], [280, "basic-usage"], [281, "basic-usage"], [282, "basic-usage"], [283, "basic-usage"], [284, "basic-usage"], [285, "basic-usage"], [286, "basic-usage"], [287, "basic-usage"]], "C test format": [[275, "c-test-format"], [278, "c-test-format"]], "Can I implement and propose new features for Microprobe?": [[273, "can-i-implement-and-propose-new-features-for-microprobe"]], "Checking Microprobe installation": [[262, "checking-microprobe-installation"]], "Code Organization": [[3, "code-organization"]], "Code format checker": [[8, "code-format-checker"]], "Code generation work-flow": [[4, "code-generation-work-flow"]], "Coding conventions": [[8, "coding-conventions"]], "Coding style": [[8, "coding-style"]], "Collaborators and contributors": [[272, "collaborators-and-contributors"]], "Command line target definition scheme": [[290, "command-line-target-definition-scheme"]], "Command line tools": [[274, "command-line-tools"]], "Comments and TODOs": [[8, "comments-and-todos"]], "Compiling": [[281, "compiling"]], "Complete example": [[289, "complete-example"]], "Configuration options": [[22, "configuration-options"]], "Contact": [[272, "contact"]], "Contents": [[273, "contents"]], "Continuous integration": [[9, "continuous-integration"]], "Contributing to Microprobe": [[10, "contributing-to-microprobe"]], "Copyright": [[1, "copyright"]], "Current limitations": [[278, "current-limitations"]], "Customizing Application Binary Interface parameters": [[278, "customizing-application-binary-interface-parameters"]], "Design": [[2, "design"]], "Design overview": [[5, "design-overview"]], "Design target": [[6, "design-target"]], "Developers": [[272, "developers"]], "Developing Microprobe": [[12, "developing-microprobe"]], "Development Corner": [[7, "development-corner"]], "Development road-map": [[13, "development-road-map"]], "Direct contact": [[272, "direct-contact"]], "Docstring format conventions": [[8, "docstring-format-conventions"]], "Documentation": [[18, "documentation"]], "Documentation bugs": [[14, "documentation-bugs"], [271, "documentation-bugs"]], "Documenting class properties": [[8, "documenting-class-properties"]], "Documenting classes and methods": [[8, "documenting-classes-and-methods"]], "Documenting modules and packages": [[8, "documenting-modules-and-packages"]], "Documenting private methods/properties/variables": [[8, "documenting-private-methods-properties-variables"]], "Documenting variables": [[8, "documenting-variables"]], "Ensuring the Application Binary Interface": [[284, "ensuring-the-application-binary-interface"]], "Environment variables": [[22, "environment-variables"]], "Example outputs": [[276, "example-outputs"], [277, "example-outputs"], [278, "example-outputs"], [282, "example-outputs"], [283, "example-outputs"], [284, "example-outputs"], [287, "example-outputs"], [290, "example-outputs"]], "Example use case": [[285, "example-use-case"], [286, "example-use-case"]], "Examples": [[8, "examples"], [15, "examples"], [275, "examples"]], "Examples on POWER": [[16, "examples-on-power"]], "Examples on RISCV": [[17, "examples-on-riscv"]], "First-time set up": [[12, "first-time-set-up"], [264, "first-time-set-up"]], "Fix flags": [[280, "fix-flags"], [281, "fix-flags"], [282, "fix-flags"]], "Format definitions": [[288, "format-definitions"]], "Full usage": [[276, "full-usage"], [277, "full-usage"], [278, "full-usage"], [279, "full-usage"], [280, "full-usage"], [281, "full-usage"], [282, "full-usage"], [283, "full-usage"], [284, "full-usage"], [285, "full-usage"], [286, "full-usage"], [287, "full-usage"]], "Function implementation": [[275, "function-implementation"]], "Function registration": [[275, "function-registration"]], "Functions": [[23, "functions"], [30, "functions"], [32, "functions"], [40, "functions"], [162, "functions"], [166, "functions"], [169, "functions"], [172, "functions"], [175, "functions"], [181, "functions"], [183, "functions"], [186, "functions"], [189, "functions"], [192, "functions"], [203, "functions"], [206, "functions"], [209, "functions"], [213, "functions"], [217, "functions"], [220, "functions"], [224, "functions"], [226, "functions"], [228, "functions"], [229, "functions"], [238, "functions"], [240, "functions"], [241, "functions"], [243, "functions"], [244, "functions"], [249, "functions"], [259, "functions"], [260, "functions"]], "Generic tool options": [[290, "generic-tool-options"]], "Getting started": [[261, "getting-started"]], "How can I contribute to the development of Microprobe?": [[273, "how-can-i-contribute-to-the-development-of-microprobe"]], "How can I run my first example?": [[273, "how-can-i-run-my-first-example"]], "How do I get started?": [[273, "how-do-i-get-started"]], "How to obtain an objdump file?": [[284, "how-to-obtain-an-objdump-file"]], "Implementation details": [[275, "implementation-details"]], "Indices and tables": [[0, "indices-and-tables"]], "Installation/Upgrading requirements": [[268, "installation-upgrading-requirements"]], "Installing Microprobe": [[263, "installing-microprobe"]], "Installing Microprobe via GIT": [[264, "installing-microprobe-via-git"]], "Installing Microprobe via PIP packages": [[265, "installing-microprobe-via-pip-packages"]], "Key features": [[19, "key-features"]], "License": [[21, "license"]], "Linker script": [[281, "linker-script"]], "MPT v0.5": [[289, "mpt-v0-5"]], "Mandatory header: the MPT Section": [[288, "mandatory-header-the-mpt-section"]], "Microprobe": [[19, "microprobe"]], "Microprobe FAQ": [[273, "microprobe-faq"]], "Microprobe package organization": [[266, "microprobe-package-organization"]], "Microprobe test (mpt) format": [[288, "microprobe-test-mpt-format"]], "More information": [[265, "more-information"]], "Overview": [[275, "overview"], [276, "overview"], [277, "overview"], [278, "overview"], [279, "overview"], [280, "overview"], [281, "overview"], [282, "overview"], [283, "overview"], [284, "overview"], [285, "overview"], [286, "overview"], [287, "overview"], [288, "overview"]], "Packages": [[266, "packages"]], "Pre-requirements": [[12, "pre-requirements"], [264, "pre-requirements"]], "Publications": [[18, "publications"], [20, "publications"]], "Pycodestyle": [[8, "pycodestyle"]], "Pylint": [[8, "pylint"]], "Quick start guide": [[267, "quick-start-guide"]], "Referring to other classes/methods/properties/modules": [[8, "referring-to-other-classes-methods-properties-modules"]], "Release version scheme": [[266, "release-version-scheme"]], "Report bugs & Submit patches": [[271, "report-bugs-submit-patches"]], "Reporting issues and bugs": [[14, "reporting-issues-and-bugs"]], "Required commands": [[12, "required-commands"], [264, "required-commands"]], "Requirements": [[268, "requirements"]], "Runtime requirements": [[268, "runtime-requirements"]], "Source code repository": [[12, "source-code-repository"]], "Submit patches": [[271, "submit-patches"]], "Submitting patches": [[11, "submitting-patches"]], "Support": [[270, "support"]], "Template": [[275, "template"]], "Templates": [[8, "templates"]], "Third-party tool customization": [[278, "third-party-tool-customization"]], "Tool work-flow": [[278, "tool-work-flow"]], "Tool: mp_bin2asm": [[276, "tool-mp-bin2asm"]], "Tool: mp_bin2objdump": [[277, "tool-mp-bin2objdump"]], "Tool: mp_c2mpt": [[278, "tool-mp-c2mpt"]], "Tool: mp_epi": [[279, "tool-mp-epi"]], "Tool: mp_mpt2bin": [[280, "tool-mp-mpt2bin"]], "Tool: mp_mpt2elf": [[281, "tool-mp-mpt2elf"]], "Tool: mp_mpt2test": [[282, "tool-mp-mpt2test"]], "Tool: mp_mpt2trace": [[283, "tool-mp-mpt2trace"]], "Tool: mp_objdump2mpt": [[284, "tool-mp-objdump2mpt"]], "Tool: mp_seq": [[285, "tool-mp-seq"]], "Tool: mp_seqtune": [[286, "tool-mp-seqtune"]], "Tool: mp_target": [[287, "tool-mp-target"]], "Trace formats": [[283, "trace-formats"]], "Tutorial: A more complex microbenchmark generation policy": [[293, "tutorial-a-more-complex-microbenchmark-generation-policy"]], "Tutorial: A simple microbenchmark generation policy": [[295, "tutorial-a-simple-microbenchmark-generation-policy"]], "Tutorial: Adding/Modifying definitions": [[292, "tutorial-adding-modifying-definitions"]], "Tutorial: Creating a command line tool (microbenchmark-generators)": [[294, "tutorial-creating-a-command-line-tool-microbenchmark-generators"]], "Tutorials": [[291, "tutorials"]], "Upgrading Microprobe": [[269, "upgrading-microprobe"]], "Upgrading a GIT installation": [[269, "upgrading-a-git-installation"]], "Upgrading a PIP installation": [[269, "upgrading-a-pip-installation"]], "Useful links": [[8, "useful-links"]], "Using GitHub to report a bug": [[14, "using-github-to-report-a-bug"], [271, "using-github-to-report-a-bug"]], "Using Microprobe": [[264, "using-microprobe"], [265, "using-microprobe"]], "Variable declaration and registration": [[275, "variable-declaration-and-registration"]], "Welcome to Microprobe Documentation": [[18, "welcome-to-microprobe-documentation"]], "[CODE] Section": [[289, "code-section"]], "[DATA] Section": [[289, "data-section"]], "[DAT] Section": [[289, "dat-section"]], "[RAW] Section": [[289, "raw-section"]], "[REGISTERS] Section": [[289, "registers-section"]], "[STATE] Section": [[289, "state-section"]], "[TRACE] Section": [[289, "trace-section"]], "isa_power_v206_info.py": [[16, "isa-power-v206-info-py"]], "microprobe": [[22, "module-microprobe"]], "microprobe.code": [[23, "module-microprobe.code"]], "microprobe.code.Synthesizer": [[24, "microprobe-code-synthesizer"]], "microprobe.code.TraceSynthesizer": [[25, "microprobe-code-tracesynthesizer"]], "microprobe.code.address": [[26, "module-microprobe.code.address"]], "microprobe.code.address.Address": [[27, "microprobe-code-address-address"]], "microprobe.code.address.InstructionAddress": [[28, "microprobe-code-address-instructionaddress"]], "microprobe.code.address.MemoryValue": [[29, "microprobe-code-address-memoryvalue"]], "microprobe.code.bbl": [[30, "module-microprobe.code.bbl"]], "microprobe.code.bbl.Bbl": [[31, "microprobe-code-bbl-bbl"]], "microprobe.code.benchmark": [[32, "module-microprobe.code.benchmark"]], "microprobe.code.benchmark.Benchmark": [[33, "microprobe-code-benchmark-benchmark"]], "microprobe.code.benchmark.BuildingBlock": [[34, "microprobe-code-benchmark-buildingblock"]], "microprobe.code.benchmark.MultiThreadedBenchmark": [[35, "microprobe-code-benchmark-multithreadedbenchmark"]], "microprobe.code.cfg": [[36, "module-microprobe.code.cfg"]], "microprobe.code.cfg.Cfg": [[37, "microprobe-code-cfg-cfg"]], "microprobe.code.context": [[38, "module-microprobe.code.context"]], "microprobe.code.context.Context": [[39, "microprobe-code-context-context"]], "microprobe.code.ins": [[40, "module-microprobe.code.ins"]], "microprobe.code.ins.Instruction": [[41, "microprobe-code-ins-instruction"]], "microprobe.code.ins.InstructionMemoryOperandValue": [[42, "microprobe-code-ins-instructionmemoryoperandvalue"]], "microprobe.code.ins.InstructionOperandValue": [[43, "microprobe-code-ins-instructionoperandvalue"]], "microprobe.code.ins.MicroprobeInstructionDefinition": [[44, "microprobe-code-ins-microprobeinstructiondefinition"]], "microprobe.code.var": [[45, "module-microprobe.code.var"]], "microprobe.code.var.Variable": [[46, "microprobe-code-var-variable"]], "microprobe.code.var.VariableArray": [[47, "microprobe-code-var-variablearray"]], "microprobe.code.var.VariableSingle": [[48, "microprobe-code-var-variablesingle"]], "microprobe.code.wrapper": [[49, "module-microprobe.code.wrapper"]], "microprobe.code.wrapper.Wrapper": [[50, "microprobe-code-wrapper-wrapper"]], "microprobe.driver": [[51, "module-microprobe.driver"]], "microprobe.driver.guided": [[52, "module-microprobe.driver.guided"]], "microprobe.exceptions": [[53, "module-microprobe.exceptions"]], "microprobe.exceptions.MicroprobeAddressTranslationError": [[54, "microprobe-exceptions-microprobeaddresstranslationerror"]], "microprobe.exceptions.MicroprobeArchitectureDefinitionError": [[55, "microprobe-exceptions-microprobearchitecturedefinitionerror"]], "microprobe.exceptions.MicroprobeArchitectureFormatError": [[56, "microprobe-exceptions-microprobearchitectureformaterror"]], "microprobe.exceptions.MicroprobeAsmError": [[57, "microprobe-exceptions-microprobeasmerror"]], "microprobe.exceptions.MicroprobeBinaryError": [[58, "microprobe-exceptions-microprobebinaryerror"]], "microprobe.exceptions.MicroprobeBranchConditionError": [[59, "microprobe-exceptions-microprobebranchconditionerror"]], "microprobe.exceptions.MicroprobeCacheError": [[60, "microprobe-exceptions-microprobecacheerror"]], "microprobe.exceptions.MicroprobeCalledProcessError": [[61, "microprobe-exceptions-microprobecalledprocesserror"]], "microprobe.exceptions.MicroprobeCodeGenerationError": [[62, "microprobe-exceptions-microprobecodegenerationerror"]], "microprobe.exceptions.MicroprobeConstantRegisterError": [[63, "microprobe-exceptions-microprobeconstantregistererror"]], "microprobe.exceptions.MicroprobeDMAFormatError": [[64, "microprobe-exceptions-microprobedmaformaterror"]], "microprobe.exceptions.MicroprobeDuplicatedValueError": [[65, "microprobe-exceptions-microprobeduplicatedvalueerror"]], "microprobe.exceptions.MicroprobeError": [[66, "microprobe-exceptions-microprobeerror"]], "microprobe.exceptions.MicroprobeException": [[67, "microprobe-exceptions-microprobeexception"]], "microprobe.exceptions.MicroprobeImportDefinitionError": [[68, "microprobe-exceptions-microprobeimportdefinitionerror"]], "microprobe.exceptions.MicroprobeImportError": [[69, "microprobe-exceptions-microprobeimporterror"]], "microprobe.exceptions.MicroprobeLookupError": [[70, "microprobe-exceptions-microprobelookuperror"]], "microprobe.exceptions.MicroprobeMPTFormatError": [[71, "microprobe-exceptions-microprobemptformaterror"]], "microprobe.exceptions.MicroprobeModelError": [[72, "microprobe-exceptions-microprobemodelerror"]], "microprobe.exceptions.MicroprobeNoComparatorError": [[73, "microprobe-exceptions-microprobenocomparatorerror"]], "microprobe.exceptions.MicroprobeNoGenerationPathError": [[74, "microprobe-exceptions-microprobenogenerationpatherror"]], "microprobe.exceptions.MicroprobeObjdumpError": [[75, "microprobe-exceptions-microprobeobjdumperror"]], "microprobe.exceptions.MicroprobePolicyError": [[76, "microprobe-exceptions-microprobepolicyerror"]], "microprobe.exceptions.MicroprobeRunCmdError": [[77, "microprobe-exceptions-microproberuncmderror"]], "microprobe.exceptions.MicroprobeTargetDefinitionError": [[78, "microprobe-exceptions-microprobetargetdefinitionerror"]], "microprobe.exceptions.MicroprobeTypeError": [[79, "microprobe-exceptions-microprobetypeerror"]], "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning": [[80, "microprobe-exceptions-microprobeuncheckableenvironmentwarning"]], "microprobe.exceptions.MicroprobeValueError": [[81, "microprobe-exceptions-microprobevalueerror"]], "microprobe.exceptions.MicroprobeWarning": [[82, "microprobe-exceptions-microprobewarning"]], "microprobe.exceptions.MicroprobeYamlFormatError": [[83, "microprobe-exceptions-microprobeyamlformaterror"]], "microprobe.model": [[84, "module-microprobe.model"]], "microprobe.model.GenericModel": [[85, "microprobe-model-genericmodel"]], "microprobe.model.memory": [[86, "module-microprobe.model.memory"]], "microprobe.model.memory.EndlessLoopDataMemoryModel": [[87, "microprobe-model-memory-endlessloopdatamemorymodel"]], "microprobe.model.memory.EndlessLoopInstructionMemoryModel": [[88, "microprobe-model-memory-endlessloopinstructionmemorymodel"]], "microprobe.passes": [[89, "module-microprobe.passes"]], "microprobe.passes.Pass": [[90, "microprobe-passes-pass"]], "microprobe.passes.address": [[91, "module-microprobe.passes.address"]], "microprobe.passes.address.SetInitAddressPass": [[92, "microprobe-passes-address-setinitaddresspass"]], "microprobe.passes.address.UpdateInstructionAddressesPass": [[93, "microprobe-passes-address-updateinstructionaddressespass"]], "microprobe.passes.branch": [[94, "module-microprobe.passes.branch"]], "microprobe.passes.branch.BranchBraidNextPass": [[95, "microprobe-passes-branch-branchbraidnextpass"]], "microprobe.passes.branch.BranchNextPass": [[96, "microprobe-passes-branch-branchnextpass"]], "microprobe.passes.branch.FixIndirectBranchPass": [[97, "microprobe-passes-branch-fixindirectbranchpass"]], "microprobe.passes.branch.InitializeBranchDecorator": [[98, "microprobe-passes-branch-initializebranchdecorator"]], "microprobe.passes.branch.LinkBbls": [[99, "microprobe-passes-branch-linkbbls"]], "microprobe.passes.branch.NormalizeBranchTargetsPass": [[100, "microprobe-passes-branch-normalizebranchtargetspass"]], "microprobe.passes.branch.RandomizeByTypePass": [[101, "microprobe-passes-branch-randomizebytypepass"]], "microprobe.passes.dat": [[102, "module-microprobe.passes.dat"]], "microprobe.passes.dat.InitializeDATPass": [[103, "microprobe-passes-dat-initializedatpass"]], "microprobe.passes.dat.TranslateAddressPass": [[104, "microprobe-passes-dat-translateaddresspass"]], "microprobe.passes.decimal": [[105, "module-microprobe.passes.decimal"]], "microprobe.passes.decimal.InitializeMemoryDecimalPass": [[106, "microprobe-passes-decimal-initializememorydecimalpass"]], "microprobe.passes.float": [[107, "module-microprobe.passes.float"]], "microprobe.passes.float.InitializeMemoryFloatPass": [[108, "microprobe-passes-float-initializememoryfloatpass"]], "microprobe.passes.ilp": [[109, "module-microprobe.passes.ilp"]], "microprobe.passes.ilp.AverageDependencyDistancePass": [[110, "microprobe-passes-ilp-averagedependencydistancepass"]], "microprobe.passes.ilp.ConstantDependencyDistancePass": [[111, "microprobe-passes-ilp-constantdependencydistancepass"]], "microprobe.passes.ilp.RandomDependencyDistancePass": [[112, "microprobe-passes-ilp-randomdependencydistancepass"]], "microprobe.passes.initialization": [[113, "module-microprobe.passes.initialization"]], "microprobe.passes.initialization.AddFinalizationAssemblyPass": [[114, "microprobe-passes-initialization-addfinalizationassemblypass"]], "microprobe.passes.initialization.AddInitializationAssemblyPass": [[115, "microprobe-passes-initialization-addinitializationassemblypass"]], "microprobe.passes.initialization.AddInitializationInstructionsPass": [[116, "microprobe-passes-initialization-addinitializationinstructionspass"]], "microprobe.passes.initialization.AutoAlignPass": [[117, "microprobe-passes-initialization-autoalignpass"]], "microprobe.passes.initialization.InitializeRegisterPass": [[118, "microprobe-passes-initialization-initializeregisterpass"]], "microprobe.passes.initialization.InitializeRegistersPass": [[119, "microprobe-passes-initialization-initializeregisterspass"]], "microprobe.passes.initialization.ReserveRegistersPass": [[120, "microprobe-passes-initialization-reserveregisterspass"]], "microprobe.passes.initialization.UnReserveRegistersPass": [[121, "microprobe-passes-initialization-unreserveregisterspass"]], "microprobe.passes.instruction": [[122, "module-microprobe.passes.instruction"]], "microprobe.passes.instruction.AddAssemblyByIndexPass": [[123, "microprobe-passes-instruction-addassemblybyindexpass"]], "microprobe.passes.instruction.AddOnePass": [[124, "microprobe-passes-instruction-addonepass"]], "microprobe.passes.instruction.DIDTSimplePass": [[125, "microprobe-passes-instruction-didtsimplepass"]], "microprobe.passes.instruction.DisableAsmByOpcodePass": [[126, "microprobe-passes-instruction-disableasmbyopcodepass"]], "microprobe.passes.instruction.InsertInstructionSequencePass": [[127, "microprobe-passes-instruction-insertinstructionsequencepass"]], "microprobe.passes.instruction.ReplaceInstructionByTypePass": [[128, "microprobe-passes-instruction-replaceinstructionbytypepass"]], "microprobe.passes.instruction.ReplaceLoadInstructionsPass": [[129, "microprobe-passes-instruction-replaceloadinstructionspass"]], "microprobe.passes.instruction.ReproduceSequencePass": [[130, "microprobe-passes-instruction-reproducesequencepass"]], "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass": [[131, "microprobe-passes-instruction-setinstructionoperandsbyopcodepass"]], "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass": [[132, "microprobe-passes-instruction-setinstructiontypebyalternatingsequencespass"]], "microprobe.passes.instruction.SetInstructionTypeByElementPass": [[133, "microprobe-passes-instruction-setinstructiontypebyelementpass"]], "microprobe.passes.instruction.SetInstructionTypeByProfilePass": [[134, "microprobe-passes-instruction-setinstructiontypebyprofilepass"]], "microprobe.passes.instruction.SetInstructionTypeByPropertyPass": [[135, "microprobe-passes-instruction-setinstructiontypebypropertypass"]], "microprobe.passes.instruction.SetInstructionTypeBySequencePass": [[136, "microprobe-passes-instruction-setinstructiontypebysequencepass"]], "microprobe.passes.instruction.SetInstructionTypePass": [[137, "microprobe-passes-instruction-setinstructiontypepass"]], "microprobe.passes.instruction.SetRandomInstructionTypePass": [[138, "microprobe-passes-instruction-setrandominstructiontypepass"]], "microprobe.passes.memory": [[139, "module-microprobe.passes.memory"]], "microprobe.passes.memory.FixMemoryReferencesPass": [[140, "microprobe-passes-memory-fixmemoryreferencespass"]], "microprobe.passes.memory.GenericMemoryModelPass": [[141, "microprobe-passes-memory-genericmemorymodelpass"]], "microprobe.passes.memory.GenericMemoryStreamsPass": [[142, "microprobe-passes-memory-genericmemorystreamspass"]], "microprobe.passes.memory.GenericOldMemoryModelPass": [[143, "microprobe-passes-memory-genericoldmemorymodelpass"]], "microprobe.passes.memory.InitializeMemoryDecorator": [[144, "microprobe-passes-memory-initializememorydecorator"]], "microprobe.passes.memory.SetMemoryOperandByOpcodePass": [[145, "microprobe-passes-memory-setmemoryoperandbyopcodepass"]], "microprobe.passes.memory.SingleMemoryStreamPass": [[146, "microprobe-passes-memory-singlememorystreampass"]], "microprobe.passes.register": [[147, "module-microprobe.passes.register"]], "microprobe.passes.register.CycleMinimalAllocationPass": [[148, "microprobe-passes-register-cycleminimalallocationpass"]], "microprobe.passes.register.DefaultRegisterAllocationPass": [[149, "microprobe-passes-register-defaultregisterallocationpass"]], "microprobe.passes.register.FixRegistersPass": [[150, "microprobe-passes-register-fixregisterspass"]], "microprobe.passes.register.NoHazardsAllocationPass": [[151, "microprobe-passes-register-nohazardsallocationpass"]], "microprobe.passes.register.RandomAllocationPass": [[152, "microprobe-passes-register-randomallocationpass"]], "microprobe.passes.structure": [[153, "module-microprobe.passes.structure"]], "microprobe.passes.structure.GenericCodeStructurePass": [[154, "microprobe-passes-structure-genericcodestructurepass"]], "microprobe.passes.structure.SimpleBuildingBlockPass": [[155, "microprobe-passes-structure-simplebuildingblockpass"]], "microprobe.passes.symbol": [[156, "module-microprobe.passes.symbol"]], "microprobe.passes.symbol.ResolveSymbolicReferencesPass": [[157, "microprobe-passes-symbol-resolvesymbolicreferencespass"]], "microprobe.passes.symbol.SetInstructionLabelByIndexPass": [[158, "microprobe-passes-symbol-setinstructionlabelbyindexpass"]], "microprobe.passes.variable": [[159, "module-microprobe.passes.variable"]], "microprobe.passes.variable.DeclareVariablesPass": [[160, "microprobe-passes-variable-declarevariablespass"]], "microprobe.passes.variable.UpdateVariableAddressesPass": [[161, "microprobe-passes-variable-updatevariableaddressespass"]], "microprobe.property": [[162, "module-microprobe.property"]], "microprobe.property.Property": [[163, "microprobe-property-property"]], "microprobe.property.PropertyHolder": [[164, "microprobe-property-propertyholder"]], "microprobe.schemas": [[165, "module-microprobe.schemas"]], "microprobe.target": [[166, "module-microprobe.target"]], "microprobe.target.Definition": [[167, "microprobe-target-definition"]], "microprobe.target.Target": [[168, "microprobe-target-target"]], "microprobe.target.env": [[169, "module-microprobe.target.env"]], "microprobe.target.env.Environment": [[170, "microprobe-target-env-environment"]], "microprobe.target.env.GenericEnvironment": [[171, "microprobe-target-env-genericenvironment"]], "microprobe.target.isa": [[172, "module-microprobe.target.isa"]], "microprobe.target.isa.GenericISA": [[173, "microprobe-target-isa-genericisa"]], "microprobe.target.isa.ISA": [[174, "microprobe-target-isa-isa"]], "microprobe.target.isa.comparator": [[175, "module-microprobe.target.isa.comparator"]], "microprobe.target.isa.comparator.Comparator": [[176, "microprobe-target-isa-comparator-comparator"]], "microprobe.target.isa.dat": [[177, "module-microprobe.target.isa.dat"]], "microprobe.target.isa.dat.DATmap": [[178, "microprobe-target-isa-dat-datmap"]], "microprobe.target.isa.dat.DynamicAddressTranslation": [[179, "microprobe-target-isa-dat-dynamicaddresstranslation"]], "microprobe.target.isa.dat.GenericDynamicAddressTranslation": [[180, "microprobe-target-isa-dat-genericdynamicaddresstranslation"]], "microprobe.target.isa.generator": [[181, "module-microprobe.target.isa.generator"]], "microprobe.target.isa.generator.Generator": [[182, "microprobe-target-isa-generator-generator"]], "microprobe.target.isa.instruction": [[183, "module-microprobe.target.isa.instruction"]], "microprobe.target.isa.instruction.GenericInstructionType": [[184, "microprobe-target-isa-instruction-genericinstructiontype"]], "microprobe.target.isa.instruction.InstructionType": [[185, "microprobe-target-isa-instruction-instructiontype"]], "microprobe.target.isa.instruction_field": [[186, "module-microprobe.target.isa.instruction_field"]], "microprobe.target.isa.instruction_field.GenericInstructionField": [[187, "microprobe-target-isa-instruction-field-genericinstructionfield"]], "microprobe.target.isa.instruction_field.InstructionField": [[188, "microprobe-target-isa-instruction-field-instructionfield"]], "microprobe.target.isa.instruction_format": [[189, "module-microprobe.target.isa.instruction_format"]], "microprobe.target.isa.instruction_format.GenericInstructionFormat": [[190, "microprobe-target-isa-instruction-format-genericinstructionformat"]], "microprobe.target.isa.instruction_format.InstructionFormat": [[191, "microprobe-target-isa-instruction-format-instructionformat"]], "microprobe.target.isa.operand": [[192, "module-microprobe.target.isa.operand"]], "microprobe.target.isa.operand.InstructionAddressRelativeOperand": [[193, "microprobe-target-isa-operand-instructionaddressrelativeoperand"]], "microprobe.target.isa.operand.MemoryOperand": [[194, "microprobe-target-isa-operand-memoryoperand"]], "microprobe.target.isa.operand.MemoryOperandDescriptor": [[195, "microprobe-target-isa-operand-memoryoperanddescriptor"]], "microprobe.target.isa.operand.Operand": [[196, "microprobe-target-isa-operand-operand"]], "microprobe.target.isa.operand.OperandConst": [[197, "microprobe-target-isa-operand-operandconst"]], "microprobe.target.isa.operand.OperandConstReg": [[198, "microprobe-target-isa-operand-operandconstreg"]], "microprobe.target.isa.operand.OperandDescriptor": [[199, "microprobe-target-isa-operand-operanddescriptor"]], "microprobe.target.isa.operand.OperandImmRange": [[200, "microprobe-target-isa-operand-operandimmrange"]], "microprobe.target.isa.operand.OperandReg": [[201, "microprobe-target-isa-operand-operandreg"]], "microprobe.target.isa.operand.OperandValueSet": [[202, "microprobe-target-isa-operand-operandvalueset"]], "microprobe.target.isa.register": [[203, "module-microprobe.target.isa.register"]], "microprobe.target.isa.register.GenericRegister": [[204, "microprobe-target-isa-register-genericregister"]], "microprobe.target.isa.register.Register": [[205, "microprobe-target-isa-register-register"]], "microprobe.target.isa.register_type": [[206, "module-microprobe.target.isa.register_type"]], "microprobe.target.isa.register_type.GenericRegisterType": [[207, "microprobe-target-isa-register-type-genericregistertype"]], "microprobe.target.isa.register_type.RegisterType": [[208, "microprobe-target-isa-register-type-registertype"]], "microprobe.target.uarch": [[209, "module-microprobe.target.uarch"]], "microprobe.target.uarch.GenericCPUMicroarchitecture": [[210, "microprobe-target-uarch-genericcpumicroarchitecture"]], "microprobe.target.uarch.GenericMicroarchitecture": [[211, "microprobe-target-uarch-genericmicroarchitecture"]], "microprobe.target.uarch.Microarchitecture": [[212, "microprobe-target-uarch-microarchitecture"]], "microprobe.target.uarch.cache": [[213, "module-microprobe.target.uarch.cache"]], "microprobe.target.uarch.cache.Cache": [[214, "microprobe-target-uarch-cache-cache"]], "microprobe.target.uarch.cache.CacheHierarchy": [[215, "microprobe-target-uarch-cache-cachehierarchy"]], "microprobe.target.uarch.cache.SetAssociativeCache": [[216, "microprobe-target-uarch-cache-setassociativecache"]], "microprobe.target.uarch.element": [[217, "module-microprobe.target.uarch.element"]], "microprobe.target.uarch.element.GenericMicroarchitectureElement": [[218, "microprobe-target-uarch-element-genericmicroarchitectureelement"]], "microprobe.target.uarch.element.MicroarchitectureElement": [[219, "microprobe-target-uarch-element-microarchitectureelement"]], "microprobe.target.uarch.element_type": [[220, "module-microprobe.target.uarch.element_type"]], "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType": [[221, "microprobe-target-uarch-element-type-genericmicroarchitectureelementtype"]], "microprobe.target.uarch.element_type.MicroarchitectureElementType": [[222, "microprobe-target-uarch-element-type-microarchitectureelementtype"]], "microprobe.utils": [[223, "module-microprobe.utils"]], "microprobe.utils.asm": [[224, "module-microprobe.utils.asm"]], "microprobe.utils.asm.MicroprobeAsmInstructionDefinition": [[225, "microprobe-utils-asm-microprobeasminstructiondefinition"]], "microprobe.utils.bin": [[226, "module-microprobe.utils.bin"]], "microprobe.utils.bin.MicroprobeBinInstructionStream": [[227, "microprobe-utils-bin-microprobebininstructionstream"]], "microprobe.utils.cache": [[228, "module-microprobe.utils.cache"]], "microprobe.utils.cmdline": [[229, "module-microprobe.utils.cmdline"]], "microprobe.utils.cmdline.CLI": [[230, "microprobe-utils-cmdline-cli"]], "microprobe.utils.cmdline.LazyArgumentError": [[231, "microprobe-utils-cmdline-lazyargumenterror"]], "microprobe.utils.cmdline.LazyArgumentParser": [[232, "microprobe-utils-cmdline-lazyargumentparser"]], "microprobe.utils.cmdline.ParagraphFormatterML": [[233, "microprobe-utils-cmdline-paragraphformatterml"]], "microprobe.utils.config": [[234, "module-microprobe.utils.config"]], "microprobe.utils.config.DuplicateConfigParser": [[235, "microprobe-utils-config-duplicateconfigparser"]], "microprobe.utils.config.MicroprobeConfiguration": [[236, "microprobe-utils-config-microprobeconfiguration"]], "microprobe.utils.config.MicroprobeDefaultConfiguration": [[237, "microprobe-utils-config-microprobedefaultconfiguration"]], "microprobe.utils.distrib": [[238, "module-microprobe.utils.distrib"]], "microprobe.utils.distrib.Choice": [[239, "microprobe-utils-distrib-choice"]], "microprobe.utils.ieee": [[240, "module-microprobe.utils.ieee"]], "microprobe.utils.imp": [[241, "module-microprobe.utils.imp"]], "microprobe.utils.info": [[242, "module-microprobe.utils.info"]], "microprobe.utils.logger": [[243, "module-microprobe.utils.logger"]], "microprobe.utils.misc": [[244, "module-microprobe.utils.misc"]], "microprobe.utils.misc.Pickable": [[245, "microprobe-utils-misc-pickable"]], "microprobe.utils.misc.Progress": [[246, "microprobe-utils-misc-progress"]], "microprobe.utils.misc.RejectingDict": [[247, "microprobe-utils-misc-rejectingdict"]], "microprobe.utils.misc.RejectingOrderedDict": [[248, "microprobe-utils-misc-rejectingordereddict"]], "microprobe.utils.mpt": [[249, "module-microprobe.utils.mpt"]], "microprobe.utils.mpt.MicroprobeTestDefinition": [[250, "microprobe-utils-mpt-microprobetestdefinition"]], "microprobe.utils.mpt.MicroprobeTestDefinitionDefault": [[251, "microprobe-utils-mpt-microprobetestdefinitiondefault"]], "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5": [[252, "microprobe-utils-mpt-microprobetestdefinitionv0x5"]], "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition": [[253, "microprobe-utils-mpt-microprobetestmemoryaccessdefinition"]], "microprobe.utils.mpt.MicroprobeTestParser": [[254, "microprobe-utils-mpt-microprobetestparser"]], "microprobe.utils.mpt.MicroprobeTestParserDefault": [[255, "microprobe-utils-mpt-microprobetestparserdefault"]], "microprobe.utils.mpt.MicroprobeTestParserV0x5": [[256, "microprobe-utils-mpt-microprobetestparserv0x5"]], "microprobe.utils.mpt.MicroprobeTestRegisterDefinition": [[257, "microprobe-utils-mpt-microprobetestregisterdefinition"]], "microprobe.utils.mpt.MicroprobeTestVariableDefinition": [[258, "microprobe-utils-mpt-microprobetestvariabledefinition"]], "microprobe.utils.profile": [[259, "module-microprobe.utils.profile"]], "microprobe.utils.yaml": [[260, "module-microprobe.utils.yaml"]], "power_v206_power7_ppc64_linux_gcc_custom.py": [[16, "power-v206-power7-ppc64-linux-gcc-custom-py"]], "power_v206_power7_ppc64_linux_gcc_fu_stress.py": [[16, "power-v206-power7-ppc64-linux-gcc-fu-stress-py"]], "power_v206_power7_ppc64_linux_gcc_genetic.py": [[16, "power-v206-power7-ppc64-linux-gcc-genetic-py"]], "power_v206_power7_ppc64_linux_gcc_memory.py": [[16, "power-v206-power7-ppc64-linux-gcc-memory-py"]], "power_v206_power7_ppc64_linux_gcc_profile.py": [[16, "power-v206-power7-ppc64-linux-gcc-profile-py"]], "power_v206_power7_ppc64_linux_gcc_random.py": [[16, "power-v206-power7-ppc64-linux-gcc-random-py"]]}, "docnames": ["api", "copyright", "design", "design_code_organization", "design_code_workflow", "design_overview", "design_target", "devel", "devel_code_style", "devel_continuous", "devel_contributing", "devel_patches", "devel_repository", "devel_roadmap", "devel_ticket", "examples", "examples_power", "examples_riscv", "index", "index_microprobe", "index_publications", "license", "microprobe", "microprobe.code", "microprobe.code.Synthesizer", "microprobe.code.TraceSynthesizer", "microprobe.code.address", "microprobe.code.address.Address", "microprobe.code.address.InstructionAddress", "microprobe.code.address.MemoryValue", "microprobe.code.bbl", "microprobe.code.bbl.Bbl", "microprobe.code.benchmark", "microprobe.code.benchmark.Benchmark", "microprobe.code.benchmark.BuildingBlock", "microprobe.code.benchmark.MultiThreadedBenchmark", "microprobe.code.cfg", "microprobe.code.cfg.Cfg", "microprobe.code.context", "microprobe.code.context.Context", "microprobe.code.ins", "microprobe.code.ins.Instruction", "microprobe.code.ins.InstructionMemoryOperandValue", "microprobe.code.ins.InstructionOperandValue", "microprobe.code.ins.MicroprobeInstructionDefinition", "microprobe.code.var", "microprobe.code.var.Variable", "microprobe.code.var.VariableArray", "microprobe.code.var.VariableSingle", "microprobe.code.wrapper", "microprobe.code.wrapper.Wrapper", "microprobe.driver", "microprobe.driver.guided", "microprobe.exceptions", "microprobe.exceptions.MicroprobeAddressTranslationError", "microprobe.exceptions.MicroprobeArchitectureDefinitionError", "microprobe.exceptions.MicroprobeArchitectureFormatError", "microprobe.exceptions.MicroprobeAsmError", "microprobe.exceptions.MicroprobeBinaryError", "microprobe.exceptions.MicroprobeBranchConditionError", "microprobe.exceptions.MicroprobeCacheError", "microprobe.exceptions.MicroprobeCalledProcessError", "microprobe.exceptions.MicroprobeCodeGenerationError", "microprobe.exceptions.MicroprobeConstantRegisterError", "microprobe.exceptions.MicroprobeDMAFormatError", "microprobe.exceptions.MicroprobeDuplicatedValueError", "microprobe.exceptions.MicroprobeError", "microprobe.exceptions.MicroprobeException", "microprobe.exceptions.MicroprobeImportDefinitionError", "microprobe.exceptions.MicroprobeImportError", "microprobe.exceptions.MicroprobeLookupError", "microprobe.exceptions.MicroprobeMPTFormatError", "microprobe.exceptions.MicroprobeModelError", "microprobe.exceptions.MicroprobeNoComparatorError", "microprobe.exceptions.MicroprobeNoGenerationPathError", "microprobe.exceptions.MicroprobeObjdumpError", "microprobe.exceptions.MicroprobePolicyError", "microprobe.exceptions.MicroprobeRunCmdError", "microprobe.exceptions.MicroprobeTargetDefinitionError", "microprobe.exceptions.MicroprobeTypeError", "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning", "microprobe.exceptions.MicroprobeValueError", "microprobe.exceptions.MicroprobeWarning", "microprobe.exceptions.MicroprobeYamlFormatError", "microprobe.model", "microprobe.model.GenericModel", "microprobe.model.memory", "microprobe.model.memory.EndlessLoopDataMemoryModel", "microprobe.model.memory.EndlessLoopInstructionMemoryModel", "microprobe.passes", "microprobe.passes.Pass", "microprobe.passes.address", "microprobe.passes.address.SetInitAddressPass", "microprobe.passes.address.UpdateInstructionAddressesPass", "microprobe.passes.branch", "microprobe.passes.branch.BranchBraidNextPass", "microprobe.passes.branch.BranchNextPass", "microprobe.passes.branch.FixIndirectBranchPass", "microprobe.passes.branch.InitializeBranchDecorator", "microprobe.passes.branch.LinkBbls", "microprobe.passes.branch.NormalizeBranchTargetsPass", "microprobe.passes.branch.RandomizeByTypePass", "microprobe.passes.dat", "microprobe.passes.dat.InitializeDATPass", "microprobe.passes.dat.TranslateAddressPass", "microprobe.passes.decimal", "microprobe.passes.decimal.InitializeMemoryDecimalPass", "microprobe.passes.float", "microprobe.passes.float.InitializeMemoryFloatPass", "microprobe.passes.ilp", "microprobe.passes.ilp.AverageDependencyDistancePass", "microprobe.passes.ilp.ConstantDependencyDistancePass", "microprobe.passes.ilp.RandomDependencyDistancePass", "microprobe.passes.initialization", "microprobe.passes.initialization.AddFinalizationAssemblyPass", "microprobe.passes.initialization.AddInitializationAssemblyPass", "microprobe.passes.initialization.AddInitializationInstructionsPass", "microprobe.passes.initialization.AutoAlignPass", "microprobe.passes.initialization.InitializeRegisterPass", "microprobe.passes.initialization.InitializeRegistersPass", "microprobe.passes.initialization.ReserveRegistersPass", "microprobe.passes.initialization.UnReserveRegistersPass", "microprobe.passes.instruction", "microprobe.passes.instruction.AddAssemblyByIndexPass", "microprobe.passes.instruction.AddOnePass", "microprobe.passes.instruction.DIDTSimplePass", "microprobe.passes.instruction.DisableAsmByOpcodePass", "microprobe.passes.instruction.InsertInstructionSequencePass", "microprobe.passes.instruction.ReplaceInstructionByTypePass", "microprobe.passes.instruction.ReplaceLoadInstructionsPass", "microprobe.passes.instruction.ReproduceSequencePass", "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass", "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass", "microprobe.passes.instruction.SetInstructionTypeByElementPass", "microprobe.passes.instruction.SetInstructionTypeByProfilePass", "microprobe.passes.instruction.SetInstructionTypeByPropertyPass", "microprobe.passes.instruction.SetInstructionTypeBySequencePass", "microprobe.passes.instruction.SetInstructionTypePass", "microprobe.passes.instruction.SetRandomInstructionTypePass", "microprobe.passes.memory", "microprobe.passes.memory.FixMemoryReferencesPass", "microprobe.passes.memory.GenericMemoryModelPass", "microprobe.passes.memory.GenericMemoryStreamsPass", "microprobe.passes.memory.GenericOldMemoryModelPass", "microprobe.passes.memory.InitializeMemoryDecorator", "microprobe.passes.memory.SetMemoryOperandByOpcodePass", "microprobe.passes.memory.SingleMemoryStreamPass", "microprobe.passes.register", "microprobe.passes.register.CycleMinimalAllocationPass", "microprobe.passes.register.DefaultRegisterAllocationPass", "microprobe.passes.register.FixRegistersPass", "microprobe.passes.register.NoHazardsAllocationPass", "microprobe.passes.register.RandomAllocationPass", "microprobe.passes.structure", "microprobe.passes.structure.GenericCodeStructurePass", "microprobe.passes.structure.SimpleBuildingBlockPass", "microprobe.passes.symbol", "microprobe.passes.symbol.ResolveSymbolicReferencesPass", "microprobe.passes.symbol.SetInstructionLabelByIndexPass", "microprobe.passes.variable", "microprobe.passes.variable.DeclareVariablesPass", "microprobe.passes.variable.UpdateVariableAddressesPass", "microprobe.property", "microprobe.property.Property", "microprobe.property.PropertyHolder", "microprobe.schemas", "microprobe.target", "microprobe.target.Definition", "microprobe.target.Target", "microprobe.target.env", "microprobe.target.env.Environment", "microprobe.target.env.GenericEnvironment", "microprobe.target.isa", "microprobe.target.isa.GenericISA", "microprobe.target.isa.ISA", "microprobe.target.isa.comparator", "microprobe.target.isa.comparator.Comparator", "microprobe.target.isa.dat", "microprobe.target.isa.dat.DATmap", "microprobe.target.isa.dat.DynamicAddressTranslation", "microprobe.target.isa.dat.GenericDynamicAddressTranslation", "microprobe.target.isa.generator", "microprobe.target.isa.generator.Generator", "microprobe.target.isa.instruction", "microprobe.target.isa.instruction.GenericInstructionType", "microprobe.target.isa.instruction.InstructionType", "microprobe.target.isa.instruction_field", "microprobe.target.isa.instruction_field.GenericInstructionField", "microprobe.target.isa.instruction_field.InstructionField", "microprobe.target.isa.instruction_format", "microprobe.target.isa.instruction_format.GenericInstructionFormat", "microprobe.target.isa.instruction_format.InstructionFormat", "microprobe.target.isa.operand", "microprobe.target.isa.operand.InstructionAddressRelativeOperand", "microprobe.target.isa.operand.MemoryOperand", "microprobe.target.isa.operand.MemoryOperandDescriptor", "microprobe.target.isa.operand.Operand", "microprobe.target.isa.operand.OperandConst", "microprobe.target.isa.operand.OperandConstReg", "microprobe.target.isa.operand.OperandDescriptor", "microprobe.target.isa.operand.OperandImmRange", "microprobe.target.isa.operand.OperandReg", "microprobe.target.isa.operand.OperandValueSet", "microprobe.target.isa.register", "microprobe.target.isa.register.GenericRegister", "microprobe.target.isa.register.Register", "microprobe.target.isa.register_type", "microprobe.target.isa.register_type.GenericRegisterType", "microprobe.target.isa.register_type.RegisterType", "microprobe.target.uarch", "microprobe.target.uarch.GenericCPUMicroarchitecture", "microprobe.target.uarch.GenericMicroarchitecture", "microprobe.target.uarch.Microarchitecture", "microprobe.target.uarch.cache", "microprobe.target.uarch.cache.Cache", "microprobe.target.uarch.cache.CacheHierarchy", "microprobe.target.uarch.cache.SetAssociativeCache", "microprobe.target.uarch.element", "microprobe.target.uarch.element.GenericMicroarchitectureElement", "microprobe.target.uarch.element.MicroarchitectureElement", "microprobe.target.uarch.element_type", "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType", "microprobe.target.uarch.element_type.MicroarchitectureElementType", "microprobe.utils", "microprobe.utils.asm", "microprobe.utils.asm.MicroprobeAsmInstructionDefinition", "microprobe.utils.bin", "microprobe.utils.bin.MicroprobeBinInstructionStream", "microprobe.utils.cache", "microprobe.utils.cmdline", "microprobe.utils.cmdline.CLI", "microprobe.utils.cmdline.LazyArgumentError", "microprobe.utils.cmdline.LazyArgumentParser", "microprobe.utils.cmdline.ParagraphFormatterML", "microprobe.utils.config", "microprobe.utils.config.DuplicateConfigParser", "microprobe.utils.config.MicroprobeConfiguration", "microprobe.utils.config.MicroprobeDefaultConfiguration", "microprobe.utils.distrib", "microprobe.utils.distrib.Choice", "microprobe.utils.ieee", "microprobe.utils.imp", "microprobe.utils.info", "microprobe.utils.logger", "microprobe.utils.misc", "microprobe.utils.misc.Pickable", "microprobe.utils.misc.Progress", "microprobe.utils.misc.RejectingDict", "microprobe.utils.misc.RejectingOrderedDict", "microprobe.utils.mpt", "microprobe.utils.mpt.MicroprobeTestDefinition", "microprobe.utils.mpt.MicroprobeTestDefinitionDefault", "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5", "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition", "microprobe.utils.mpt.MicroprobeTestParser", "microprobe.utils.mpt.MicroprobeTestParserDefault", "microprobe.utils.mpt.MicroprobeTestParserV0x5", "microprobe.utils.mpt.MicroprobeTestRegisterDefinition", "microprobe.utils.mpt.MicroprobeTestVariableDefinition", "microprobe.utils.profile", "microprobe.utils.yaml", "start", "start_check", "start_install", "start_install_git", "start_install_pip", "start_organization", "start_quick", "start_requirements", "start_update", "support", "support_bug", "support_contact", "support_faq", "tools", "tools_ctest_format", "tools_mp_bin2asm", "tools_mp_bin2objdump", "tools_mp_c2mpt", "tools_mp_epi", "tools_mp_mpt2bin", "tools_mp_mpt2elf", "tools_mp_mpt2test", "tools_mp_mpt2trace", "tools_mp_objdump2mpt", "tools_mp_seq", "tools_mp_seqtune", "tools_mp_target", "tools_mpt_format", "tools_mpt_format_v05", "tools_target_definition", "tutorial", "tutorial_adding_definitions", "tutorial_complex_policy", "tutorial_custom_tool", "tutorial_simple_policy"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["api.rst", "copyright.rst", "design.rst", "design_code_organization.rst", "design_code_workflow.rst", "design_overview.rst", "design_target.rst", "devel.rst", "devel_code_style.rst", "devel_continuous.rst", "devel_contributing.rst", "devel_patches.rst", "devel_repository.rst", "devel_roadmap.rst", "devel_ticket.rst", "examples.rst", "examples_power.rst", "examples_riscv.rst", "index.rst", "index_microprobe.rst", "index_publications.rst", "license.rst", "microprobe.rst", "microprobe.code.rst", "microprobe.code.Synthesizer.rst", "microprobe.code.TraceSynthesizer.rst", "microprobe.code.address.rst", "microprobe.code.address.Address.rst", "microprobe.code.address.InstructionAddress.rst", "microprobe.code.address.MemoryValue.rst", "microprobe.code.bbl.rst", "microprobe.code.bbl.Bbl.rst", "microprobe.code.benchmark.rst", "microprobe.code.benchmark.Benchmark.rst", "microprobe.code.benchmark.BuildingBlock.rst", "microprobe.code.benchmark.MultiThreadedBenchmark.rst", "microprobe.code.cfg.rst", "microprobe.code.cfg.Cfg.rst", "microprobe.code.context.rst", "microprobe.code.context.Context.rst", "microprobe.code.ins.rst", "microprobe.code.ins.Instruction.rst", "microprobe.code.ins.InstructionMemoryOperandValue.rst", "microprobe.code.ins.InstructionOperandValue.rst", "microprobe.code.ins.MicroprobeInstructionDefinition.rst", "microprobe.code.var.rst", "microprobe.code.var.Variable.rst", "microprobe.code.var.VariableArray.rst", "microprobe.code.var.VariableSingle.rst", "microprobe.code.wrapper.rst", "microprobe.code.wrapper.Wrapper.rst", "microprobe.driver.rst", "microprobe.driver.guided.rst", "microprobe.exceptions.rst", "microprobe.exceptions.MicroprobeAddressTranslationError.rst", "microprobe.exceptions.MicroprobeArchitectureDefinitionError.rst", "microprobe.exceptions.MicroprobeArchitectureFormatError.rst", "microprobe.exceptions.MicroprobeAsmError.rst", "microprobe.exceptions.MicroprobeBinaryError.rst", "microprobe.exceptions.MicroprobeBranchConditionError.rst", "microprobe.exceptions.MicroprobeCacheError.rst", "microprobe.exceptions.MicroprobeCalledProcessError.rst", "microprobe.exceptions.MicroprobeCodeGenerationError.rst", "microprobe.exceptions.MicroprobeConstantRegisterError.rst", "microprobe.exceptions.MicroprobeDMAFormatError.rst", "microprobe.exceptions.MicroprobeDuplicatedValueError.rst", "microprobe.exceptions.MicroprobeError.rst", "microprobe.exceptions.MicroprobeException.rst", "microprobe.exceptions.MicroprobeImportDefinitionError.rst", "microprobe.exceptions.MicroprobeImportError.rst", "microprobe.exceptions.MicroprobeLookupError.rst", "microprobe.exceptions.MicroprobeMPTFormatError.rst", "microprobe.exceptions.MicroprobeModelError.rst", "microprobe.exceptions.MicroprobeNoComparatorError.rst", "microprobe.exceptions.MicroprobeNoGenerationPathError.rst", "microprobe.exceptions.MicroprobeObjdumpError.rst", "microprobe.exceptions.MicroprobePolicyError.rst", "microprobe.exceptions.MicroprobeRunCmdError.rst", "microprobe.exceptions.MicroprobeTargetDefinitionError.rst", "microprobe.exceptions.MicroprobeTypeError.rst", "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.rst", "microprobe.exceptions.MicroprobeValueError.rst", "microprobe.exceptions.MicroprobeWarning.rst", "microprobe.exceptions.MicroprobeYamlFormatError.rst", "microprobe.model.rst", "microprobe.model.GenericModel.rst", "microprobe.model.memory.rst", "microprobe.model.memory.EndlessLoopDataMemoryModel.rst", "microprobe.model.memory.EndlessLoopInstructionMemoryModel.rst", "microprobe.passes.rst", "microprobe.passes.Pass.rst", "microprobe.passes.address.rst", "microprobe.passes.address.SetInitAddressPass.rst", "microprobe.passes.address.UpdateInstructionAddressesPass.rst", "microprobe.passes.branch.rst", "microprobe.passes.branch.BranchBraidNextPass.rst", "microprobe.passes.branch.BranchNextPass.rst", "microprobe.passes.branch.FixIndirectBranchPass.rst", "microprobe.passes.branch.InitializeBranchDecorator.rst", "microprobe.passes.branch.LinkBbls.rst", "microprobe.passes.branch.NormalizeBranchTargetsPass.rst", "microprobe.passes.branch.RandomizeByTypePass.rst", "microprobe.passes.dat.rst", "microprobe.passes.dat.InitializeDATPass.rst", "microprobe.passes.dat.TranslateAddressPass.rst", "microprobe.passes.decimal.rst", "microprobe.passes.decimal.InitializeMemoryDecimalPass.rst", "microprobe.passes.float.rst", "microprobe.passes.float.InitializeMemoryFloatPass.rst", "microprobe.passes.ilp.rst", "microprobe.passes.ilp.AverageDependencyDistancePass.rst", "microprobe.passes.ilp.ConstantDependencyDistancePass.rst", "microprobe.passes.ilp.RandomDependencyDistancePass.rst", "microprobe.passes.initialization.rst", "microprobe.passes.initialization.AddFinalizationAssemblyPass.rst", "microprobe.passes.initialization.AddInitializationAssemblyPass.rst", "microprobe.passes.initialization.AddInitializationInstructionsPass.rst", "microprobe.passes.initialization.AutoAlignPass.rst", "microprobe.passes.initialization.InitializeRegisterPass.rst", "microprobe.passes.initialization.InitializeRegistersPass.rst", "microprobe.passes.initialization.ReserveRegistersPass.rst", "microprobe.passes.initialization.UnReserveRegistersPass.rst", "microprobe.passes.instruction.rst", "microprobe.passes.instruction.AddAssemblyByIndexPass.rst", "microprobe.passes.instruction.AddOnePass.rst", "microprobe.passes.instruction.DIDTSimplePass.rst", "microprobe.passes.instruction.DisableAsmByOpcodePass.rst", "microprobe.passes.instruction.InsertInstructionSequencePass.rst", "microprobe.passes.instruction.ReplaceInstructionByTypePass.rst", "microprobe.passes.instruction.ReplaceLoadInstructionsPass.rst", "microprobe.passes.instruction.ReproduceSequencePass.rst", "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.rst", "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.rst", "microprobe.passes.instruction.SetInstructionTypeByElementPass.rst", "microprobe.passes.instruction.SetInstructionTypeByProfilePass.rst", "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.rst", "microprobe.passes.instruction.SetInstructionTypeBySequencePass.rst", "microprobe.passes.instruction.SetInstructionTypePass.rst", "microprobe.passes.instruction.SetRandomInstructionTypePass.rst", "microprobe.passes.memory.rst", "microprobe.passes.memory.FixMemoryReferencesPass.rst", "microprobe.passes.memory.GenericMemoryModelPass.rst", "microprobe.passes.memory.GenericMemoryStreamsPass.rst", "microprobe.passes.memory.GenericOldMemoryModelPass.rst", "microprobe.passes.memory.InitializeMemoryDecorator.rst", "microprobe.passes.memory.SetMemoryOperandByOpcodePass.rst", "microprobe.passes.memory.SingleMemoryStreamPass.rst", "microprobe.passes.register.rst", "microprobe.passes.register.CycleMinimalAllocationPass.rst", "microprobe.passes.register.DefaultRegisterAllocationPass.rst", "microprobe.passes.register.FixRegistersPass.rst", "microprobe.passes.register.NoHazardsAllocationPass.rst", "microprobe.passes.register.RandomAllocationPass.rst", "microprobe.passes.structure.rst", "microprobe.passes.structure.GenericCodeStructurePass.rst", "microprobe.passes.structure.SimpleBuildingBlockPass.rst", "microprobe.passes.symbol.rst", "microprobe.passes.symbol.ResolveSymbolicReferencesPass.rst", "microprobe.passes.symbol.SetInstructionLabelByIndexPass.rst", "microprobe.passes.variable.rst", "microprobe.passes.variable.DeclareVariablesPass.rst", "microprobe.passes.variable.UpdateVariableAddressesPass.rst", "microprobe.property.rst", "microprobe.property.Property.rst", "microprobe.property.PropertyHolder.rst", "microprobe.schemas.rst", "microprobe.target.rst", "microprobe.target.Definition.rst", "microprobe.target.Target.rst", "microprobe.target.env.rst", "microprobe.target.env.Environment.rst", "microprobe.target.env.GenericEnvironment.rst", "microprobe.target.isa.rst", "microprobe.target.isa.GenericISA.rst", "microprobe.target.isa.ISA.rst", "microprobe.target.isa.comparator.rst", "microprobe.target.isa.comparator.Comparator.rst", "microprobe.target.isa.dat.rst", "microprobe.target.isa.dat.DATmap.rst", "microprobe.target.isa.dat.DynamicAddressTranslation.rst", "microprobe.target.isa.dat.GenericDynamicAddressTranslation.rst", "microprobe.target.isa.generator.rst", "microprobe.target.isa.generator.Generator.rst", "microprobe.target.isa.instruction.rst", "microprobe.target.isa.instruction.GenericInstructionType.rst", "microprobe.target.isa.instruction.InstructionType.rst", "microprobe.target.isa.instruction_field.rst", "microprobe.target.isa.instruction_field.GenericInstructionField.rst", "microprobe.target.isa.instruction_field.InstructionField.rst", "microprobe.target.isa.instruction_format.rst", "microprobe.target.isa.instruction_format.GenericInstructionFormat.rst", "microprobe.target.isa.instruction_format.InstructionFormat.rst", "microprobe.target.isa.operand.rst", "microprobe.target.isa.operand.InstructionAddressRelativeOperand.rst", "microprobe.target.isa.operand.MemoryOperand.rst", "microprobe.target.isa.operand.MemoryOperandDescriptor.rst", "microprobe.target.isa.operand.Operand.rst", "microprobe.target.isa.operand.OperandConst.rst", "microprobe.target.isa.operand.OperandConstReg.rst", "microprobe.target.isa.operand.OperandDescriptor.rst", "microprobe.target.isa.operand.OperandImmRange.rst", "microprobe.target.isa.operand.OperandReg.rst", "microprobe.target.isa.operand.OperandValueSet.rst", "microprobe.target.isa.register.rst", "microprobe.target.isa.register.GenericRegister.rst", "microprobe.target.isa.register.Register.rst", "microprobe.target.isa.register_type.rst", "microprobe.target.isa.register_type.GenericRegisterType.rst", "microprobe.target.isa.register_type.RegisterType.rst", "microprobe.target.uarch.rst", "microprobe.target.uarch.GenericCPUMicroarchitecture.rst", "microprobe.target.uarch.GenericMicroarchitecture.rst", "microprobe.target.uarch.Microarchitecture.rst", "microprobe.target.uarch.cache.rst", "microprobe.target.uarch.cache.Cache.rst", "microprobe.target.uarch.cache.CacheHierarchy.rst", "microprobe.target.uarch.cache.SetAssociativeCache.rst", "microprobe.target.uarch.element.rst", "microprobe.target.uarch.element.GenericMicroarchitectureElement.rst", "microprobe.target.uarch.element.MicroarchitectureElement.rst", "microprobe.target.uarch.element_type.rst", "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.rst", "microprobe.target.uarch.element_type.MicroarchitectureElementType.rst", "microprobe.utils.rst", "microprobe.utils.asm.rst", "microprobe.utils.asm.MicroprobeAsmInstructionDefinition.rst", "microprobe.utils.bin.rst", "microprobe.utils.bin.MicroprobeBinInstructionStream.rst", "microprobe.utils.cache.rst", "microprobe.utils.cmdline.rst", "microprobe.utils.cmdline.CLI.rst", "microprobe.utils.cmdline.LazyArgumentError.rst", "microprobe.utils.cmdline.LazyArgumentParser.rst", "microprobe.utils.cmdline.ParagraphFormatterML.rst", "microprobe.utils.config.rst", "microprobe.utils.config.DuplicateConfigParser.rst", "microprobe.utils.config.MicroprobeConfiguration.rst", "microprobe.utils.config.MicroprobeDefaultConfiguration.rst", "microprobe.utils.distrib.rst", "microprobe.utils.distrib.Choice.rst", "microprobe.utils.ieee.rst", "microprobe.utils.imp.rst", "microprobe.utils.info.rst", "microprobe.utils.logger.rst", "microprobe.utils.misc.rst", "microprobe.utils.misc.Pickable.rst", "microprobe.utils.misc.Progress.rst", "microprobe.utils.misc.RejectingDict.rst", "microprobe.utils.misc.RejectingOrderedDict.rst", "microprobe.utils.mpt.rst", "microprobe.utils.mpt.MicroprobeTestDefinition.rst", "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.rst", "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.rst", "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition.rst", "microprobe.utils.mpt.MicroprobeTestParser.rst", "microprobe.utils.mpt.MicroprobeTestParserDefault.rst", "microprobe.utils.mpt.MicroprobeTestParserV0x5.rst", "microprobe.utils.mpt.MicroprobeTestRegisterDefinition.rst", "microprobe.utils.mpt.MicroprobeTestVariableDefinition.rst", "microprobe.utils.profile.rst", "microprobe.utils.yaml.rst", "start.rst", "start_check.rst", "start_install.rst", "start_install_git.rst", "start_install_pip.rst", "start_organization.rst", "start_quick.rst", "start_requirements.rst", "start_update.rst", "support.rst", "support_bug.rst", "support_contact.rst", "support_faq.rst", "tools.rst", "tools_ctest_format.rst", "tools_mp_bin2asm.rst", "tools_mp_bin2objdump.rst", "tools_mp_c2mpt.rst", "tools_mp_epi.rst", "tools_mp_mpt2bin.rst", "tools_mp_mpt2elf.rst", "tools_mp_mpt2test.rst", "tools_mp_mpt2trace.rst", "tools_mp_objdump2mpt.rst", "tools_mp_seq.rst", "tools_mp_seqtune.rst", "tools_mp_target.rst", "tools_mpt_format.rst", "tools_mpt_format_v05.rst", "tools_target_definition.rst", "tutorial.rst", "tutorial_adding_definitions.rst", "tutorial_complex_policy.rst", "tutorial_custom_tool.rst", "tutorial_simple_policy.rst"], "indexentries": {"__annotations__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__annotations__", false]], "__annotations__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__annotations__", false]], "__annotations__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__annotations__", false]], "__annotations__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__annotations__", false]], "__annotations__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__annotations__", false]], "__annotations__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__annotations__", false]], "__cause__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__cause__", false]], "__cause__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__cause__", false]], "__cause__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__cause__", false]], "__cause__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__cause__", false]], "__cause__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__cause__", false]], "__cause__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__cause__", false]], "__cause__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__cause__", false]], "__cause__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__cause__", false]], "__cause__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__cause__", false]], "__cause__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__cause__", false]], "__cause__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__cause__", false]], "__cause__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__cause__", false]], "__cause__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__cause__", false]], "__cause__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__cause__", false]], "__cause__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__cause__", false]], "__cause__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__cause__", false]], "__cause__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__cause__", false]], "__cause__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__cause__", false]], "__cause__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__cause__", false]], "__cause__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__cause__", false]], "__cause__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__cause__", false]], "__cause__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__cause__", false]], "__cause__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__cause__", false]], "__cause__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__cause__", false]], "__cause__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__cause__", false]], "__cause__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__cause__", false]], "__cause__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__cause__", false]], "__cause__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__cause__", false]], "__cause__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__cause__", false]], "__cause__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__cause__", false]], "__cause__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__cause__", false]], "__context__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__context__", false]], "__context__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__context__", false]], "__context__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__context__", false]], "__context__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__context__", false]], "__context__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__context__", false]], "__context__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__context__", false]], "__context__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__context__", false]], "__context__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__context__", false]], "__context__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__context__", false]], "__context__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__context__", false]], "__context__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__context__", false]], "__context__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__context__", false]], "__context__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__context__", false]], "__context__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__context__", false]], "__context__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__context__", false]], "__context__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__context__", false]], "__context__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__context__", false]], "__context__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__context__", false]], "__context__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__context__", false]], "__context__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__context__", false]], "__context__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__context__", false]], "__context__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__context__", false]], "__context__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__context__", false]], "__context__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__context__", false]], "__context__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__context__", false]], "__context__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__context__", false]], "__context__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__context__", false]], "__context__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__context__", false]], "__context__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__context__", false]], "__context__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__context__", false]], "__context__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__context__", false]], "__delattr__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__delattr__", false]], "__delattr__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__delattr__", false]], "__delattr__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__delattr__", false]], "__delattr__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__delattr__", false]], "__delattr__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__delattr__", false]], "__delattr__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__delattr__", false]], "__delattr__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__delattr__", false]], "__delattr__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__delattr__", false]], "__delattr__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__delattr__", false]], "__delattr__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__delattr__", false]], "__delattr__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__delattr__", false]], "__delattr__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__delattr__", false]], "__delattr__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__delattr__", false]], "__delattr__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__delattr__", false]], "__delattr__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__delattr__", false]], "__delattr__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__delattr__", false]], "__delattr__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__delattr__", false]], "__delattr__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__delattr__", false]], "__delattr__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__delattr__", false]], "__delattr__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__delattr__", false]], "__delattr__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__delattr__", false]], "__delattr__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__delattr__", false]], "__delattr__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__delattr__", false]], "__delattr__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__delattr__", false]], "__delattr__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__delattr__", false]], "__delattr__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__delattr__", false]], "__delattr__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__delattr__", false]], "__delattr__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__delattr__", false]], "__delattr__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__delattr__", false]], "__delattr__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__delattr__", false]], "__delattr__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__delattr__", false]], "__dict__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__dict__", false]], "__dict__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__dict__", false]], "__dict__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__dict__", false]], "__dict__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__dict__", false]], "__dict__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__dict__", false]], "__dict__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__dict__", false]], "__dict__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__dict__", false]], "__dict__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__dict__", false]], "__dict__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__dict__", false]], "__dict__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__dict__", false]], "__dict__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__dict__", false]], "__dict__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__dict__", false]], "__dict__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__dict__", false]], "__dict__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__dict__", false]], "__dict__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__dict__", false]], "__dict__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__dict__", false]], "__dict__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__dict__", false]], "__dict__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__dict__", false]], "__dict__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__dict__", false]], "__dict__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__dict__", false]], "__dict__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__dict__", false]], "__dict__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__dict__", false]], "__dict__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__dict__", false]], "__dict__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__dict__", false]], "__dict__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__dict__", false]], "__dict__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__dict__", false]], "__dict__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__dict__", false]], "__dict__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__dict__", false]], "__dict__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__dict__", false]], "__dict__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__dict__", false]], "__dict__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__dict__", false]], "__getattribute__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__getattribute__", false]], "__getattribute__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__getattribute__", false]], "__getattribute__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__getattribute__", false]], "__getattribute__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__getattribute__", false]], "__getattribute__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__getattribute__", false]], "__getattribute__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__getattribute__", false]], "__getattribute__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__getattribute__", false]], "__getattribute__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__getattribute__", false]], "__getattribute__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__getattribute__", false]], "__getattribute__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__getattribute__", false]], "__getattribute__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__getattribute__", false]], "__getattribute__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__getattribute__", false]], "__getattribute__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__getattribute__", false]], "__getattribute__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__getattribute__", false]], "__getattribute__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__getattribute__", false]], "__getattribute__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__getattribute__", false]], "__getattribute__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__getattribute__", false]], "__getattribute__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__getattribute__", false]], "__getattribute__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__getattribute__", false]], "__getattribute__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__getattribute__", false]], "__getattribute__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__getattribute__", false]], "__getattribute__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__getattribute__", false]], "__getattribute__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__getattribute__", false]], "__getattribute__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__getattribute__", false]], "__getattribute__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__getattribute__", false]], "__getattribute__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__getattribute__", false]], "__getattribute__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__getattribute__", false]], "__getattribute__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__getattribute__", false]], "__getattribute__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__getattribute__", false]], "__getattribute__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__getattribute__", false]], "__getattribute__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__getattribute__", false]], "__init__() (addassemblybyindexpass method)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass.__init__", false]], "__init__() (addfinalizationassemblypass method)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass.__init__", false]], "__init__() (addinitializationassemblypass method)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass.__init__", false]], "__init__() (addinitializationinstructionspass method)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass.__init__", false]], "__init__() (addonepass method)": [[124, "microprobe.passes.instruction.AddOnePass.__init__", false]], "__init__() (address method)": [[27, "microprobe.code.address.Address.__init__", false]], "__init__() (autoalignpass method)": [[117, "microprobe.passes.initialization.AutoAlignPass.__init__", false]], "__init__() (averagedependencydistancepass method)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass.__init__", false]], "__init__() (bbl method)": [[31, "microprobe.code.bbl.Bbl.__init__", false]], "__init__() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.__init__", false]], "__init__() (branchbraidnextpass method)": [[95, "microprobe.passes.branch.BranchBraidNextPass.__init__", false]], "__init__() (branchnextpass method)": [[96, "microprobe.passes.branch.BranchNextPass.__init__", false]], "__init__() (buildingblock method)": [[34, "microprobe.code.benchmark.BuildingBlock.__init__", false]], "__init__() (cache method)": [[214, "microprobe.target.uarch.cache.Cache.__init__", false]], "__init__() (cachehierarchy method)": [[215, "microprobe.target.uarch.cache.CacheHierarchy.__init__", false]], "__init__() (cfg method)": [[37, "microprobe.code.cfg.Cfg.__init__", false]], "__init__() (choice method)": [[239, "microprobe.utils.distrib.Choice.__init__", false]], "__init__() (cli method)": [[230, "microprobe.utils.cmdline.CLI.__init__", false]], "__init__() (comparator method)": [[176, "microprobe.target.isa.comparator.Comparator.__init__", false]], "__init__() (constantdependencydistancepass method)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass.__init__", false]], "__init__() (context method)": [[39, "microprobe.code.context.Context.__init__", false]], "__init__() (cycleminimalallocationpass method)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass.__init__", false]], "__init__() (datmap method)": [[178, "microprobe.target.isa.dat.DATmap.__init__", false]], "__init__() (declarevariablespass method)": [[160, "microprobe.passes.variable.DeclareVariablesPass.__init__", false]], "__init__() (defaultregisterallocationpass method)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass.__init__", false]], "__init__() (definition method)": [[167, "microprobe.target.Definition.__init__", false]], "__init__() (didtsimplepass method)": [[125, "microprobe.passes.instruction.DIDTSimplePass.__init__", false]], "__init__() (disableasmbyopcodepass method)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass.__init__", false]], "__init__() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.__init__", false]], "__init__() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.__init__", false]], "__init__() (endlessloopdatamemorymodel method)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel.__init__", false]], "__init__() (endlessloopinstructionmemorymodel method)": [[88, "microprobe.model.memory.EndlessLoopInstructionMemoryModel.__init__", false]], "__init__() (environment method)": [[170, "microprobe.target.env.Environment.__init__", false]], "__init__() (fixindirectbranchpass method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.__init__", false]], "__init__() (fixmemoryreferencespass method)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass.__init__", false]], "__init__() (fixregisterspass method)": [[150, "microprobe.passes.register.FixRegistersPass.__init__", false]], "__init__() (generator method)": [[182, "microprobe.target.isa.generator.Generator.__init__", false]], "__init__() (genericcodestructurepass method)": [[154, "microprobe.passes.structure.GenericCodeStructurePass.__init__", false]], "__init__() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.__init__", false]], "__init__() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.__init__", false]], "__init__() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.__init__", false]], "__init__() (genericinstructionfield method)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.__init__", false]], "__init__() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.__init__", false]], "__init__() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.__init__", false]], "__init__() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.__init__", false]], "__init__() (genericmemorymodelpass method)": [[141, "microprobe.passes.memory.GenericMemoryModelPass.__init__", false]], "__init__() (genericmemorystreamspass method)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass.__init__", false]], "__init__() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.__init__", false]], "__init__() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.__init__", false]], "__init__() (genericmicroarchitectureelementtype method)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.__init__", false]], "__init__() (genericmodel method)": [[85, "microprobe.model.GenericModel.__init__", false]], "__init__() (genericoldmemorymodelpass method)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass.__init__", false]], "__init__() (genericregister method)": [[204, "microprobe.target.isa.register.GenericRegister.__init__", false]], "__init__() (genericregistertype method)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.__init__", false]], "__init__() (initializebranchdecorator method)": [[98, "microprobe.passes.branch.InitializeBranchDecorator.__init__", false]], "__init__() (initializedatpass method)": [[103, "microprobe.passes.dat.InitializeDATPass.__init__", false]], "__init__() (initializememorydecimalpass method)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass.__init__", false]], "__init__() (initializememorydecorator method)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator.__init__", false]], "__init__() (initializememoryfloatpass method)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass.__init__", false]], "__init__() (initializeregisterpass method)": [[118, "microprobe.passes.initialization.InitializeRegisterPass.__init__", false]], "__init__() (initializeregisterspass method)": [[119, "microprobe.passes.initialization.InitializeRegistersPass.__init__", false]], "__init__() (insertinstructionsequencepass method)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass.__init__", false]], "__init__() (instruction method)": [[41, "microprobe.code.ins.Instruction.__init__", false]], "__init__() (instructionaddress method)": [[28, "microprobe.code.address.InstructionAddress.__init__", false]], "__init__() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.__init__", false]], "__init__() (instructionfield method)": [[188, "microprobe.target.isa.instruction_field.InstructionField.__init__", false]], "__init__() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.__init__", false]], "__init__() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.__init__", false]], "__init__() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.__init__", false]], "__init__() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.__init__", false]], "__init__() (isa method)": [[174, "microprobe.target.isa.ISA.__init__", false]], "__init__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__init__", false]], "__init__() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.__init__", false]], "__init__() (linkbbls method)": [[99, "microprobe.passes.branch.LinkBbls.__init__", false]], "__init__() (memoryoperand method)": [[194, "microprobe.target.isa.operand.MemoryOperand.__init__", false]], "__init__() (memoryoperanddescriptor method)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.__init__", false]], "__init__() (memoryvalue method)": [[29, "microprobe.code.address.MemoryValue.__init__", false]], "__init__() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.__init__", false]], "__init__() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.__init__", false]], "__init__() (microarchitectureelementtype method)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.__init__", false]], "__init__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__init__", false]], "__init__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__init__", false]], "__init__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__init__", false]], "__init__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__init__", false]], "__init__() (microprobeasminstructiondefinition method)": [[225, "microprobe.utils.asm.MicroprobeAsmInstructionDefinition.__init__", false]], "__init__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__init__", false]], "__init__() (microprobebininstructionstream method)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.__init__", false]], "__init__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__init__", false]], "__init__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__init__", false]], "__init__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__init__", false]], "__init__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__init__", false]], "__init__() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.__init__", false]], "__init__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__init__", false]], "__init__() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.__init__", false]], "__init__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__init__", false]], "__init__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__init__", false]], "__init__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__init__", false]], "__init__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__init__", false]], "__init__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__init__", false]], "__init__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__init__", false]], "__init__() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.__init__", false]], "__init__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__init__", false]], "__init__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__init__", false]], "__init__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__init__", false]], "__init__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__init__", false]], "__init__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__init__", false]], "__init__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__init__", false]], "__init__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__init__", false]], "__init__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__init__", false]], "__init__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__init__", false]], "__init__() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.__init__", false]], "__init__() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.__init__", false]], "__init__() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.__init__", false]], "__init__() (microprobetestmemoryaccessdefinition method)": [[253, "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition.__init__", false]], "__init__() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.__init__", false]], "__init__() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.__init__", false]], "__init__() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.__init__", false]], "__init__() (microprobetestregisterdefinition method)": [[257, "microprobe.utils.mpt.MicroprobeTestRegisterDefinition.__init__", false]], "__init__() (microprobetestvariabledefinition method)": [[258, "microprobe.utils.mpt.MicroprobeTestVariableDefinition.__init__", false]], "__init__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__init__", false]], "__init__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__init__", false]], "__init__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__init__", false]], "__init__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__init__", false]], "__init__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__init__", false]], "__init__() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.__init__", false]], "__init__() (nohazardsallocationpass method)": [[151, "microprobe.passes.register.NoHazardsAllocationPass.__init__", false]], "__init__() (normalizebranchtargetspass method)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass.__init__", false]], "__init__() (operand method)": [[196, "microprobe.target.isa.operand.Operand.__init__", false]], "__init__() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.__init__", false]], "__init__() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.__init__", false]], "__init__() (operanddescriptor method)": [[199, "microprobe.target.isa.operand.OperandDescriptor.__init__", false]], "__init__() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.__init__", false]], "__init__() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.__init__", false]], "__init__() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.__init__", false]], "__init__() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.__init__", false]], "__init__() (pass method)": [[90, "microprobe.passes.Pass.__init__", false]], "__init__() (pickable method)": [[245, "microprobe.utils.misc.Pickable.__init__", false]], "__init__() (progress method)": [[246, "microprobe.utils.misc.Progress.__init__", false]], "__init__() (property method)": [[163, "microprobe.property.Property.__init__", false]], "__init__() (propertyholder method)": [[164, "microprobe.property.PropertyHolder.__init__", false]], "__init__() (randomallocationpass method)": [[152, "microprobe.passes.register.RandomAllocationPass.__init__", false]], "__init__() (randomdependencydistancepass method)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass.__init__", false]], "__init__() (randomizebytypepass method)": [[101, "microprobe.passes.branch.RandomizeByTypePass.__init__", false]], "__init__() (register method)": [[205, "microprobe.target.isa.register.Register.__init__", false]], "__init__() (registertype method)": [[208, "microprobe.target.isa.register_type.RegisterType.__init__", false]], "__init__() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.__init__", false]], "__init__() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.__init__", false]], "__init__() (replaceinstructionbytypepass method)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass.__init__", false]], "__init__() (replaceloadinstructionspass method)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass.__init__", false]], "__init__() (reproducesequencepass method)": [[130, "microprobe.passes.instruction.ReproduceSequencePass.__init__", false]], "__init__() (reserveregisterspass method)": [[120, "microprobe.passes.initialization.ReserveRegistersPass.__init__", false]], "__init__() (resolvesymbolicreferencespass method)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass.__init__", false]], "__init__() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.__init__", false]], "__init__() (setinitaddresspass method)": [[92, "microprobe.passes.address.SetInitAddressPass.__init__", false]], "__init__() (setinstructionlabelbyindexpass method)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass.__init__", false]], "__init__() (setinstructionoperandsbyopcodepass method)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.__init__", false]], "__init__() (setinstructiontypebyalternatingsequencespass method)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.__init__", false]], "__init__() (setinstructiontypebyelementpass method)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass.__init__", false]], "__init__() (setinstructiontypebyprofilepass method)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass.__init__", false]], "__init__() (setinstructiontypebypropertypass method)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.__init__", false]], "__init__() (setinstructiontypebysequencepass method)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass.__init__", false]], "__init__() (setinstructiontypepass method)": [[137, "microprobe.passes.instruction.SetInstructionTypePass.__init__", false]], "__init__() (setmemoryoperandbyopcodepass method)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass.__init__", false]], "__init__() (setrandominstructiontypepass method)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass.__init__", false]], "__init__() (simplebuildingblockpass method)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass.__init__", false]], "__init__() (singlememorystreampass method)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass.__init__", false]], "__init__() (synthesizer method)": [[24, "microprobe.code.Synthesizer.__init__", false]], "__init__() (target method)": [[168, "microprobe.target.Target.__init__", false]], "__init__() (tracesynthesizer method)": [[25, "microprobe.code.TraceSynthesizer.__init__", false]], "__init__() (translateaddresspass method)": [[104, "microprobe.passes.dat.TranslateAddressPass.__init__", false]], "__init__() (unreserveregisterspass method)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass.__init__", false]], "__init__() (updateinstructionaddressespass method)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass.__init__", false]], "__init__() (updatevariableaddressespass method)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass.__init__", false]], "__init__() (variable method)": [[46, "microprobe.code.var.Variable.__init__", false]], "__init__() (variablearray method)": [[47, "microprobe.code.var.VariableArray.__init__", false]], "__init__() (variablesingle method)": [[48, "microprobe.code.var.VariableSingle.__init__", false]], "__init__() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.__init__", false]], "__module__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__module__", false]], "__module__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__module__", false]], "__module__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__module__", false]], "__module__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__module__", false]], "__module__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__module__", false]], "__module__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__module__", false]], "__module__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__module__", false]], "__module__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__module__", false]], "__module__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__module__", false]], "__module__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__module__", false]], "__module__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__module__", false]], "__module__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__module__", false]], "__module__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__module__", false]], "__module__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__module__", false]], "__module__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__module__", false]], "__module__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__module__", false]], "__module__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__module__", false]], "__module__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__module__", false]], "__module__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__module__", false]], "__module__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__module__", false]], "__module__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__module__", false]], "__module__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__module__", false]], "__module__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__module__", false]], "__module__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__module__", false]], "__module__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__module__", false]], "__module__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__module__", false]], "__module__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__module__", false]], "__module__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__module__", false]], "__module__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__module__", false]], "__module__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__module__", false]], "__module__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__module__", false]], "__new__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__new__", false]], "__new__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__new__", false]], "__new__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__new__", false]], "__new__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__new__", false]], "__new__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__new__", false]], "__new__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__new__", false]], "__new__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__new__", false]], "__new__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__new__", false]], "__new__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__new__", false]], "__new__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__new__", false]], "__new__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__new__", false]], "__new__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__new__", false]], "__new__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__new__", false]], "__new__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__new__", false]], "__new__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__new__", false]], "__new__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__new__", false]], "__new__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__new__", false]], "__new__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__new__", false]], "__new__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__new__", false]], "__new__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__new__", false]], "__new__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__new__", false]], "__new__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__new__", false]], "__new__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__new__", false]], "__new__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__new__", false]], "__new__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__new__", false]], "__new__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__new__", false]], "__new__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__new__", false]], "__new__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__new__", false]], "__new__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__new__", false]], "__new__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__new__", false]], "__new__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__new__", false]], "__reduce__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__reduce__", false]], "__reduce__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__reduce__", false]], "__reduce__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__reduce__", false]], "__reduce__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__reduce__", false]], "__reduce__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__reduce__", false]], "__reduce__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__reduce__", false]], "__reduce__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__reduce__", false]], "__reduce__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__reduce__", false]], "__reduce__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__reduce__", false]], "__reduce__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__reduce__", false]], "__reduce__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__reduce__", false]], "__reduce__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__reduce__", false]], "__reduce__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__reduce__", false]], "__reduce__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__reduce__", false]], "__reduce__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__reduce__", false]], "__reduce__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__reduce__", false]], "__reduce__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__reduce__", false]], "__reduce__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__reduce__", false]], "__reduce__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__reduce__", false]], "__reduce__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__reduce__", false]], "__reduce__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__reduce__", false]], "__reduce__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__reduce__", false]], "__reduce__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__reduce__", false]], "__reduce__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__reduce__", false]], "__reduce__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__reduce__", false]], "__reduce__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__reduce__", false]], "__reduce__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__reduce__", false]], "__reduce__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__reduce__", false]], "__reduce__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__reduce__", false]], "__reduce__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__reduce__", false]], "__reduce__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__reduce__", false]], "__repr__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__repr__", false]], "__repr__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__repr__", false]], "__repr__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__repr__", false]], "__repr__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__repr__", false]], "__repr__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__repr__", false]], "__repr__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__repr__", false]], "__repr__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__repr__", false]], "__repr__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__repr__", false]], "__repr__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__repr__", false]], "__repr__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__repr__", false]], "__repr__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__repr__", false]], "__repr__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__repr__", false]], "__repr__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__repr__", false]], "__repr__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__repr__", false]], "__repr__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__repr__", false]], "__repr__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__repr__", false]], "__repr__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__repr__", false]], "__repr__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__repr__", false]], "__repr__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__repr__", false]], "__repr__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__repr__", false]], "__repr__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__repr__", false]], "__repr__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__repr__", false]], "__repr__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__repr__", false]], "__repr__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__repr__", false]], "__repr__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__repr__", false]], "__repr__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__repr__", false]], "__repr__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__repr__", false]], "__repr__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__repr__", false]], "__repr__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__repr__", false]], "__repr__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__repr__", false]], "__repr__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__repr__", false]], "__setattr__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__setattr__", false]], "__setattr__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__setattr__", false]], "__setattr__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__setattr__", false]], "__setattr__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__setattr__", false]], "__setattr__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__setattr__", false]], "__setattr__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__setattr__", false]], "__setattr__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__setattr__", false]], "__setattr__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__setattr__", false]], "__setattr__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__setattr__", false]], "__setattr__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__setattr__", false]], "__setattr__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__setattr__", false]], "__setattr__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__setattr__", false]], "__setattr__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__setattr__", false]], "__setattr__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__setattr__", false]], "__setattr__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__setattr__", false]], "__setattr__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__setattr__", false]], "__setattr__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__setattr__", false]], "__setattr__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__setattr__", false]], "__setattr__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__setattr__", false]], "__setattr__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__setattr__", false]], "__setattr__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__setattr__", false]], "__setattr__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__setattr__", false]], "__setattr__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__setattr__", false]], "__setattr__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__setattr__", false]], "__setattr__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__setattr__", false]], "__setattr__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__setattr__", false]], "__setattr__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__setattr__", false]], "__setattr__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__setattr__", false]], "__setattr__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__setattr__", false]], "__setattr__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__setattr__", false]], "__setattr__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__setattr__", false]], "__setstate__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__setstate__", false]], "__setstate__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__setstate__", false]], "__setstate__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__setstate__", false]], "__setstate__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__setstate__", false]], "__setstate__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__setstate__", false]], "__setstate__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__setstate__", false]], "__setstate__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__setstate__", false]], "__setstate__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__setstate__", false]], "__setstate__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__setstate__", false]], "__setstate__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__setstate__", false]], "__setstate__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__setstate__", false]], "__setstate__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__setstate__", false]], "__setstate__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__setstate__", false]], "__setstate__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__setstate__", false]], "__setstate__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__setstate__", false]], "__setstate__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__setstate__", false]], "__setstate__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__setstate__", false]], "__setstate__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__setstate__", false]], "__setstate__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__setstate__", false]], "__setstate__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__setstate__", false]], "__setstate__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__setstate__", false]], "__setstate__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__setstate__", false]], "__setstate__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__setstate__", false]], "__setstate__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__setstate__", false]], "__setstate__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__setstate__", false]], "__setstate__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__setstate__", false]], "__setstate__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__setstate__", false]], "__setstate__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__setstate__", false]], "__setstate__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__setstate__", false]], "__setstate__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__setstate__", false]], "__setstate__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__setstate__", false]], "__str__() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__str__", false]], "__str__() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__str__", false]], "__str__() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__str__", false]], "__str__() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__str__", false]], "__str__() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.__str__", false]], "__str__() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__str__", false]], "__str__() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__str__", false]], "__str__() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.__str__", false]], "__str__() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__str__", false]], "__str__() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__str__", false]], "__str__() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__str__", false]], "__str__() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__str__", false]], "__str__() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__str__", false]], "__str__() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.__str__", false]], "__str__() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.__str__", false]], "__str__() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__str__", false]], "__str__() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.__str__", false]], "__str__() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.__str__", false]], "__str__() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.__str__", false]], "__str__() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__str__", false]], "__str__() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__str__", false]], "__str__() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__str__", false]], "__str__() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__str__", false]], "__str__() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.__str__", false]], "__str__() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__str__", false]], "__str__() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__str__", false]], "__str__() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.__str__", false]], "__str__() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__str__", false]], "__str__() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.__str__", false]], "__str__() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.__str__", false]], "__str__() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__str__", false]], "__suppress_context__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__suppress_context__", false]], "__suppress_context__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__suppress_context__", false]], "__suppress_context__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__suppress_context__", false]], "__suppress_context__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__suppress_context__", false]], "__suppress_context__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__suppress_context__", false]], "__suppress_context__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__suppress_context__", false]], "__suppress_context__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__suppress_context__", false]], "__suppress_context__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__suppress_context__", false]], "__suppress_context__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__suppress_context__", false]], "__suppress_context__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__suppress_context__", false]], "__suppress_context__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__suppress_context__", false]], "__suppress_context__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__suppress_context__", false]], "__suppress_context__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__suppress_context__", false]], "__suppress_context__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__suppress_context__", false]], "__suppress_context__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__suppress_context__", false]], "__suppress_context__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__suppress_context__", false]], "__suppress_context__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__suppress_context__", false]], "__suppress_context__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__suppress_context__", false]], "__suppress_context__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__suppress_context__", false]], "__suppress_context__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__suppress_context__", false]], "__suppress_context__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__suppress_context__", false]], "__suppress_context__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__suppress_context__", false]], "__suppress_context__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__suppress_context__", false]], "__suppress_context__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__suppress_context__", false]], "__suppress_context__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__suppress_context__", false]], "__suppress_context__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__suppress_context__", false]], "__suppress_context__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__suppress_context__", false]], "__suppress_context__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__suppress_context__", false]], "__suppress_context__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__suppress_context__", false]], "__suppress_context__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__suppress_context__", false]], "__suppress_context__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__suppress_context__", false]], "__traceback__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__traceback__", false]], "__traceback__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__traceback__", false]], "__traceback__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__traceback__", false]], "__traceback__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__traceback__", false]], "__traceback__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__traceback__", false]], "__traceback__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__traceback__", false]], "__traceback__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__traceback__", false]], "__traceback__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__traceback__", false]], "__traceback__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__traceback__", false]], "__traceback__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__traceback__", false]], "__traceback__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__traceback__", false]], "__traceback__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__traceback__", false]], "__traceback__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__traceback__", false]], "__traceback__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__traceback__", false]], "__traceback__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__traceback__", false]], "__traceback__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__traceback__", false]], "__traceback__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__traceback__", false]], "__traceback__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__traceback__", false]], "__traceback__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__traceback__", false]], "__traceback__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__traceback__", false]], "__traceback__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__traceback__", false]], "__traceback__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__traceback__", false]], "__traceback__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__traceback__", false]], "__traceback__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__traceback__", false]], "__traceback__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__traceback__", false]], "__traceback__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__traceback__", false]], "__traceback__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__traceback__", false]], "__traceback__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__traceback__", false]], "__traceback__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__traceback__", false]], "__traceback__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__traceback__", false]], "__traceback__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__traceback__", false]], "__weakref__ (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.__weakref__", false]], "__weakref__ (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.__weakref__", false]], "__weakref__ (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.__weakref__", false]], "__weakref__ (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.__weakref__", false]], "__weakref__ (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.__weakref__", false]], "__weakref__ (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.__weakref__", false]], "__weakref__ (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.__weakref__", false]], "__weakref__ (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.__weakref__", false]], "__weakref__ (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.__weakref__", false]], "__weakref__ (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.__weakref__", false]], "__weakref__ (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.__weakref__", false]], "__weakref__ (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.__weakref__", false]], "__weakref__ (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.__weakref__", false]], "__weakref__ (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.__weakref__", false]], "__weakref__ (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.__weakref__", false]], "__weakref__ (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.__weakref__", false]], "__weakref__ (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.__weakref__", false]], "__weakref__ (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.__weakref__", false]], "__weakref__ (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.__weakref__", false]], "__weakref__ (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.__weakref__", false]], "__weakref__ (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.__weakref__", false]], "__weakref__ (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.__weakref__", false]], "__weakref__ (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.__weakref__", false]], "__weakref__ (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.__weakref__", false]], "__weakref__ (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.__weakref__", false]], "__weakref__ (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.__weakref__", false]], "__weakref__ (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.__weakref__", false]], "__weakref__ (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.__weakref__", false]], "__weakref__ (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.__weakref__", false]], "__weakref__ (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.__weakref__", false]], "__weakref__ (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.__weakref__", false]], "access() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.access", false]], "access() (operand method)": [[196, "microprobe.target.isa.operand.Operand.access", false]], "access() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.access", false]], "access() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.access", false]], "access() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.access", false]], "access() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.access", false]], "access() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.access", false]], "add (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.add", false]], "add_allow_register() (instruction method)": [[41, "microprobe.code.ins.Instruction.add_allow_register", false]], "add_argument() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.add_argument", false]], "add_argument() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.add_argument", false]], "add_argument_group() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.add_argument_group", false]], "add_arguments() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.add_arguments", false]], "add_bbl() (cfg method)": [[37, "microprobe.code.cfg.Cfg.add_bbl", false]], "add_bbls() (cfg method)": [[37, "microprobe.code.cfg.Cfg.add_bbls", false]], "add_comment() (instruction method)": [[41, "microprobe.code.ins.Instruction.add_comment", false]], "add_decorator() (instruction method)": [[41, "microprobe.code.ins.Instruction.add_decorator", false]], "add_description() (cli method)": [[230, "microprobe.utils.cmdline.CLI.add_description", false]], "add_epilog() (cli method)": [[230, "microprobe.utils.cmdline.CLI.add_epilog", false]], "add_fini() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_fini", false]], "add_fini() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_fini", false]], "add_flag() (cli method)": [[230, "microprobe.utils.cmdline.CLI.add_flag", false]], "add_group() (cli method)": [[230, "microprobe.utils.cmdline.CLI.add_group", false]], "add_info() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_info", false]], "add_info() (buildingblock method)": [[34, "microprobe.code.benchmark.BuildingBlock.add_info", false]], "add_info() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_info", false]], "add_init() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_init", false]], "add_init() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_init", false]], "add_instructions() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_instructions", false]], "add_instructions() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_instructions", false]], "add_mapping() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.add_mapping", false]], "add_mapping() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.add_mapping", false]], "add_mutually_exclusive_group() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.add_mutually_exclusive_group", false]], "add_option() (cli method)": [[230, "microprobe.utils.cmdline.CLI.add_option", false]], "add_pass() (synthesizer method)": [[24, "microprobe.code.Synthesizer.add_pass", false]], "add_pass() (tracesynthesizer method)": [[25, "microprobe.code.TraceSynthesizer.add_pass", false]], "add_pass_info() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_pass_info", false]], "add_pass_info() (buildingblock method)": [[34, "microprobe.code.benchmark.BuildingBlock.add_pass_info", false]], "add_pass_info() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_pass_info", false]], "add_properties_to_isa() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.add_properties_to_isa", false]], "add_properties_to_isa() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.add_properties_to_isa", false]], "add_properties_to_isa() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.add_properties_to_isa", false]], "add_requirement() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_requirement", false]], "add_requirement() (buildingblock method)": [[34, "microprobe.code.benchmark.BuildingBlock.add_requirement", false]], "add_requirement() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_requirement", false]], "add_reserved_registers() (context method)": [[39, "microprobe.code.context.Context.add_reserved_registers", false]], "add_section() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.add_section", false]], "add_subparsers() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.add_subparsers", false]], "add_text() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.add_text", false]], "add_to_register() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.add_to_register", false]], "add_to_register() (isa method)": [[174, "microprobe.target.isa.ISA.add_to_register", false]], "add_usage() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.add_usage", false]], "add_warning() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.add_warning", false]], "add_warning() (buildingblock method)": [[34, "microprobe.code.benchmark.BuildingBlock.add_warning", false]], "add_warning() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.add_warning", false]], "addassemblybyindexpass (class in microprobe.passes.instruction)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass", false]], "addfinalizationassemblypass (class in microprobe.passes.initialization)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass", false]], "addinitializationassemblypass (class in microprobe.passes.initialization)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass", false]], "addinitializationinstructionspass (class in microprobe.passes.initialization)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass", false]], "addonepass (class in microprobe.passes.instruction)": [[124, "microprobe.passes.instruction.AddOnePass", false]], "address (bbl property)": [[31, "microprobe.code.bbl.Bbl.address", false]], "address (class in microprobe.code.address)": [[27, "microprobe.code.address.Address", false]], "address (instruction property)": [[41, "microprobe.code.ins.Instruction.address", false]], "address (instructionmemoryoperandvalue property)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.address", false]], "address (memoryvalue property)": [[29, "microprobe.code.address.MemoryValue.address", false]], "address (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.address", false]], "address (variable property)": [[46, "microprobe.code.var.Variable.address", false]], "address (variablearray property)": [[47, "microprobe.code.var.VariableArray.address", false]], "address (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.address", false]], "address_absolute (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.address_absolute", false]], "address_absolute (operand property)": [[196, "microprobe.target.isa.operand.Operand.address_absolute", false]], "address_absolute (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.address_absolute", false]], "address_absolute (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.address_absolute", false]], "address_absolute (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.address_absolute", false]], "address_absolute (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.address_absolute", false]], "address_absolute (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.address_absolute", false]], "address_base (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.address_base", false]], "address_base (operand property)": [[196, "microprobe.target.isa.operand.Operand.address_base", false]], "address_base (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.address_base", false]], "address_base (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.address_base", false]], "address_base (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.address_base", false]], "address_base (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.address_base", false]], "address_base (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.address_base", false]], "address_immediate (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.address_immediate", false]], "address_immediate (operand property)": [[196, "microprobe.target.isa.operand.Operand.address_immediate", false]], "address_immediate (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.address_immediate", false]], "address_immediate (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.address_immediate", false]], "address_immediate (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.address_immediate", false]], "address_immediate (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.address_immediate", false]], "address_immediate (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.address_immediate", false]], "address_in_map() (datmap method)": [[178, "microprobe.target.isa.dat.DATmap.address_in_map", false]], "address_index (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.address_index", false]], "address_index (operand property)": [[196, "microprobe.target.isa.operand.Operand.address_index", false]], "address_index (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.address_index", false]], "address_index (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.address_index", false]], "address_index (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.address_index", false]], "address_index (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.address_index", false]], "address_index (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.address_index", false]], "address_operands (memoryoperand property)": [[194, "microprobe.target.isa.operand.MemoryOperand.address_operands", false]], "address_registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.address_registers", false]], "address_registers (isa property)": [[174, "microprobe.target.isa.ISA.address_registers", false]], "address_relative (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.address_relative", false]], "address_relative (operand property)": [[196, "microprobe.target.isa.operand.Operand.address_relative", false]], "address_relative (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.address_relative", false]], "address_relative (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.address_relative", false]], "address_relative (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.address_relative", false]], "address_relative (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.address_relative", false]], "address_relative (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.address_relative", false]], "address_translate() (datmap method)": [[178, "microprobe.target.isa.dat.DATmap.address_translate", false]], "alias (generator property)": [[182, "microprobe.target.isa.generator.Generator.alias", false]], "align (variable property)": [[46, "microprobe.code.var.Variable.align", false]], "align (variablearray property)": [[47, "microprobe.code.var.VariableArray.align", false]], "align (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.align", false]], "alignment() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.alignment", false]], "allowed_regs (instruction property)": [[41, "microprobe.code.ins.Instruction.allowed_regs", false]], "allows() (instruction method)": [[41, "microprobe.code.ins.Instruction.allows", false]], "arch (comparator property)": [[176, "microprobe.target.isa.comparator.Comparator.arch", false]], "arch (generator property)": [[182, "microprobe.target.isa.generator.Generator.arch", false]], "architecture_type (instruction property)": [[41, "microprobe.code.ins.Instruction.architecture_type", false]], "arg_parser (cli property)": [[230, "microprobe.utils.cmdline.CLI.arg_parser", false]], "args (lazyargumenterror attribute)": [[231, "microprobe.utils.cmdline.LazyArgumentError.args", false]], "args (microprobeaddresstranslationerror attribute)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.args", false]], "args (microprobearchitecturedefinitionerror attribute)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.args", false]], "args (microprobearchitectureformaterror attribute)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.args", false]], "args (microprobeasmerror attribute)": [[57, "microprobe.exceptions.MicroprobeAsmError.args", false]], "args (microprobebinaryerror attribute)": [[58, "microprobe.exceptions.MicroprobeBinaryError.args", false]], "args (microprobebranchconditionerror attribute)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.args", false]], "args (microprobecacheerror attribute)": [[60, "microprobe.exceptions.MicroprobeCacheError.args", false]], "args (microprobecalledprocesserror attribute)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.args", false]], "args (microprobecodegenerationerror attribute)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.args", false]], "args (microprobeconstantregistererror attribute)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.args", false]], "args (microprobedmaformaterror attribute)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.args", false]], "args (microprobeduplicatedvalueerror attribute)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.args", false]], "args (microprobeerror attribute)": [[66, "microprobe.exceptions.MicroprobeError.args", false]], "args (microprobeexception attribute)": [[67, "microprobe.exceptions.MicroprobeException.args", false]], "args (microprobeimportdefinitionerror attribute)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.args", false]], "args (microprobeimporterror attribute)": [[69, "microprobe.exceptions.MicroprobeImportError.args", false]], "args (microprobelookuperror attribute)": [[70, "microprobe.exceptions.MicroprobeLookupError.args", false]], "args (microprobemodelerror attribute)": [[72, "microprobe.exceptions.MicroprobeModelError.args", false]], "args (microprobemptformaterror attribute)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.args", false]], "args (microprobenocomparatorerror attribute)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.args", false]], "args (microprobenogenerationpatherror attribute)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.args", false]], "args (microprobeobjdumperror attribute)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.args", false]], "args (microprobepolicyerror attribute)": [[76, "microprobe.exceptions.MicroprobePolicyError.args", false]], "args (microproberuncmderror attribute)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.args", false]], "args (microprobetargetdefinitionerror attribute)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.args", false]], "args (microprobetypeerror attribute)": [[79, "microprobe.exceptions.MicroprobeTypeError.args", false]], "args (microprobeuncheckableenvironmentwarning attribute)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.args", false]], "args (microprobevalueerror attribute)": [[81, "microprobe.exceptions.MicroprobeValueError.args", false]], "args (microprobewarning attribute)": [[82, "microprobe.exceptions.MicroprobeWarning.args", false]], "args (microprobeyamlformaterror attribute)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.args", false]], "arguments (cli property)": [[230, "microprobe.utils.cmdline.CLI.arguments", false]], "array() (variable method)": [[46, "microprobe.code.var.Variable.array", false]], "array() (variablearray method)": [[47, "microprobe.code.var.VariableArray.array", false]], "array() (variablesingle method)": [[48, "microprobe.code.var.VariableSingle.array", false]], "asm (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.asm", false]], "assembly() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.assembly", false]], "assembly() (instruction method)": [[41, "microprobe.code.ins.Instruction.assembly", false]], "assembly() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.assembly", false]], "assembly_format (genericinstructionformat property)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.assembly_format", false]], "assembly_format (instructionformat property)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.assembly_format", false]], "autoalignpass (class in microprobe.passes.initialization)": [[117, "microprobe.passes.initialization.AutoAlignPass", false]], "average() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.average", false]], "averagedependencydistancepass (class in microprobe.passes.ilp)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass", false]], "base_address (address property)": [[27, "microprobe.code.address.Address.base_address", false]], "base_address (instructionaddress property)": [[28, "microprobe.code.address.InstructionAddress.base_address", false]], "bbl (class in microprobe.code.bbl)": [[31, "microprobe.code.bbl.Bbl", false]], "bbls (cfg property)": [[37, "microprobe.code.cfg.Cfg.bbls", false]], "benchmark (class in microprobe.code.benchmark)": [[33, "microprobe.code.benchmark.Benchmark", false]], "benchmark (wrapper property)": [[50, "microprobe.code.wrapper.Wrapper.benchmark", false]], "benchmark_factory() (in module microprobe.code.benchmark)": [[32, "microprobe.code.benchmark.benchmark_factory", false]], "binary() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.binary", false]], "binary() (instruction method)": [[41, "microprobe.code.ins.Instruction.binary", false]], "binary() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.binary", false]], "bit_mask (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.bit_mask", false]], "bit_rate (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.bit_rate", false]], "bits_x_lines (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.bits_x_lines", false]], "bits_x_offset (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.bits_x_offset", false]], "bits_x_set (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.bits_x_set", false]], "boolean_states (duplicateconfigparser attribute)": [[235, "microprobe.utils.config.DuplicateConfigParser.BOOLEAN_STATES", false]], "branch_to_itself() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.branch_to_itself", false]], "branch_to_itself() (isa method)": [[174, "microprobe.target.isa.ISA.branch_to_itself", false]], "branch_unconditional_relative() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.branch_unconditional_relative", false]], "branch_unconditional_relative() (isa method)": [[174, "microprobe.target.isa.ISA.branch_unconditional_relative", false]], "branchbraidnextpass (class in microprobe.passes.branch)": [[95, "microprobe.passes.branch.BranchBraidNextPass", false]], "branchnextpass (class in microprobe.passes.branch)": [[96, "microprobe.passes.branch.BranchNextPass", false]], "buildingblock (class in microprobe.code.benchmark)": [[34, "microprobe.code.benchmark.BuildingBlock", false]], "cache (class in microprobe.target.uarch.cache)": [[214, "microprobe.target.uarch.cache.Cache", false]], "cache_file() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.cache_file", false]], "cache_hierarchy (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.cache_hierarchy", false]], "cache_hierarchy_from_elements() (in module microprobe.target.uarch.cache)": [[213, "microprobe.target.uarch.cache.cache_hierarchy_from_elements", false]], "cachehierarchy (class in microprobe.target.uarch.cache)": [[215, "microprobe.target.uarch.cache.CacheHierarchy", false]], "cfg (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.cfg", false]], "cfg (class in microprobe.code.cfg)": [[37, "microprobe.code.cfg.Cfg", false]], "cfg (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.cfg", false]], "check() (addassemblybyindexpass method)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass.check", false]], "check() (addfinalizationassemblypass method)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass.check", false]], "check() (addinitializationassemblypass method)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass.check", false]], "check() (addinitializationinstructionspass method)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass.check", false]], "check() (addonepass method)": [[124, "microprobe.passes.instruction.AddOnePass.check", false]], "check() (autoalignpass method)": [[117, "microprobe.passes.initialization.AutoAlignPass.check", false]], "check() (averagedependencydistancepass method)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass.check", false]], "check() (branchbraidnextpass method)": [[95, "microprobe.passes.branch.BranchBraidNextPass.check", false]], "check() (branchnextpass method)": [[96, "microprobe.passes.branch.BranchNextPass.check", false]], "check() (comparator method)": [[176, "microprobe.target.isa.comparator.Comparator.check", false]], "check() (constantdependencydistancepass method)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass.check", false]], "check() (cycleminimalallocationpass method)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass.check", false]], "check() (declarevariablespass method)": [[160, "microprobe.passes.variable.DeclareVariablesPass.check", false]], "check() (defaultregisterallocationpass method)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass.check", false]], "check() (didtsimplepass method)": [[125, "microprobe.passes.instruction.DIDTSimplePass.check", false]], "check() (disableasmbyopcodepass method)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass.check", false]], "check() (fixindirectbranchpass method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.check", false]], "check() (fixmemoryreferencespass method)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass.check", false]], "check() (fixregisterspass method)": [[150, "microprobe.passes.register.FixRegistersPass.check", false]], "check() (generator method)": [[182, "microprobe.target.isa.generator.Generator.check", false]], "check() (genericcodestructurepass method)": [[154, "microprobe.passes.structure.GenericCodeStructurePass.check", false]], "check() (genericmemorymodelpass method)": [[141, "microprobe.passes.memory.GenericMemoryModelPass.check", false]], "check() (genericmemorystreamspass method)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass.check", false]], "check() (genericoldmemorymodelpass method)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass.check", false]], "check() (initializebranchdecorator method)": [[98, "microprobe.passes.branch.InitializeBranchDecorator.check", false]], "check() (initializedatpass method)": [[103, "microprobe.passes.dat.InitializeDATPass.check", false]], "check() (initializememorydecimalpass method)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass.check", false]], "check() (initializememorydecorator method)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator.check", false]], "check() (initializememoryfloatpass method)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass.check", false]], "check() (initializeregisterpass method)": [[118, "microprobe.passes.initialization.InitializeRegisterPass.check", false]], "check() (initializeregisterspass method)": [[119, "microprobe.passes.initialization.InitializeRegistersPass.check", false]], "check() (insertinstructionsequencepass method)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass.check", false]], "check() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.check", false]], "check() (linkbbls method)": [[99, "microprobe.passes.branch.LinkBbls.check", false]], "check() (nohazardsallocationpass method)": [[151, "microprobe.passes.register.NoHazardsAllocationPass.check", false]], "check() (normalizebranchtargetspass method)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass.check", false]], "check() (operand method)": [[196, "microprobe.target.isa.operand.Operand.check", false]], "check() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.check", false]], "check() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.check", false]], "check() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.check", false]], "check() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.check", false]], "check() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.check", false]], "check() (pass method)": [[90, "microprobe.passes.Pass.check", false]], "check() (randomallocationpass method)": [[152, "microprobe.passes.register.RandomAllocationPass.check", false]], "check() (randomdependencydistancepass method)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass.check", false]], "check() (randomizebytypepass method)": [[101, "microprobe.passes.branch.RandomizeByTypePass.check", false]], "check() (replaceinstructionbytypepass method)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass.check", false]], "check() (replaceloadinstructionspass method)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass.check", false]], "check() (reproducesequencepass method)": [[130, "microprobe.passes.instruction.ReproduceSequencePass.check", false]], "check() (reserveregisterspass method)": [[120, "microprobe.passes.initialization.ReserveRegistersPass.check", false]], "check() (resolvesymbolicreferencespass method)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass.check", false]], "check() (setinitaddresspass method)": [[92, "microprobe.passes.address.SetInitAddressPass.check", false]], "check() (setinstructionlabelbyindexpass method)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass.check", false]], "check() (setinstructionoperandsbyopcodepass method)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.check", false]], "check() (setinstructiontypebyalternatingsequencespass method)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.check", false]], "check() (setinstructiontypebyelementpass method)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass.check", false]], "check() (setinstructiontypebyprofilepass method)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass.check", false]], "check() (setinstructiontypebypropertypass method)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.check", false]], "check() (setinstructiontypebysequencepass method)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass.check", false]], "check() (setinstructiontypepass method)": [[137, "microprobe.passes.instruction.SetInstructionTypePass.check", false]], "check() (setmemoryoperandbyopcodepass method)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass.check", false]], "check() (setrandominstructiontypepass method)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass.check", false]], "check() (simplebuildingblockpass method)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass.check", false]], "check() (singlememorystreampass method)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass.check", false]], "check() (translateaddresspass method)": [[104, "microprobe.passes.dat.TranslateAddressPass.check", false]], "check() (unreserveregisterspass method)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass.check", false]], "check() (updateinstructionaddressespass method)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass.check", false]], "check() (updatevariableaddressespass method)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass.check", false]], "check_alignment() (address method)": [[27, "microprobe.code.address.Address.check_alignment", false]], "check_alignment() (instructionaddress method)": [[28, "microprobe.code.address.InstructionAddress.check_alignment", false]], "check_argument_errors() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.check_argument_errors", false]], "check_branch() (fixindirectbranchpass static method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.check_branch", false]], "check_context() (instruction method)": [[41, "microprobe.code.ins.Instruction.check_context", false]], "choice (class in microprobe.utils.distrib)": [[239, "microprobe.utils.distrib.Choice", false]], "clear() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.clear", false]], "clear() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.clear", false]], "clear() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.clear", false]], "clear() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.clear", false]], "clear() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.clear", false]], "cli (class in microprobe.utils.cmdline)": [[230, "microprobe.utils.cmdline.CLI", false]], "closest_common_element() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.closest_common_element", false]], "closest_common_element() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.closest_common_element", false]], "closest_divisor() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.closest_divisor", false]], "code (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.code", false]], "code (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.code", false]], "code (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.code", false]], "code_segment (context property)": [[39, "microprobe.code.context.Context.code_segment", false]], "code_size (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.code_size", false]], "code_size (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.code_size", false]], "codification (genericregister property)": [[204, "microprobe.target.isa.register.GenericRegister.codification", false]], "codification() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.codification", false]], "codification() (operand method)": [[196, "microprobe.target.isa.operand.Operand.codification", false]], "codification() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.codification", false]], "codification() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.codification", false]], "codification() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.codification", false]], "codification() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.codification", false]], "codification() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.codification", false]], "codification() (register method)": [[205, "microprobe.target.isa.register.Register.codification", false]], "comments (instruction property)": [[41, "microprobe.code.ins.Instruction.comments", false]], "comments (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.comments", false]], "comparator (class in microprobe.target.isa.comparator)": [[176, "microprobe.target.isa.comparator.Comparator", false]], "compare_and_branch() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.compare_and_branch", false]], "compare_and_branch() (isa method)": [[174, "microprobe.target.isa.ISA.compare_and_branch", false]], "compress_file() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.compress_file", false]], "compute_weighted_profile_average() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.compute_weighted_profile_average", false]], "congruence_class() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.congruence_class", false]], "constant (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.constant", false]], "constant (operand property)": [[196, "microprobe.target.isa.operand.Operand.constant", false]], "constant (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.constant", false]], "constant (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.constant", false]], "constant (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.constant", false]], "constant (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.constant", false]], "constant (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.constant", false]], "constantdependencydistancepass (class in microprobe.passes.ilp)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass", false]], "contains_data (cache property)": [[214, "microprobe.target.uarch.cache.Cache.contains_data", false]], "contains_data (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.contains_data", false]], "contains_instructions (cache property)": [[214, "microprobe.target.uarch.cache.Cache.contains_instructions", false]], "contains_instructions (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.contains_instructions", false]], "context (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.context", false]], "context (class in microprobe.code.context)": [[39, "microprobe.code.context.Context", false]], "context (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.context", false]], "context() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.context", false]], "context_callbacks (instruction property)": [[41, "microprobe.code.ins.Instruction.context_callbacks", false]], "context_var (genericisa property)": [[173, "microprobe.target.isa.GenericISA.context_var", false]], "context_var (isa property)": [[174, "microprobe.target.isa.ISA.context_var", false]], "control (dynamicaddresstranslation property)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.control", false]], "control (genericdynamicaddresstranslation property)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.control", false]], "control_registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.control_registers", false]], "control_registers (isa property)": [[174, "microprobe.target.isa.ISA.control_registers", false]], "convert_arg_line_to_args() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.convert_arg_line_to_args", false]], "converters (duplicateconfigparser property)": [[235, "microprobe.utils.config.DuplicateConfigParser.converters", false]], "copy() (address method)": [[27, "microprobe.code.address.Address.copy", false]], "copy() (context method)": [[39, "microprobe.code.context.Context.copy", false]], "copy() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.copy", false]], "copy() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.copy", false]], "copy() (instruction method)": [[41, "microprobe.code.ins.Instruction.copy", false]], "copy() (instructionaddress method)": [[28, "microprobe.code.address.InstructionAddress.copy", false]], "copy() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.copy", false]], "copy() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.copy", false]], "copy() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.copy", false]], "copy() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.copy", false]], "copy() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.copy", false]], "copy() (microprobetestmemoryaccessdefinition method)": [[253, "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition.copy", false]], "copy() (microprobetestregisterdefinition method)": [[257, "microprobe.utils.mpt.MicroprobeTestRegisterDefinition.copy", false]], "copy() (microprobetestvariabledefinition method)": [[258, "microprobe.utils.mpt.MicroprobeTestVariableDefinition.copy", false]], "copy() (operand method)": [[196, "microprobe.target.isa.operand.Operand.copy", false]], "copy() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.copy", false]], "copy() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.copy", false]], "copy() (operanddescriptor method)": [[199, "microprobe.target.isa.operand.OperandDescriptor.copy", false]], "copy() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.copy", false]], "copy() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.copy", false]], "copy() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.copy", false]], "copy() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.copy", false]], "copy() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.copy", false]], "create_dependency_between_ins() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.create_dependency_between_ins", false]], "csv_with_integer() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.csv_with_integer", false]], "csv_with_ranges() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.csv_with_ranges", false]], "cycle_count (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.cycle_count", false]], "cycle_count (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.cycle_count", false]], "cycle_count (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.cycle_count", false]], "cycleminimalallocationpass (class in microprobe.passes.register)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass", false]], "dat (context property)": [[39, "microprobe.code.context.Context.dat", false]], "dat_mappings (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.dat_mappings", false]], "dat_mappings (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.dat_mappings", false]], "dat_mappings (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.dat_mappings", false]], "dat_properties (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.dat_properties", false]], "dat_properties (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.dat_properties", false]], "dat_properties (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.dat_properties", false]], "data_linesize() (cachehierarchy method)": [[215, "microprobe.target.uarch.cache.CacheHierarchy.data_linesize", false]], "data_segment (context property)": [[39, "microprobe.code.context.Context.data_segment", false]], "datmap (class in microprobe.target.isa.dat)": [[178, "microprobe.target.isa.dat.DATmap", false]], "declare_global_var() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.declare_global_var", false]], "declarevariablespass (class in microprobe.passes.variable)": [[160, "microprobe.passes.variable.DeclareVariablesPass", false]], "decode_next() (microprobebininstructionstream method)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.decode_next", false]], "decorators (instruction property)": [[41, "microprobe.code.ins.Instruction.decorators", false]], "decorators (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.decorators", false]], "default (property property)": [[163, "microprobe.property.Property.default", false]], "default_code_address (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.default_code_address", false]], "default_code_address (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.default_code_address", false]], "default_code_address (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.default_code_address", false]], "default_data_address (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.default_data_address", false]], "default_data_address (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.default_data_address", false]], "default_data_address (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.default_data_address", false]], "default_io (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.default_io", false]], "default_io (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.default_io", false]], "default_operand (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.default_operand", false]], "default_operand (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.default_operand", false]], "default_show (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.default_show", false]], "default_show (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.default_show", false]], "default_wrapper (environment property)": [[170, "microprobe.target.env.Environment.default_wrapper", false]], "default_wrapper (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.default_wrapper", false]], "defaultregisterallocationpass (class in microprobe.passes.register)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass", false]], "defaults() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.defaults", false]], "definition (class in microprobe.target)": [[167, "microprobe.target.Definition", false]], "depth (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.depth", false]], "depth (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.depth", false]], "description (cache property)": [[214, "microprobe.target.uarch.cache.Cache.description", false]], "description (definition property)": [[167, "microprobe.target.Definition.description", false]], "description (endlessloopdatamemorymodel property)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel.description", false]], "description (endlessloopinstructionmemorymodel property)": [[88, "microprobe.model.memory.EndlessLoopInstructionMemoryModel.description", false]], "description (environment property)": [[170, "microprobe.target.env.Environment.description", false]], "description (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.description", false]], "description (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.description", false]], "description (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.description", false]], "description (genericinstructionformat property)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.description", false]], "description (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.description", false]], "description (genericisa property)": [[173, "microprobe.target.isa.GenericISA.description", false]], "description (genericmicroarchitecture property)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.description", false]], "description (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.description", false]], "description (genericmicroarchitectureelementtype property)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.description", false]], "description (genericmodel property)": [[85, "microprobe.model.GenericModel.description", false]], "description (genericregister property)": [[204, "microprobe.target.isa.register.GenericRegister.description", false]], "description (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.description", false]], "description (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.description", false]], "description (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.description", false]], "description (instructionformat property)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.description", false]], "description (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.description", false]], "description (isa property)": [[174, "microprobe.target.isa.ISA.description", false]], "description (microarchitecture property)": [[212, "microprobe.target.uarch.Microarchitecture.description", false]], "description (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.description", false]], "description (microarchitectureelementtype property)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.description", false]], "description (operand property)": [[196, "microprobe.target.isa.operand.Operand.description", false]], "description (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.description", false]], "description (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.description", false]], "description (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.description", false]], "description (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.description", false]], "description (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.description", false]], "description (property property)": [[163, "microprobe.property.Property.description", false]], "description (register property)": [[205, "microprobe.target.isa.register.Register.description", false]], "description (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.description", false]], "description (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.description", false]], "description (target property)": [[168, "microprobe.target.Target.description", false]], "descriptor (instructionmemoryoperandvalue property)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.descriptor", false]], "descriptor (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.descriptor", false]], "dict2ordereddict() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.dict2OrderedDict", false]], "dict_key() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.dict_key", false]], "didtsimplepass (class in microprobe.passes.instruction)": [[125, "microprobe.passes.instruction.DIDTSimplePass", false]], "direct_initialization_support (wrapper property)": [[50, "microprobe.code.wrapper.Wrapper.direct_initialization_support", false]], "disableasmbyopcodepass (class in microprobe.passes.instruction)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass", false]], "discrete_average() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.discrete_average", false]], "displacement (address property)": [[27, "microprobe.code.address.Address.displacement", false]], "displacement (bbl property)": [[31, "microprobe.code.bbl.Bbl.displacement", false]], "displacement (instructionaddress property)": [[28, "microprobe.code.address.InstructionAddress.displacement", false]], "distance() (bbl method)": [[31, "microprobe.code.bbl.Bbl.distance", false]], "dump() (context method)": [[39, "microprobe.code.context.Context.dump", false]], "dump_mpt_config() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.dump_mpt_config", false]], "dump_mpt_config() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.dump_mpt_config", false]], "dump_mpt_config() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.dump_mpt_config", false]], "duplicateconfigparser (class in microprobe.utils.config)": [[235, "microprobe.utils.config.DuplicateConfigParser", false]], "dynamicaddresstranslation (class in microprobe.target.isa.dat)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation", false]], "element (cache property)": [[214, "microprobe.target.uarch.cache.Cache.element", false]], "element (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.element", false]], "elements (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.elements", false]], "elements (genericmicroarchitecture property)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.elements", false]], "elements (microarchitecture property)": [[212, "microprobe.target.uarch.Microarchitecture.elements", false]], "elems (variablearray property)": [[47, "microprobe.code.var.VariableArray.elems", false]], "elf_abi() (environment method)": [[170, "microprobe.target.env.Environment.elf_abi", false]], "elf_abi() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.elf_abi", false]], "empty() (microprobebininstructionstream method)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.empty", false]], "end_loop() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.end_loop", false]], "end_main() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.end_main", false]], "end_section() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.end_section", false]], "endlessloopdatamemorymodel (class in microprobe.model.memory)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel", false]], "endlessloopinstructionmemorymodel (class in microprobe.model.memory)": [[88, "microprobe.model.memory.EndlessLoopInstructionMemoryModel", false]], "environment (class in microprobe.target.env)": [[170, "microprobe.target.env.Environment", false]], "environment (target property)": [[168, "microprobe.target.Target.environment", false]], "environment_reserved_registers (environment property)": [[170, "microprobe.target.env.Environment.environment_reserved_registers", false]], "environment_reserved_registers (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.environment_reserved_registers", false]], "error() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.error", false]], "existing_cmd() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.existing_cmd", false]], "existing_dir() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.existing_dir", false]], "existing_file() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.existing_file", false]], "existing_file_ext() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.existing_file_ext", false]], "exit() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.exit", false]], "fields (genericinstructionformat property)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.fields", false]], "fields (instructionformat property)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.fields", false]], "file_with() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.file_with", false]], "filename (definition property)": [[167, "microprobe.target.Definition.filename", false]], "finalize_model() (endlessloopdatamemorymodel method)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel.finalize_model", false]], "find_env_definitions() (in module microprobe.target.env)": [[169, "microprobe.target.env.find_env_definitions", false]], "find_isa_definitions() (in module microprobe.target.isa)": [[172, "microprobe.target.isa.find_isa_definitions", false]], "find_microarchitecture_definitions() (in module microprobe.target.uarch)": [[209, "microprobe.target.uarch.find_microarchitecture_definitions", false]], "find_subclasses() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.find_subclasses", false]], "findfiles() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.findfiles", false]], "fini (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.fini", false]], "fini (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.fini", false]], "fixindirectbranchpass (class in microprobe.passes.branch)": [[97, "microprobe.passes.branch.FixIndirectBranchPass", false]], "fixmemoryreferencespass (class in microprobe.passes.memory)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass", false]], "fixregisterspass (class in microprobe.passes.register)": [[150, "microprobe.passes.register.FixRegistersPass", false]], "flag_registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.flag_registers", false]], "flag_registers (isa property)": [[174, "microprobe.target.isa.ISA.flag_registers", false]], "flip_fields() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.flip_fields", false]], "flip_fields() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.flip_fields", false]], "float (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.float", false]], "float (operand property)": [[196, "microprobe.target.isa.operand.Operand.float", false]], "float (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.float", false]], "float (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.float", false]], "float (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.float", false]], "float (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.float", false]], "float (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.float", false]], "float_range() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.float_range", false]], "float_registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.float_registers", false]], "float_registers (isa property)": [[174, "microprobe.target.isa.ISA.float_registers", false]], "float_to_nnp_data_type_1() (in module microprobe.utils.ieee)": [[240, "microprobe.utils.ieee.float_to_nnp_data_type_1", false]], "float_type() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.float_type", false]], "footer() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.footer", false]], "force_absolute (context property)": [[39, "microprobe.code.context.Context.force_absolute", false]], "force_error() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.force_error", false]], "format (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.format", false]], "format (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.format", false]], "format_help() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.format_help", false]], "format_help() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.format_help", false]], "format_usage() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.format_usage", false]], "fromkeys() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.fromkeys", false]], "fromkeys() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.fromkeys", false]], "fromkeys() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.fromkeys", false]], "fromkeys() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.fromkeys", false]], "full_name (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.full_name", false]], "full_name (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.full_name", false]], "full_report() (environment method)": [[170, "microprobe.target.env.Environment.full_report", false]], "full_report() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.full_report", false]], "full_report() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.full_report", false]], "full_report() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.full_report", false]], "full_report() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.full_report", false]], "full_report() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.full_report", false]], "full_report() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.full_report", false]], "full_report() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.full_report", false]], "full_report() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.full_report", false]], "full_report() (isa method)": [[174, "microprobe.target.isa.ISA.full_report", false]], "full_report() (memoryoperand method)": [[194, "microprobe.target.isa.operand.MemoryOperand.full_report", false]], "full_report() (memoryoperanddescriptor method)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.full_report", false]], "full_report() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.full_report", false]], "full_report() (target method)": [[168, "microprobe.target.Target.full_report", false]], "function_call() (environment method)": [[170, "microprobe.target.env.Environment.function_call", false]], "function_call() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.function_call", false]], "function_return() (environment method)": [[170, "microprobe.target.env.Environment.function_return", false]], "function_return() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.function_return", false]], "generate() (comparator method)": [[176, "microprobe.target.isa.comparator.Comparator.generate", false]], "generate() (generator method)": [[182, "microprobe.target.isa.generator.Generator.generate", false]], "generate_plain_profile() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.generate_plain_profile", false]], "generate_weighted_profile() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.generate_weighted_profile", false]], "generator (class in microprobe.target.isa.generator)": [[182, "microprobe.target.isa.generator.Generator", false]], "genericcodestructurepass (class in microprobe.passes.structure)": [[154, "microprobe.passes.structure.GenericCodeStructurePass", false]], "genericcpumicroarchitecture (class in microprobe.target.uarch)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture", false]], "genericdynamicaddresstranslation (class in microprobe.target.isa.dat)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation", false]], "genericenvironment (class in microprobe.target.env)": [[171, "microprobe.target.env.GenericEnvironment", false]], "genericinstructionfield (class in microprobe.target.isa.instruction_field)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField", false]], "genericinstructionformat (class in microprobe.target.isa.instruction_format)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat", false]], "genericinstructiontype (class in microprobe.target.isa.instruction)": [[184, "microprobe.target.isa.instruction.GenericInstructionType", false]], "genericisa (class in microprobe.target.isa)": [[173, "microprobe.target.isa.GenericISA", false]], "genericmemorymodelpass (class in microprobe.passes.memory)": [[141, "microprobe.passes.memory.GenericMemoryModelPass", false]], "genericmemorystreamspass (class in microprobe.passes.memory)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass", false]], "genericmicroarchitecture (class in microprobe.target.uarch)": [[211, "microprobe.target.uarch.GenericMicroarchitecture", false]], "genericmicroarchitectureelement (class in microprobe.target.uarch.element)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement", false]], "genericmicroarchitectureelementtype (class in microprobe.target.uarch.element_type)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType", false]], "genericmodel (class in microprobe.model)": [[85, "microprobe.model.GenericModel", false]], "genericoldmemorymodelpass (class in microprobe.passes.memory)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass", false]], "genericregister (class in microprobe.target.isa.register)": [[204, "microprobe.target.isa.register.GenericRegister", false]], "genericregistertype (class in microprobe.target.isa.register_type)": [[207, "microprobe.target.isa.register_type.GenericRegisterType", false]], "get() (cli method)": [[230, "microprobe.utils.cmdline.CLI.get", false]], "get() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.get", false]], "get() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.get", false]], "get() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.get", false]], "get() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.get", false]], "get() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.get", false]], "get_address() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_address", false]], "get_all_subclasses() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.get_all_subclasses", false]], "get_asm() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_asm", false]], "get_attr_from_module() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.get_attr_from_module", false]], "get_bbl() (cfg method)": [[37, "microprobe.code.cfg.Cfg.get_bbl", false]], "get_closest_address_value() (context method)": [[39, "microprobe.code.context.Context.get_closest_address_value", false]], "get_closest_value() (context method)": [[39, "microprobe.code.context.Context.get_closest_value", false]], "get_comments() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_comments", false]], "get_context() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.get_context", false]], "get_context() (isa method)": [[174, "microprobe.target.isa.ISA.get_context", false]], "get_dat() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.get_dat", false]], "get_dat() (isa method)": [[174, "microprobe.target.isa.ISA.get_dat", false]], "get_data_hierarchy_from_element() (cachehierarchy method)": [[215, "microprobe.target.uarch.cache.CacheHierarchy.get_data_hierarchy_from_element", false]], "get_decorators() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_decorators", false]], "get_default() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.get_default", false]], "get_dict_from_module() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.get_dict_from_module", false]], "get_direct_init() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.get_direct_init", false]], "get_field() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.get_field", false]], "get_field() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.get_field", false]], "get_field_props() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.get_field_props", false]], "get_field_props() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.get_field_props", false]], "get_fields() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.get_fields", false]], "get_fields() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.get_fields", false]], "get_findex() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.get_findex", false]], "get_findex() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.get_findex", false]], "get_instruction_by_distance() (bbl method)": [[31, "microprobe.code.bbl.Bbl.get_instruction_by_distance", false]], "get_instruction_hierarchy_from_element() (cachehierarchy method)": [[215, "microprobe.target.uarch.cache.CacheHierarchy.get_instruction_hierarchy_from_element", false]], "get_instruction_index() (bbl method)": [[31, "microprobe.code.bbl.Bbl.get_instruction_index", false]], "get_instruction_type() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_instruction_type", false]], "get_label() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_label", false]], "get_logger() (in module microprobe.utils.logger)": [[243, "microprobe.utils.logger.get_logger", false]], "get_memory_value() (context method)": [[39, "microprobe.code.context.Context.get_memory_value", false]], "get_object_from_module() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.get_object_from_module", false]], "get_operands() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.get_operands", false]], "get_operands() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.get_operands", false]], "get_operands() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.get_operands", false]], "get_register_closest_value() (context method)": [[39, "microprobe.code.context.Context.get_register_closest_value", false]], "get_register_for_address_arithmetic() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.get_register_for_address_arithmetic", false]], "get_register_for_address_arithmetic() (isa method)": [[174, "microprobe.target.isa.ISA.get_register_for_address_arithmetic", false]], "get_register_for_float_arithmetic() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.get_register_for_float_arithmetic", false]], "get_register_for_float_arithmetic() (isa method)": [[174, "microprobe.target.isa.ISA.get_register_for_float_arithmetic", false]], "get_register_value() (context method)": [[39, "microprobe.code.context.Context.get_register_value", false]], "get_registername_value() (context method)": [[39, "microprobe.code.context.Context.get_registername_value", false]], "get_wrapper() (in module microprobe.code)": [[23, "microprobe.code.get_wrapper", false]], "getboolean() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.getboolean", false]], "getfloat() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.getfloat", false]], "getint() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.getint", false]], "getnextf() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.getnextf", false]], "has_option() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.has_option", false]], "has_section() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.has_section", false]], "headers() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.headers", false]], "hook_after_reset_instructions() (environment method)": [[170, "microprobe.target.env.Environment.hook_after_reset_instructions", false]], "hook_after_reset_instructions() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.hook_after_reset_instructions", false]], "hook_after_test_instructions() (environment method)": [[170, "microprobe.target.env.Environment.hook_after_test_instructions", false]], "hook_after_test_instructions() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.hook_after_test_instructions", false]], "hook_before_test_instructions() (environment method)": [[170, "microprobe.target.env.Environment.hook_before_test_instructions", false]], "hook_before_test_instructions() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.hook_before_test_instructions", false]], "hook_test_end_instructions() (environment method)": [[170, "microprobe.target.env.Environment.hook_test_end_instructions", false]], "hook_test_end_instructions() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.hook_test_end_instructions", false]], "hook_test_init_instructions() (environment method)": [[170, "microprobe.target.env.Environment.hook_test_init_instructions", false]], "hook_test_init_instructions() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.hook_test_init_instructions", false]], "ieee_float_to_int64() (in module microprobe.utils.ieee)": [[240, "microprobe.utils.ieee.ieee_float_to_int64", false]], "immediate (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.immediate", false]], "immediate (operand property)": [[196, "microprobe.target.isa.operand.Operand.immediate", false]], "immediate (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.immediate", false]], "immediate (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.immediate", false]], "immediate (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.immediate", false]], "immediate (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.immediate", false]], "immediate (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.immediate", false]], "implicit_operands (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.implicit_operands", false]], "implicit_operands (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.implicit_operands", false]], "import_classes_from() (in module microprobe.target.isa.comparator)": [[175, "microprobe.target.isa.comparator.import_classes_from", false]], "import_classes_from() (in module microprobe.target.isa.generator)": [[181, "microprobe.target.isa.generator.import_classes_from", false]], "import_cls_definition() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.import_cls_definition", false]], "import_definition() (in module microprobe.target)": [[166, "microprobe.target.import_definition", false]], "import_definition() (in module microprobe.target.isa.instruction)": [[183, "microprobe.target.isa.instruction.import_definition", false]], "import_definition() (in module microprobe.target.isa.instruction_field)": [[186, "microprobe.target.isa.instruction_field.import_definition", false]], "import_definition() (in module microprobe.target.isa.instruction_format)": [[189, "microprobe.target.isa.instruction_format.import_definition", false]], "import_definition() (in module microprobe.target.isa.operand)": [[192, "microprobe.target.isa.operand.import_definition", false]], "import_definition() (in module microprobe.target.isa.register)": [[203, "microprobe.target.isa.register.import_definition", false]], "import_definition() (in module microprobe.target.isa.register_type)": [[206, "microprobe.target.isa.register_type.import_definition", false]], "import_definition() (in module microprobe.target.uarch.element)": [[217, "microprobe.target.uarch.element.import_definition", false]], "import_definition() (in module microprobe.target.uarch.element_type)": [[220, "microprobe.target.uarch.element_type.import_definition", false]], "import_definition() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.import_definition", false]], "import_env_definition() (in module microprobe.target.env)": [[169, "microprobe.target.env.import_env_definition", false]], "import_isa_definition() (in module microprobe.target.isa)": [[172, "microprobe.target.isa.import_isa_definition", false]], "import_microarchitecture_definition() (in module microprobe.target.uarch)": [[209, "microprobe.target.uarch.import_microarchitecture_definition", false]], "import_operand_definition() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.import_operand_definition", false]], "import_properties() (in module microprobe.property)": [[162, "microprobe.property.import_properties", false]], "index() (cfg method)": [[37, "microprobe.code.cfg.Cfg.index", false]], "infinite() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.infinite", false]], "info (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.info", false]], "info (buildingblock property)": [[34, "microprobe.code.benchmark.BuildingBlock.info", false]], "info (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.info", false]], "info() (addassemblybyindexpass method)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass.info", false]], "info() (addfinalizationassemblypass method)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass.info", false]], "info() (addinitializationassemblypass method)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass.info", false]], "info() (addinitializationinstructionspass method)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass.info", false]], "info() (addonepass method)": [[124, "microprobe.passes.instruction.AddOnePass.info", false]], "info() (autoalignpass method)": [[117, "microprobe.passes.initialization.AutoAlignPass.info", false]], "info() (averagedependencydistancepass method)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass.info", false]], "info() (branchbraidnextpass method)": [[95, "microprobe.passes.branch.BranchBraidNextPass.info", false]], "info() (branchnextpass method)": [[96, "microprobe.passes.branch.BranchNextPass.info", false]], "info() (constantdependencydistancepass method)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass.info", false]], "info() (cycleminimalallocationpass method)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass.info", false]], "info() (declarevariablespass method)": [[160, "microprobe.passes.variable.DeclareVariablesPass.info", false]], "info() (defaultregisterallocationpass method)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass.info", false]], "info() (didtsimplepass method)": [[125, "microprobe.passes.instruction.DIDTSimplePass.info", false]], "info() (disableasmbyopcodepass method)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass.info", false]], "info() (fixindirectbranchpass method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.info", false]], "info() (fixmemoryreferencespass method)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass.info", false]], "info() (fixregisterspass method)": [[150, "microprobe.passes.register.FixRegistersPass.info", false]], "info() (genericcodestructurepass method)": [[154, "microprobe.passes.structure.GenericCodeStructurePass.info", false]], "info() (genericmemorymodelpass method)": [[141, "microprobe.passes.memory.GenericMemoryModelPass.info", false]], "info() (genericmemorystreamspass method)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass.info", false]], "info() (genericoldmemorymodelpass method)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass.info", false]], "info() (initializebranchdecorator method)": [[98, "microprobe.passes.branch.InitializeBranchDecorator.info", false]], "info() (initializedatpass method)": [[103, "microprobe.passes.dat.InitializeDATPass.info", false]], "info() (initializememorydecimalpass method)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass.info", false]], "info() (initializememorydecorator method)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator.info", false]], "info() (initializememoryfloatpass method)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass.info", false]], "info() (initializeregisterpass method)": [[118, "microprobe.passes.initialization.InitializeRegisterPass.info", false]], "info() (initializeregisterspass method)": [[119, "microprobe.passes.initialization.InitializeRegistersPass.info", false]], "info() (insertinstructionsequencepass method)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass.info", false]], "info() (linkbbls method)": [[99, "microprobe.passes.branch.LinkBbls.info", false]], "info() (nohazardsallocationpass method)": [[151, "microprobe.passes.register.NoHazardsAllocationPass.info", false]], "info() (normalizebranchtargetspass method)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass.info", false]], "info() (pass method)": [[90, "microprobe.passes.Pass.info", false]], "info() (randomallocationpass method)": [[152, "microprobe.passes.register.RandomAllocationPass.info", false]], "info() (randomdependencydistancepass method)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass.info", false]], "info() (randomizebytypepass method)": [[101, "microprobe.passes.branch.RandomizeByTypePass.info", false]], "info() (replaceinstructionbytypepass method)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass.info", false]], "info() (replaceloadinstructionspass method)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass.info", false]], "info() (reproducesequencepass method)": [[130, "microprobe.passes.instruction.ReproduceSequencePass.info", false]], "info() (reserveregisterspass method)": [[120, "microprobe.passes.initialization.ReserveRegistersPass.info", false]], "info() (resolvesymbolicreferencespass method)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass.info", false]], "info() (setinitaddresspass method)": [[92, "microprobe.passes.address.SetInitAddressPass.info", false]], "info() (setinstructionlabelbyindexpass method)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass.info", false]], "info() (setinstructionoperandsbyopcodepass method)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.info", false]], "info() (setinstructiontypebyalternatingsequencespass method)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.info", false]], "info() (setinstructiontypebyelementpass method)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass.info", false]], "info() (setinstructiontypebyprofilepass method)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass.info", false]], "info() (setinstructiontypebypropertypass method)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.info", false]], "info() (setinstructiontypebysequencepass method)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass.info", false]], "info() (setinstructiontypepass method)": [[137, "microprobe.passes.instruction.SetInstructionTypePass.info", false]], "info() (setmemoryoperandbyopcodepass method)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass.info", false]], "info() (setrandominstructiontypepass method)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass.info", false]], "info() (simplebuildingblockpass method)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass.info", false]], "info() (singlememorystreampass method)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass.info", false]], "info() (translateaddresspass method)": [[104, "microprobe.passes.dat.TranslateAddressPass.info", false]], "info() (unreserveregisterspass method)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass.info", false]], "info() (updateinstructionaddressespass method)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass.info", false]], "info() (updatevariableaddressespass method)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass.info", false]], "init (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.init", false]], "init (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.init", false]], "init_global_var() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.init_global_var", false]], "init_loop_pad() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.init_loop_pad", false]], "init_main_pad() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.init_main_pad", false]], "initialize_model() (endlessloopdatamemorymodel method)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel.initialize_model", false]], "initializebranchdecorator (class in microprobe.passes.branch)": [[98, "microprobe.passes.branch.InitializeBranchDecorator", false]], "initializedatpass (class in microprobe.passes.dat)": [[103, "microprobe.passes.dat.InitializeDATPass", false]], "initializememorydecimalpass (class in microprobe.passes.decimal)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass", false]], "initializememorydecorator (class in microprobe.passes.memory)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator", false]], "initializememoryfloatpass (class in microprobe.passes.float)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass", false]], "initializeregisterpass (class in microprobe.passes.initialization)": [[118, "microprobe.passes.initialization.InitializeRegisterPass", false]], "initializeregisterspass (class in microprobe.passes.initialization)": [[119, "microprobe.passes.initialization.InitializeRegistersPass", false]], "insert_instr() (bbl method)": [[31, "microprobe.code.bbl.Bbl.insert_instr", false]], "insertinstructionsequencepass (class in microprobe.passes.instruction)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass", false]], "instr_name (comparator property)": [[176, "microprobe.target.isa.comparator.Comparator.instr_name", false]], "instr_name (generator property)": [[182, "microprobe.target.isa.generator.Generator.instr_name", false]], "instrs (bbl property)": [[31, "microprobe.code.bbl.Bbl.instrs", false]], "instruction (class in microprobe.code.ins)": [[41, "microprobe.code.ins.Instruction", false]], "instruction_checks (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.instruction_checks", false]], "instruction_checks (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.instruction_checks", false]], "instruction_count (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.instruction_count", false]], "instruction_count (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.instruction_count", false]], "instruction_count (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.instruction_count", false]], "instruction_factory() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.instruction_factory", false]], "instruction_from_definition() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.instruction_from_definition", false]], "instruction_set_def_properties() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.instruction_set_def_properties", false]], "instruction_to_asm_definition() (in module microprobe.utils.asm)": [[224, "microprobe.utils.asm.instruction_to_asm_definition", false]], "instruction_to_definition() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.instruction_to_definition", false]], "instruction_type (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.instruction_type", false]], "instruction_type_from_bin() (in module microprobe.target.isa.instruction)": [[183, "microprobe.target.isa.instruction.instruction_type_from_bin", false]], "instructionaddress (class in microprobe.code.address)": [[28, "microprobe.code.address.InstructionAddress", false]], "instructionaddressrelativeoperand (class in microprobe.target.isa.operand)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand", false]], "instructionfield (class in microprobe.target.isa.instruction_field)": [[188, "microprobe.target.isa.instruction_field.InstructionField", false]], "instructionformat (class in microprobe.target.isa.instruction_format)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat", false]], "instructionmemoryoperandvalue (class in microprobe.code.ins)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue", false]], "instructionoperandvalue (class in microprobe.code.ins)": [[43, "microprobe.code.ins.InstructionOperandValue", false]], "instructions (genericisa property)": [[173, "microprobe.target.isa.GenericISA.instructions", false]], "instructions (isa property)": [[174, "microprobe.target.isa.ISA.instructions", false]], "instructions_from_asm() (in module microprobe.code.ins)": [[40, "microprobe.code.ins.instructions_from_asm", false]], "instructiontype (class in microprobe.target.isa.instruction)": [[185, "microprobe.target.isa.instruction.InstructionType", false]], "int_range() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.int_range", false]], "int_to_twocs() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.int_to_twocs", false]], "int_type() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.int_type", false]], "interpret_asm() (in module microprobe.utils.asm)": [[224, "microprobe.utils.asm.interpret_asm", false]], "interpret_bin() (in module microprobe.utils.bin)": [[226, "microprobe.utils.bin.interpret_bin", false]], "is_agen (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.is_agen", false]], "is_branch_target (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.is_branch_target", false]], "is_input (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.is_input", false]], "is_input (operanddescriptor property)": [[199, "microprobe.target.isa.operand.OperandDescriptor.is_input", false]], "is_load (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.is_load", false]], "is_output (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.is_output", false]], "is_output (operanddescriptor property)": [[199, "microprobe.target.isa.operand.OperandDescriptor.is_output", false]], "is_prefetch (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.is_prefetch", false]], "is_store (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.is_store", false]], "isa (class in microprobe.target.isa)": [[174, "microprobe.target.isa.ISA", false]], "isa (environment property)": [[170, "microprobe.target.env.Environment.isa", false]], "isa (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.isa", false]], "isa (target property)": [[168, "microprobe.target.Target.isa", false]], "items() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.items", false]], "items() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.items", false]], "items() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.items", false]], "items() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.items", false]], "items() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.items", false]], "iter_flatten() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.iter_flatten", false]], "keys() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.keys", false]], "keys() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.keys", false]], "keys() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.keys", false]], "keys() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.keys", false]], "keys() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.keys", false]], "label (instruction property)": [[41, "microprobe.code.ins.Instruction.label", false]], "label (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.label", false]], "labels (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.labels", false]], "labels (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.labels", false]], "last_bbl() (cfg method)": [[37, "microprobe.code.cfg.Cfg.last_bbl", false]], "lazyargumenterror": [[231, "microprobe.utils.cmdline.LazyArgumentError", false]], "lazyargumentparser (class in microprobe.utils.cmdline)": [[232, "microprobe.utils.cmdline.LazyArgumentParser", false]], "length (genericinstructionformat property)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.length", false]], "length (instructionmemoryoperandvalue property)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.length", false]], "length (memoryvalue property)": [[29, "microprobe.code.address.MemoryValue.length", false]], "length_operands (memoryoperand property)": [[194, "microprobe.target.isa.operand.MemoryOperand.length_operands", false]], "lengths (microprobebininstructionstream property)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.lengths", false]], "level (cache property)": [[214, "microprobe.target.uarch.cache.Cache.level", false]], "level (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.level", false]], "line_size (cache property)": [[214, "microprobe.target.uarch.cache.Cache.line_size", false]], "line_size (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.line_size", false]], "lines() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.lines", false]], "linkbbls (class in microprobe.passes.branch)": [[99, "microprobe.passes.branch.LinkBbls", false]], "list_properties() (environment method)": [[170, "microprobe.target.env.Environment.list_properties", false]], "list_properties() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.list_properties", false]], "list_properties() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.list_properties", false]], "list_properties() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.list_properties", false]], "list_properties() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.list_properties", false]], "list_properties() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.list_properties", false]], "list_properties() (genericmicroarchitectureelementtype method)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.list_properties", false]], "list_properties() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.list_properties", false]], "list_properties() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.list_properties", false]], "list_properties() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.list_properties", false]], "list_properties() (microarchitectureelementtype method)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.list_properties", false]], "list_properties() (propertyholder method)": [[164, "microprobe.property.PropertyHolder.list_properties", false]], "list_property_files() (in module microprobe.property)": [[162, "microprobe.property.list_property_files", false]], "little_endian (environment property)": [[170, "microprobe.target.env.Environment.little_endian", false]], "little_endian (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.little_endian", false]], "load() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.load", false]], "load() (isa method)": [[174, "microprobe.target.isa.ISA.load", false]], "load_float() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.load_float", false]], "load_float() (isa method)": [[174, "microprobe.target.isa.ISA.load_float", false]], "load_source() (in module microprobe.utils.imp)": [[241, "microprobe.utils.imp.load_source", false]], "locality() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.locality", false]], "longest_common_substr() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.longest_common_substr", false]], "main() (cli method)": [[230, "microprobe.utils.cmdline.CLI.main", false]], "maps (dynamicaddresstranslation property)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.maps", false]], "maps (genericdynamicaddresstranslation property)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.maps", false]], "mask (datmap property)": [[178, "microprobe.target.isa.dat.DATmap.mask", false]], "match() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.match", false]], "max (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.max", false]], "memory_operand_descriptors (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.memory_operand_descriptors", false]], "memory_operand_descriptors (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.memory_operand_descriptors", false]], "memory_operands() (instruction method)": [[41, "microprobe.code.ins.Instruction.memory_operands", false]], "memoryoperand (class in microprobe.target.isa.operand)": [[194, "microprobe.target.isa.operand.MemoryOperand", false]], "memoryoperanddescriptor (class in microprobe.target.isa.operand)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor", false]], "memoryvalue (class in microprobe.code.address)": [[29, "microprobe.code.address.MemoryValue", false]], "microarchitecture (class in microprobe.target.uarch)": [[212, "microprobe.target.uarch.Microarchitecture", false]], "microarchitecture (target property)": [[168, "microprobe.target.Target.microarchitecture", false]], "microarchitectureelement (class in microprobe.target.uarch.element)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement", false]], "microarchitectureelementtype (class in microprobe.target.uarch.element_type)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType", false]], "microprobe": [[22, "module-microprobe", false]], "microprobe.code": [[23, "module-microprobe.code", false]], "microprobe.code.address": [[26, "module-microprobe.code.address", false]], "microprobe.code.bbl": [[30, "module-microprobe.code.bbl", false]], "microprobe.code.benchmark": [[32, "module-microprobe.code.benchmark", false]], "microprobe.code.cfg": [[36, "module-microprobe.code.cfg", false]], "microprobe.code.context": [[38, "module-microprobe.code.context", false]], "microprobe.code.ins": [[40, "module-microprobe.code.ins", false]], "microprobe.code.var": [[45, "module-microprobe.code.var", false]], "microprobe.code.wrapper": [[49, "module-microprobe.code.wrapper", false]], "microprobe.driver": [[51, "module-microprobe.driver", false]], "microprobe.driver.guided": [[52, "module-microprobe.driver.guided", false]], "microprobe.exceptions": [[53, "module-microprobe.exceptions", false]], "microprobe.model": [[84, "module-microprobe.model", false]], "microprobe.model.memory": [[86, "module-microprobe.model.memory", false]], "microprobe.passes": [[89, "module-microprobe.passes", false]], "microprobe.passes.address": [[91, "module-microprobe.passes.address", false]], "microprobe.passes.branch": [[94, "module-microprobe.passes.branch", false]], "microprobe.passes.dat": [[102, "module-microprobe.passes.dat", false]], "microprobe.passes.decimal": [[105, "module-microprobe.passes.decimal", false]], "microprobe.passes.float": [[107, "module-microprobe.passes.float", false]], "microprobe.passes.ilp": [[109, "module-microprobe.passes.ilp", false]], "microprobe.passes.initialization": [[113, "module-microprobe.passes.initialization", false]], "microprobe.passes.instruction": [[122, "module-microprobe.passes.instruction", false]], "microprobe.passes.memory": [[139, "module-microprobe.passes.memory", false]], "microprobe.passes.register": [[147, "module-microprobe.passes.register", false]], "microprobe.passes.structure": [[153, "module-microprobe.passes.structure", false]], "microprobe.passes.symbol": [[156, "module-microprobe.passes.symbol", false]], "microprobe.passes.variable": [[159, "module-microprobe.passes.variable", false]], "microprobe.property": [[162, "module-microprobe.property", false]], "microprobe.schemas": [[165, "module-microprobe.schemas", false]], "microprobe.target": [[166, "module-microprobe.target", false]], "microprobe.target.env": [[169, "module-microprobe.target.env", false]], "microprobe.target.isa": [[172, "module-microprobe.target.isa", false]], "microprobe.target.isa.comparator": [[175, "module-microprobe.target.isa.comparator", false]], "microprobe.target.isa.dat": [[177, "module-microprobe.target.isa.dat", false]], "microprobe.target.isa.generator": [[181, "module-microprobe.target.isa.generator", false]], "microprobe.target.isa.instruction": [[183, "module-microprobe.target.isa.instruction", false]], "microprobe.target.isa.instruction_field": [[186, "module-microprobe.target.isa.instruction_field", false]], "microprobe.target.isa.instruction_format": [[189, "module-microprobe.target.isa.instruction_format", false]], "microprobe.target.isa.operand": [[192, "module-microprobe.target.isa.operand", false]], "microprobe.target.isa.register": [[203, "module-microprobe.target.isa.register", false]], "microprobe.target.isa.register_type": [[206, "module-microprobe.target.isa.register_type", false]], "microprobe.target.uarch": [[209, "module-microprobe.target.uarch", false]], "microprobe.target.uarch.cache": [[213, "module-microprobe.target.uarch.cache", false]], "microprobe.target.uarch.element": [[217, "module-microprobe.target.uarch.element", false]], "microprobe.target.uarch.element_type": [[220, "module-microprobe.target.uarch.element_type", false]], "microprobe.utils": [[223, "module-microprobe.utils", false]], "microprobe.utils.asm": [[224, "module-microprobe.utils.asm", false]], "microprobe.utils.bin": [[226, "module-microprobe.utils.bin", false]], "microprobe.utils.cache": [[228, "module-microprobe.utils.cache", false]], "microprobe.utils.cmdline": [[229, "module-microprobe.utils.cmdline", false]], "microprobe.utils.config": [[234, "module-microprobe.utils.config", false]], "microprobe.utils.distrib": [[238, "module-microprobe.utils.distrib", false]], "microprobe.utils.ieee": [[240, "module-microprobe.utils.ieee", false]], "microprobe.utils.imp": [[241, "module-microprobe.utils.imp", false]], "microprobe.utils.info": [[242, "module-microprobe.utils.info", false]], "microprobe.utils.logger": [[243, "module-microprobe.utils.logger", false]], "microprobe.utils.misc": [[244, "module-microprobe.utils.misc", false]], "microprobe.utils.mpt": [[249, "module-microprobe.utils.mpt", false]], "microprobe.utils.profile": [[259, "module-microprobe.utils.profile", false]], "microprobe.utils.yaml": [[260, "module-microprobe.utils.yaml", false]], "microprobeaddresstranslationerror": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError", false]], "microprobearchitecturedefinitionerror": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError", false]], "microprobearchitectureformaterror": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError", false]], "microprobeasmerror": [[57, "microprobe.exceptions.MicroprobeAsmError", false]], "microprobeasminstructiondefinition (class in microprobe.utils.asm)": [[225, "microprobe.utils.asm.MicroprobeAsmInstructionDefinition", false]], "microprobebinaryerror": [[58, "microprobe.exceptions.MicroprobeBinaryError", false]], "microprobebininstructionstream (class in microprobe.utils.bin)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream", false]], "microprobebranchconditionerror": [[59, "microprobe.exceptions.MicroprobeBranchConditionError", false]], "microprobecacheerror": [[60, "microprobe.exceptions.MicroprobeCacheError", false]], "microprobecalledprocesserror": [[61, "microprobe.exceptions.MicroprobeCalledProcessError", false]], "microprobecodegenerationerror": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError", false]], "microprobeconfiguration (class in microprobe.utils.config)": [[236, "microprobe.utils.config.MicroprobeConfiguration", false]], "microprobeconstantregistererror": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError", false]], "microprobedefaultconfiguration (class in microprobe.utils.config)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration", false]], "microprobedmaformaterror": [[64, "microprobe.exceptions.MicroprobeDMAFormatError", false]], "microprobeduplicatedvalueerror": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError", false]], "microprobeerror": [[66, "microprobe.exceptions.MicroprobeError", false]], "microprobeexception": [[67, "microprobe.exceptions.MicroprobeException", false]], "microprobeimportdefinitionerror": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError", false]], "microprobeimporterror": [[69, "microprobe.exceptions.MicroprobeImportError", false]], "microprobeinstructiondefinition (class in microprobe.code.ins)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition", false]], "microprobelookuperror": [[70, "microprobe.exceptions.MicroprobeLookupError", false]], "microprobemodelerror": [[72, "microprobe.exceptions.MicroprobeModelError", false]], "microprobemptformaterror": [[71, "microprobe.exceptions.MicroprobeMPTFormatError", false]], "microprobenocomparatorerror": [[73, "microprobe.exceptions.MicroprobeNoComparatorError", false]], "microprobenogenerationpatherror": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError", false]], "microprobeobjdumperror": [[75, "microprobe.exceptions.MicroprobeObjdumpError", false]], "microprobepolicyerror": [[76, "microprobe.exceptions.MicroprobePolicyError", false]], "microproberuncmderror": [[77, "microprobe.exceptions.MicroprobeRunCmdError", false]], "microprobetargetdefinitionerror": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError", false]], "microprobetestdefinition (class in microprobe.utils.mpt)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition", false]], "microprobetestdefinitiondefault (class in microprobe.utils.mpt)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault", false]], "microprobetestdefinitionv0x5 (class in microprobe.utils.mpt)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5", false]], "microprobetestmemoryaccessdefinition (class in microprobe.utils.mpt)": [[253, "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition", false]], "microprobetestparser (class in microprobe.utils.mpt)": [[254, "microprobe.utils.mpt.MicroprobeTestParser", false]], "microprobetestparserdefault (class in microprobe.utils.mpt)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault", false]], "microprobetestparserv0x5 (class in microprobe.utils.mpt)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5", false]], "microprobetestregisterdefinition (class in microprobe.utils.mpt)": [[257, "microprobe.utils.mpt.MicroprobeTestRegisterDefinition", false]], "microprobetestvariabledefinition (class in microprobe.utils.mpt)": [[258, "microprobe.utils.mpt.MicroprobeTestVariableDefinition", false]], "microprobetypeerror": [[79, "microprobe.exceptions.MicroprobeTypeError", false]], "microprobeuncheckableenvironmentwarning": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning", false]], "microprobevalueerror": [[81, "microprobe.exceptions.MicroprobeValueError", false]], "microprobewarning": [[82, "microprobe.exceptions.MicroprobeWarning", false]], "microprobeyamlformaterror": [[83, "microprobe.exceptions.MicroprobeYamlFormatError", false]], "min (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.min", false]], "min (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.min", false]], "min (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.min", false]], "mnemonic (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.mnemonic", false]], "mnemonic (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.mnemonic", false]], "module": [[22, "module-microprobe", false], [23, "module-microprobe.code", false], [26, "module-microprobe.code.address", false], [30, "module-microprobe.code.bbl", false], [32, "module-microprobe.code.benchmark", false], [36, "module-microprobe.code.cfg", false], [38, "module-microprobe.code.context", false], [40, "module-microprobe.code.ins", false], [45, "module-microprobe.code.var", false], [49, "module-microprobe.code.wrapper", false], [51, "module-microprobe.driver", false], [52, "module-microprobe.driver.guided", false], [53, "module-microprobe.exceptions", false], [84, "module-microprobe.model", false], [86, "module-microprobe.model.memory", false], [89, "module-microprobe.passes", false], [91, "module-microprobe.passes.address", false], [94, "module-microprobe.passes.branch", false], [102, "module-microprobe.passes.dat", false], [105, "module-microprobe.passes.decimal", false], [107, "module-microprobe.passes.float", false], [109, "module-microprobe.passes.ilp", false], [113, "module-microprobe.passes.initialization", false], [122, "module-microprobe.passes.instruction", false], [139, "module-microprobe.passes.memory", false], [147, "module-microprobe.passes.register", false], [153, "module-microprobe.passes.structure", false], [156, "module-microprobe.passes.symbol", false], [159, "module-microprobe.passes.variable", false], [162, "module-microprobe.property", false], [165, "module-microprobe.schemas", false], [166, "module-microprobe.target", false], [169, "module-microprobe.target.env", false], [172, "module-microprobe.target.isa", false], [175, "module-microprobe.target.isa.comparator", false], [177, "module-microprobe.target.isa.dat", false], [181, "module-microprobe.target.isa.generator", false], [183, "module-microprobe.target.isa.instruction", false], [186, "module-microprobe.target.isa.instruction_field", false], [189, "module-microprobe.target.isa.instruction_format", false], [192, "module-microprobe.target.isa.operand", false], [203, "module-microprobe.target.isa.register", false], [206, "module-microprobe.target.isa.register_type", false], [209, "module-microprobe.target.uarch", false], [213, "module-microprobe.target.uarch.cache", false], [217, "module-microprobe.target.uarch.element", false], [220, "module-microprobe.target.uarch.element_type", false], [223, "module-microprobe.utils", false], [224, "module-microprobe.utils.asm", false], [226, "module-microprobe.utils.bin", false], [228, "module-microprobe.utils.cache", false], [229, "module-microprobe.utils.cmdline", false], [234, "module-microprobe.utils.config", false], [238, "module-microprobe.utils.distrib", false], [240, "module-microprobe.utils.ieee", false], [241, "module-microprobe.utils.imp", false], [242, "module-microprobe.utils.info", false], [243, "module-microprobe.utils.logger", false], [244, "module-microprobe.utils.misc", false], [249, "module-microprobe.utils.mpt", false], [259, "module-microprobe.utils.profile", false], [260, "module-microprobe.utils.yaml", false]], "move_file() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.move_file", false]], "move_to_end() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.move_to_end", false]], "mpt_configuration_factory() (in module microprobe.utils.mpt)": [[249, "microprobe.utils.mpt.mpt_configuration_factory", false]], "mpt_parser_factory() (in module microprobe.utils.mpt)": [[249, "microprobe.utils.mpt.mpt_parser_factory", false]], "mpt_shift() (in module microprobe.utils.mpt)": [[249, "microprobe.utils.mpt.mpt_shift", false]], "multithreadedbenchmark (class in microprobe.code.benchmark)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark", false]], "name (cache property)": [[214, "microprobe.target.uarch.cache.Cache.name", false]], "name (definition property)": [[167, "microprobe.target.Definition.name", false]], "name (endlessloopdatamemorymodel property)": [[87, "microprobe.model.memory.EndlessLoopDataMemoryModel.name", false]], "name (endlessloopinstructionmemorymodel property)": [[88, "microprobe.model.memory.EndlessLoopInstructionMemoryModel.name", false]], "name (environment property)": [[170, "microprobe.target.env.Environment.name", false]], "name (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.name", false]], "name (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.name", false]], "name (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.name", false]], "name (genericinstructionformat property)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.name", false]], "name (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.name", false]], "name (genericisa property)": [[173, "microprobe.target.isa.GenericISA.name", false]], "name (genericmicroarchitecture property)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.name", false]], "name (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.name", false]], "name (genericmicroarchitectureelementtype property)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.name", false]], "name (genericmodel property)": [[85, "microprobe.model.GenericModel.name", false]], "name (genericregister property)": [[204, "microprobe.target.isa.register.GenericRegister.name", false]], "name (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.name", false]], "name (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.name", false]], "name (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.name", false]], "name (instructionformat property)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.name", false]], "name (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.name", false]], "name (isa property)": [[174, "microprobe.target.isa.ISA.name", false]], "name (microarchitecture property)": [[212, "microprobe.target.uarch.Microarchitecture.name", false]], "name (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.name", false]], "name (microarchitectureelementtype property)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.name", false]], "name (operand property)": [[196, "microprobe.target.isa.operand.Operand.name", false]], "name (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.name", false]], "name (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.name", false]], "name (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.name", false]], "name (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.name", false]], "name (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.name", false]], "name (property property)": [[163, "microprobe.property.Property.name", false]], "name (register property)": [[205, "microprobe.target.isa.register.Register.name", false]], "name (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.name", false]], "name (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.name", false]], "name (target property)": [[168, "microprobe.target.Target.name", false]], "name (variable property)": [[46, "microprobe.code.var.Variable.name", false]], "name (variablearray property)": [[47, "microprobe.code.var.VariableArray.name", false]], "name (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.name", false]], "natural_sort() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.natural_sort", false]], "negate_register() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.negate_register", false]], "negate_register() (isa method)": [[174, "microprobe.target.isa.ISA.negate_register", false]], "new_file() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.new_file", false]], "new_file_ext() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.new_file_ext", false]], "new_instruction() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.new_instruction", false]], "new_instruction() (isa method)": [[174, "microprobe.target.isa.ISA.new_instruction", false]], "nohazardsallocationpass (class in microprobe.passes.register)": [[151, "microprobe.passes.register.NoHazardsAllocationPass", false]], "nonspacecre (duplicateconfigparser attribute)": [[235, "microprobe.utils.config.DuplicateConfigParser.NONSPACECRE", false]], "nop() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.nop", false]], "nop() (isa method)": [[174, "microprobe.target.isa.ISA.nop", false]], "normalize_asm() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.normalize_asm", false]], "normalize_asm() (isa method)": [[174, "microprobe.target.isa.ISA.normalize_asm", false]], "normalizebranchtargetspass (class in microprobe.passes.branch)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass", false]], "offset() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.offset", false]], "offset_bits (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.offset_bits", false]], "opcode (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.opcode", false]], "opcode (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.opcode", false]], "open_generic_fd() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.open_generic_fd", false]], "operand (class in microprobe.target.isa.operand)": [[196, "microprobe.target.isa.operand.Operand", false]], "operand_by_field() (instruction method)": [[41, "microprobe.code.ins.Instruction.operand_by_field", false]], "operand_descriptors (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.operand_descriptors", false]], "operand_descriptors (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.operand_descriptors", false]], "operand_fields() (instruction method)": [[41, "microprobe.code.ins.Instruction.operand_fields", false]], "operandconst (class in microprobe.target.isa.operand)": [[197, "microprobe.target.isa.operand.OperandConst", false]], "operandconstreg (class in microprobe.target.isa.operand)": [[198, "microprobe.target.isa.operand.OperandConstReg", false]], "operanddescriptor (class in microprobe.target.isa.operand)": [[199, "microprobe.target.isa.operand.OperandDescriptor", false]], "operandimmrange (class in microprobe.target.isa.operand)": [[200, "microprobe.target.isa.operand.OperandImmRange", false]], "operandreg (class in microprobe.target.isa.operand)": [[201, "microprobe.target.isa.operand.OperandReg", false]], "operands (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.operands", false]], "operands (instructionmemoryoperandvalue property)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.operands", false]], "operands (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.operands", false]], "operands (microprobeinstructiondefinition property)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.operands", false]], "operands() (instruction method)": [[41, "microprobe.code.ins.Instruction.operands", false]], "operandvalueset (class in microprobe.target.isa.operand)": [[202, "microprobe.target.isa.operand.OperandValueSet", false]], "optcre (duplicateconfigparser attribute)": [[235, "microprobe.utils.config.DuplicateConfigParser.OPTCRE", false]], "optcre_nv (duplicateconfigparser attribute)": [[235, "microprobe.utils.config.DuplicateConfigParser.OPTCRE_NV", false]], "options() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.options", false]], "optionxform() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.optionxform", false]], "outputname() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.outputname", false]], "paragraphformatterml (class in microprobe.utils.cmdline)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML", false]], "parent (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.parent", false]], "parent (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.parent", false]], "parents (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.parents", false]], "parents (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.parents", false]], "parse_args() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.parse_args", false]], "parse_code() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_code", false]], "parse_code() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_code", false]], "parse_contents() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.parse_contents", false]], "parse_contents() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_contents", false]], "parse_contents() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_contents", false]], "parse_filename() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.parse_filename", false]], "parse_filename() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_filename", false]], "parse_filename() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_filename", false]], "parse_instruction() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.parse_instruction", false]], "parse_instruction() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_instruction", false]], "parse_instruction() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_instruction", false]], "parse_instruction_list() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.parse_instruction_list", false]], "parse_intermixed_args() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.parse_intermixed_args", false]], "parse_known_args() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.parse_known_args", false]], "parse_known_intermixed_args() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.parse_known_intermixed_args", false]], "parse_register() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.parse_register", false]], "parse_register() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_register", false]], "parse_register() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_register", false]], "parse_variable() (microprobetestparser method)": [[254, "microprobe.utils.mpt.MicroprobeTestParser.parse_variable", false]], "parse_variable() (microprobetestparserdefault method)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.parse_variable", false]], "parse_variable() (microprobetestparserv0x5 method)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.parse_variable", false]], "pass (class in microprobe.passes)": [[90, "microprobe.passes.Pass", false]], "pass_info (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.pass_info", false]], "pass_info (buildingblock property)": [[34, "microprobe.code.benchmark.BuildingBlock.pass_info", false]], "pass_info (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.pass_info", false]], "path (genericisa property)": [[173, "microprobe.target.isa.GenericISA.path", false]], "path (isa property)": [[174, "microprobe.target.isa.ISA.path", false]], "pickable (class in microprobe.utils.misc)": [[245, "microprobe.utils.misc.Pickable", false]], "pop() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.pop", false]], "pop() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.pop", false]], "pop() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.pop", false]], "pop() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.pop", false]], "pop() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.pop", false]], "popitem() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.popitem", false]], "popitem() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.popitem", false]], "popitem() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.popitem", false]], "popitem() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.popitem", false]], "popitem() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.popitem", false]], "possible_addresses() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.possible_addresses", false]], "possible_lengths() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.possible_lengths", false]], "post_var() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.post_var", false]], "primes() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.primes", false]], "print_error() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.print_error", false]], "print_help() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.print_help", false]], "print_info() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.print_info", false]], "print_info() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.print_info", false]], "print_usage() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.print_usage", false]], "print_warning() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.print_warning", false]], "probability() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.probability", false]], "progress (class in microprobe.utils.misc)": [[246, "microprobe.utils.misc.Progress", false]], "properties (environment property)": [[170, "microprobe.target.env.Environment.properties", false]], "properties (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.properties", false]], "properties (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.properties", false]], "properties (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.properties", false]], "properties (genericmicroarchitecture property)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.properties", false]], "properties (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.properties", false]], "properties (genericmicroarchitectureelementtype property)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.properties", false]], "properties (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.properties", false]], "properties (microarchitecture property)": [[212, "microprobe.target.uarch.Microarchitecture.properties", false]], "properties (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.properties", false]], "properties (microarchitectureelementtype property)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.properties", false]], "properties (propertyholder property)": [[164, "microprobe.property.PropertyHolder.properties", false]], "property (class in microprobe.property)": [[163, "microprobe.property.Property", false]], "property_isa_map() (target method)": [[168, "microprobe.target.Target.property_isa_map", false]], "propertyholder (class in microprobe.property)": [[164, "microprobe.property.PropertyHolder", false]], "pstdev() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.pstdev", false]], "random_value() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.random_value", false]], "random_value() (operand method)": [[196, "microprobe.target.isa.operand.Operand.random_value", false]], "random_value() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.random_value", false]], "random_value() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.random_value", false]], "random_value() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.random_value", false]], "random_value() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.random_value", false]], "random_value() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.random_value", false]], "randomallocationpass (class in microprobe.passes.register)": [[152, "microprobe.passes.register.RandomAllocationPass", false]], "randomdependencydistancepass (class in microprobe.passes.ilp)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass", false]], "randomize_register() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.randomize_register", false]], "randomize_register() (isa method)": [[174, "microprobe.target.isa.ISA.randomize_register", false]], "randomizebytypepass (class in microprobe.passes.branch)": [[101, "microprobe.passes.branch.RandomizeByTypePass", false]], "range_to_sequence() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.range_to_sequence", false]], "range_to_sequence_float() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.range_to_sequence_float", false]], "raw (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.raw", false]], "raw (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.raw", false]], "raw (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.raw", false]], "raw_decorate() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.raw_decorate", false]], "raw_decorate() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.raw_decorate", false]], "raw_parse() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.raw_parse", false]], "raw_parse() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.raw_parse", false]], "read() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.read", false]], "read_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.read_cache_data", false]], "read_default_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.read_default_cache_data", false]], "read_dict() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.read_dict", false]], "read_file() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.read_file", false]], "read_profile() (in module microprobe.utils.profile)": [[259, "microprobe.utils.profile.read_profile", false]], "read_string() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.read_string", false]], "read_yaml() (in module microprobe.utils.yaml)": [[260, "microprobe.utils.yaml.read_yaml", false]], "readfp() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.readfp", false]], "register (class in microprobe.target.isa.register)": [[205, "microprobe.target.isa.register.Register", false]], "register() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.register", false]], "register_context_callback() (instruction method)": [[41, "microprobe.code.ins.Instruction.register_context_callback", false]], "register_dat_mapping() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_dat_mapping", false]], "register_dat_mapping() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_dat_mapping", false]], "register_dat_mapping() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_dat_mapping", false]], "register_dat_property() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_dat_property", false]], "register_dat_property() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_dat_property", false]], "register_dat_property() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_dat_property", false]], "register_direct_init() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.register_direct_init", false]], "register_has_value() (context method)": [[39, "microprobe.code.context.Context.register_has_value", false]], "register_instruction_definitions() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_instruction_definitions", false]], "register_instruction_definitions() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_instruction_definitions", false]], "register_instruction_definitions() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_instruction_definitions", false]], "register_mem_operand_callback() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.register_mem_operand_callback", false]], "register_name() (environment method)": [[170, "microprobe.target.env.Environment.register_name", false]], "register_name() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.register_name", false]], "register_operand_callbacks() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.register_operand_callbacks", false]], "register_property() (environment method)": [[170, "microprobe.target.env.Environment.register_property", false]], "register_property() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.register_property", false]], "register_property() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.register_property", false]], "register_property() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.register_property", false]], "register_property() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.register_property", false]], "register_property() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.register_property", false]], "register_property() (genericmicroarchitectureelementtype method)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.register_property", false]], "register_property() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.register_property", false]], "register_property() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.register_property", false]], "register_property() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.register_property", false]], "register_property() (microarchitectureelementtype method)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.register_property", false]], "register_property() (propertyholder method)": [[164, "microprobe.property.PropertyHolder.register_property", false]], "register_raw_definition() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_raw_definition", false]], "register_raw_definition() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_raw_definition", false]], "register_raw_definition() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_raw_definition", false]], "register_register_definition() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_register_definition", false]], "register_register_definition() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_register_definition", false]], "register_register_definition() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_register_definition", false]], "register_value_comparator() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.register_value_comparator", false]], "register_value_comparator() (isa method)": [[174, "microprobe.target.isa.ISA.register_value_comparator", false]], "register_values (context property)": [[39, "microprobe.code.context.Context.register_values", false]], "register_var() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.register_var", false]], "register_var() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.register_var", false]], "register_variable_definition() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.register_variable_definition", false]], "register_variable_definition() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.register_variable_definition", false]], "register_variable_definition() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.register_variable_definition", false]], "registered_global_vars() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.registered_global_vars", false]], "registered_global_vars() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.registered_global_vars", false]], "registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.registers", false]], "registers (isa property)": [[174, "microprobe.target.isa.ISA.registers", false]], "registers (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.registers", false]], "registers (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.registers", false]], "registers (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.registers", false]], "registers_get_value() (context method)": [[39, "microprobe.code.context.Context.registers_get_value", false]], "registertype (class in microprobe.target.isa.register_type)": [[208, "microprobe.target.isa.register_type.RegisterType", false]], "regular_probability() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.regular_probability", false]], "regular_seq() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.regular_seq", false]], "rejectingdict (class in microprobe.utils.misc)": [[247, "microprobe.utils.misc.RejectingDict", false]], "rejectingordereddict (class in microprobe.utils.misc)": [[248, "microprobe.utils.misc.RejectingOrderedDict", false]], "remove_instructions_from() (bbl method)": [[31, "microprobe.code.bbl.Bbl.remove_instructions_from", false]], "remove_option() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.remove_option", false]], "remove_reserved_registers() (context method)": [[39, "microprobe.code.context.Context.remove_reserved_registers", false]], "remove_section() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.remove_section", false]], "replaceinstructionbytypepass (class in microprobe.passes.instruction)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass", false]], "replaceloadinstructionspass (class in microprobe.passes.instruction)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass", false]], "replicate() (bbl method)": [[31, "microprobe.code.bbl.Bbl.replicate", false]], "replicate_bbls() (in module microprobe.code.bbl)": [[30, "microprobe.code.bbl.replicate_bbls", false]], "report() (addassemblybyindexpass method)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass.report", false]], "report() (addfinalizationassemblypass method)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass.report", false]], "report() (addinitializationassemblypass method)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass.report", false]], "report() (addinitializationinstructionspass method)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass.report", false]], "report() (addonepass method)": [[124, "microprobe.passes.instruction.AddOnePass.report", false]], "report() (autoalignpass method)": [[117, "microprobe.passes.initialization.AutoAlignPass.report", false]], "report() (averagedependencydistancepass method)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass.report", false]], "report() (branchbraidnextpass method)": [[95, "microprobe.passes.branch.BranchBraidNextPass.report", false]], "report() (branchnextpass method)": [[96, "microprobe.passes.branch.BranchNextPass.report", false]], "report() (constantdependencydistancepass method)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass.report", false]], "report() (cycleminimalallocationpass method)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass.report", false]], "report() (declarevariablespass method)": [[160, "microprobe.passes.variable.DeclareVariablesPass.report", false]], "report() (defaultregisterallocationpass method)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass.report", false]], "report() (didtsimplepass method)": [[125, "microprobe.passes.instruction.DIDTSimplePass.report", false]], "report() (disableasmbyopcodepass method)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass.report", false]], "report() (fixindirectbranchpass method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.report", false]], "report() (fixmemoryreferencespass method)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass.report", false]], "report() (fixregisterspass method)": [[150, "microprobe.passes.register.FixRegistersPass.report", false]], "report() (genericcodestructurepass method)": [[154, "microprobe.passes.structure.GenericCodeStructurePass.report", false]], "report() (genericmemorymodelpass method)": [[141, "microprobe.passes.memory.GenericMemoryModelPass.report", false]], "report() (genericmemorystreamspass method)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass.report", false]], "report() (genericoldmemorymodelpass method)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass.report", false]], "report() (initializebranchdecorator method)": [[98, "microprobe.passes.branch.InitializeBranchDecorator.report", false]], "report() (initializedatpass method)": [[103, "microprobe.passes.dat.InitializeDATPass.report", false]], "report() (initializememorydecimalpass method)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass.report", false]], "report() (initializememorydecorator method)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator.report", false]], "report() (initializememoryfloatpass method)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass.report", false]], "report() (initializeregisterpass method)": [[118, "microprobe.passes.initialization.InitializeRegisterPass.report", false]], "report() (initializeregisterspass method)": [[119, "microprobe.passes.initialization.InitializeRegistersPass.report", false]], "report() (insertinstructionsequencepass method)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass.report", false]], "report() (linkbbls method)": [[99, "microprobe.passes.branch.LinkBbls.report", false]], "report() (nohazardsallocationpass method)": [[151, "microprobe.passes.register.NoHazardsAllocationPass.report", false]], "report() (normalizebranchtargetspass method)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass.report", false]], "report() (pass method)": [[90, "microprobe.passes.Pass.report", false]], "report() (randomallocationpass method)": [[152, "microprobe.passes.register.RandomAllocationPass.report", false]], "report() (randomdependencydistancepass method)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass.report", false]], "report() (randomizebytypepass method)": [[101, "microprobe.passes.branch.RandomizeByTypePass.report", false]], "report() (replaceinstructionbytypepass method)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass.report", false]], "report() (replaceloadinstructionspass method)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass.report", false]], "report() (reproducesequencepass method)": [[130, "microprobe.passes.instruction.ReproduceSequencePass.report", false]], "report() (reserveregisterspass method)": [[120, "microprobe.passes.initialization.ReserveRegistersPass.report", false]], "report() (resolvesymbolicreferencespass method)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass.report", false]], "report() (setinitaddresspass method)": [[92, "microprobe.passes.address.SetInitAddressPass.report", false]], "report() (setinstructionlabelbyindexpass method)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass.report", false]], "report() (setinstructionoperandsbyopcodepass method)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.report", false]], "report() (setinstructiontypebyalternatingsequencespass method)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.report", false]], "report() (setinstructiontypebyelementpass method)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass.report", false]], "report() (setinstructiontypebyprofilepass method)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass.report", false]], "report() (setinstructiontypebypropertypass method)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.report", false]], "report() (setinstructiontypebysequencepass method)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass.report", false]], "report() (setinstructiontypepass method)": [[137, "microprobe.passes.instruction.SetInstructionTypePass.report", false]], "report() (setmemoryoperandbyopcodepass method)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass.report", false]], "report() (setrandominstructiontypepass method)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass.report", false]], "report() (simplebuildingblockpass method)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass.report", false]], "report() (singlememorystreampass method)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass.report", false]], "report() (translateaddresspass method)": [[104, "microprobe.passes.dat.TranslateAddressPass.report", false]], "report() (unreserveregisterspass method)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass.report", false]], "report() (updateinstructionaddressespass method)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass.report", false]], "report() (updatevariableaddressespass method)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass.report", false]], "representation (genericregister property)": [[204, "microprobe.target.isa.register.GenericRegister.representation", false]], "representation (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.representation", false]], "representation() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.representation", false]], "representation() (operand method)": [[196, "microprobe.target.isa.operand.Operand.representation", false]], "representation() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.representation", false]], "representation() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.representation", false]], "representation() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.representation", false]], "representation() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.representation", false]], "representation() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.representation", false]], "representation() (register method)": [[205, "microprobe.target.isa.register.Register.representation", false]], "reproducesequencepass (class in microprobe.passes.instruction)": [[130, "microprobe.passes.instruction.ReproduceSequencePass", false]], "required_global_vars() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.required_global_vars", false]], "required_memory_values() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.required_memory_values", false]], "required_memory_values() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.required_memory_values", false]], "required_register_values() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.required_register_values", false]], "required_register_values() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.required_register_values", false]], "requirements (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.requirements", false]], "requirements (buildingblock property)": [[34, "microprobe.code.benchmark.BuildingBlock.requirements", false]], "requirements (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.requirements", false]], "requires() (addassemblybyindexpass method)": [[123, "microprobe.passes.instruction.AddAssemblyByIndexPass.requires", false]], "requires() (addfinalizationassemblypass method)": [[114, "microprobe.passes.initialization.AddFinalizationAssemblyPass.requires", false]], "requires() (addinitializationassemblypass method)": [[115, "microprobe.passes.initialization.AddInitializationAssemblyPass.requires", false]], "requires() (addinitializationinstructionspass method)": [[116, "microprobe.passes.initialization.AddInitializationInstructionsPass.requires", false]], "requires() (addonepass method)": [[124, "microprobe.passes.instruction.AddOnePass.requires", false]], "requires() (autoalignpass method)": [[117, "microprobe.passes.initialization.AutoAlignPass.requires", false]], "requires() (averagedependencydistancepass method)": [[110, "microprobe.passes.ilp.AverageDependencyDistancePass.requires", false]], "requires() (branchbraidnextpass method)": [[95, "microprobe.passes.branch.BranchBraidNextPass.requires", false]], "requires() (branchnextpass method)": [[96, "microprobe.passes.branch.BranchNextPass.requires", false]], "requires() (constantdependencydistancepass method)": [[111, "microprobe.passes.ilp.ConstantDependencyDistancePass.requires", false]], "requires() (cycleminimalallocationpass method)": [[148, "microprobe.passes.register.CycleMinimalAllocationPass.requires", false]], "requires() (declarevariablespass method)": [[160, "microprobe.passes.variable.DeclareVariablesPass.requires", false]], "requires() (defaultregisterallocationpass method)": [[149, "microprobe.passes.register.DefaultRegisterAllocationPass.requires", false]], "requires() (didtsimplepass method)": [[125, "microprobe.passes.instruction.DIDTSimplePass.requires", false]], "requires() (disableasmbyopcodepass method)": [[126, "microprobe.passes.instruction.DisableAsmByOpcodePass.requires", false]], "requires() (fixindirectbranchpass method)": [[97, "microprobe.passes.branch.FixIndirectBranchPass.requires", false]], "requires() (fixmemoryreferencespass method)": [[140, "microprobe.passes.memory.FixMemoryReferencesPass.requires", false]], "requires() (fixregisterspass method)": [[150, "microprobe.passes.register.FixRegistersPass.requires", false]], "requires() (genericcodestructurepass method)": [[154, "microprobe.passes.structure.GenericCodeStructurePass.requires", false]], "requires() (genericmemorymodelpass method)": [[141, "microprobe.passes.memory.GenericMemoryModelPass.requires", false]], "requires() (genericmemorystreamspass method)": [[142, "microprobe.passes.memory.GenericMemoryStreamsPass.requires", false]], "requires() (genericoldmemorymodelpass method)": [[143, "microprobe.passes.memory.GenericOldMemoryModelPass.requires", false]], "requires() (initializebranchdecorator method)": [[98, "microprobe.passes.branch.InitializeBranchDecorator.requires", false]], "requires() (initializedatpass method)": [[103, "microprobe.passes.dat.InitializeDATPass.requires", false]], "requires() (initializememorydecimalpass method)": [[106, "microprobe.passes.decimal.InitializeMemoryDecimalPass.requires", false]], "requires() (initializememorydecorator method)": [[144, "microprobe.passes.memory.InitializeMemoryDecorator.requires", false]], "requires() (initializememoryfloatpass method)": [[108, "microprobe.passes.float.InitializeMemoryFloatPass.requires", false]], "requires() (initializeregisterpass method)": [[118, "microprobe.passes.initialization.InitializeRegisterPass.requires", false]], "requires() (initializeregisterspass method)": [[119, "microprobe.passes.initialization.InitializeRegistersPass.requires", false]], "requires() (insertinstructionsequencepass method)": [[127, "microprobe.passes.instruction.InsertInstructionSequencePass.requires", false]], "requires() (linkbbls method)": [[99, "microprobe.passes.branch.LinkBbls.requires", false]], "requires() (nohazardsallocationpass method)": [[151, "microprobe.passes.register.NoHazardsAllocationPass.requires", false]], "requires() (normalizebranchtargetspass method)": [[100, "microprobe.passes.branch.NormalizeBranchTargetsPass.requires", false]], "requires() (pass method)": [[90, "microprobe.passes.Pass.requires", false]], "requires() (randomallocationpass method)": [[152, "microprobe.passes.register.RandomAllocationPass.requires", false]], "requires() (randomdependencydistancepass method)": [[112, "microprobe.passes.ilp.RandomDependencyDistancePass.requires", false]], "requires() (randomizebytypepass method)": [[101, "microprobe.passes.branch.RandomizeByTypePass.requires", false]], "requires() (replaceinstructionbytypepass method)": [[128, "microprobe.passes.instruction.ReplaceInstructionByTypePass.requires", false]], "requires() (replaceloadinstructionspass method)": [[129, "microprobe.passes.instruction.ReplaceLoadInstructionsPass.requires", false]], "requires() (reproducesequencepass method)": [[130, "microprobe.passes.instruction.ReproduceSequencePass.requires", false]], "requires() (reserveregisterspass method)": [[120, "microprobe.passes.initialization.ReserveRegistersPass.requires", false]], "requires() (resolvesymbolicreferencespass method)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass.requires", false]], "requires() (setinitaddresspass method)": [[92, "microprobe.passes.address.SetInitAddressPass.requires", false]], "requires() (setinstructionlabelbyindexpass method)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass.requires", false]], "requires() (setinstructionoperandsbyopcodepass method)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass.requires", false]], "requires() (setinstructiontypebyalternatingsequencespass method)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass.requires", false]], "requires() (setinstructiontypebyelementpass method)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass.requires", false]], "requires() (setinstructiontypebyprofilepass method)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass.requires", false]], "requires() (setinstructiontypebypropertypass method)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass.requires", false]], "requires() (setinstructiontypebysequencepass method)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass.requires", false]], "requires() (setinstructiontypepass method)": [[137, "microprobe.passes.instruction.SetInstructionTypePass.requires", false]], "requires() (setmemoryoperandbyopcodepass method)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass.requires", false]], "requires() (setrandominstructiontypepass method)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass.requires", false]], "requires() (simplebuildingblockpass method)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass.requires", false]], "requires() (singlememorystreampass method)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass.requires", false]], "requires() (translateaddresspass method)": [[104, "microprobe.passes.dat.TranslateAddressPass.requires", false]], "requires() (unreserveregisterspass method)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass.requires", false]], "requires() (updateinstructionaddressespass method)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass.requires", false]], "requires() (updatevariableaddressespass method)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass.requires", false]], "reserved_registers (context property)": [[39, "microprobe.code.context.Context.reserved_registers", false]], "reserved_registers (target property)": [[168, "microprobe.target.Target.reserved_registers", false]], "reserved_registers() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.reserved_registers", false]], "reserveregisterspass (class in microprobe.passes.initialization)": [[120, "microprobe.passes.initialization.ReserveRegistersPass", false]], "reset (wrapper property)": [[50, "microprobe.code.wrapper.Wrapper.reset", false]], "reset_instruction() (bbl method)": [[31, "microprobe.code.bbl.Bbl.reset_instruction", false]], "resolvesymbolicreferencespass (class in microprobe.passes.symbol)": [[157, "microprobe.passes.symbol.ResolveSymbolicReferencesPass", false]], "rm_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.rm_cache_data", false]], "rm_decorator() (instruction method)": [[41, "microprobe.code.ins.Instruction.rm_decorator", false]], "rm_default_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.rm_default_cache_data", false]], "rm_init() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.rm_init", false]], "rm_init() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.rm_init", false]], "rndfp() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.RNDFP", false]], "rndint() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.RNDINT", false]], "roi_cyc (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.roi_cyc", false]], "roi_cyc (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.roi_cyc", false]], "roi_cyc (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.roi_cyc", false]], "roi_ins (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.roi_ins", false]], "roi_ins (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.roi_ins", false]], "roi_ins (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.roi_ins", false]], "roi_memory_access_trace (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.roi_memory_access_trace", false]], "roi_memory_access_trace (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.roi_memory_access_trace", false]], "roi_memory_access_trace (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.roi_memory_access_trace", false]], "save() (cli method)": [[230, "microprobe.utils.cmdline.CLI.save", false]], "save() (synthesizer method)": [[24, "microprobe.code.Synthesizer.save", false]], "save() (tracesynthesizer method)": [[25, "microprobe.code.TraceSynthesizer.save", false]], "scratch_registers (genericisa property)": [[173, "microprobe.target.isa.GenericISA.scratch_registers", false]], "scratch_registers (isa property)": [[174, "microprobe.target.isa.ISA.scratch_registers", false]], "scratch_var (genericisa property)": [[173, "microprobe.target.isa.GenericISA.scratch_var", false]], "scratch_var (isa property)": [[174, "microprobe.target.isa.ISA.scratch_var", false]], "sectcre (duplicateconfigparser attribute)": [[235, "microprobe.utils.config.DuplicateConfigParser.SECTCRE", false]], "sections() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.sections", false]], "set() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.set", false]], "set_absolute() (context method)": [[39, "microprobe.code.context.Context.set_absolute", false]], "set_address() (bbl method)": [[31, "microprobe.code.bbl.Bbl.set_address", false]], "set_address() (instruction method)": [[41, "microprobe.code.ins.Instruction.set_address", false]], "set_address() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_address", false]], "set_address() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_address", false]], "set_address() (variable method)": [[46, "microprobe.code.var.Variable.set_address", false]], "set_address() (variablearray method)": [[47, "microprobe.code.var.VariableArray.set_address", false]], "set_address() (variablesingle method)": [[48, "microprobe.code.var.VariableSingle.set_address", false]], "set_alignment() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_alignment", false]], "set_arch_type() (instruction method)": [[41, "microprobe.code.ins.Instruction.set_arch_type", false]], "set_asm() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_asm", false]], "set_benchmark() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.set_benchmark", false]], "set_cfg() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.set_cfg", false]], "set_cfg() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.set_cfg", false]], "set_code_segment() (context method)": [[39, "microprobe.code.context.Context.set_code_segment", false]], "set_comments() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_comments", false]], "set_context() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.set_context", false]], "set_context() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.set_context", false]], "set_context() (isa method)": [[174, "microprobe.target.isa.ISA.set_context", false]], "set_context() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.set_context", false]], "set_current_thread() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.set_current_thread", false]], "set_current_thread() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.set_current_thread", false]], "set_current_thread() (synthesizer method)": [[24, "microprobe.code.Synthesizer.set_current_thread", false]], "set_current_thread() (tracesynthesizer method)": [[25, "microprobe.code.TraceSynthesizer.set_current_thread", false]], "set_cycle_count() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_cycle_count", false]], "set_cycle_count() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_cycle_count", false]], "set_cycle_count() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_cycle_count", false]], "set_dat() (context method)": [[39, "microprobe.code.context.Context.set_dat", false]], "set_data_segment() (context method)": [[39, "microprobe.code.context.Context.set_data_segment", false]], "set_decorators() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_decorators", false]], "set_default_code_address() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_default_code_address", false]], "set_default_code_address() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_default_code_address", false]], "set_default_code_address() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_default_code_address", false]], "set_default_data_address() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_default_data_address", false]], "set_default_data_address() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_default_data_address", false]], "set_default_data_address() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_default_data_address", false]], "set_defaults() (lazyargumentparser method)": [[232, "microprobe.utils.cmdline.LazyArgumentParser.set_defaults", false]], "set_descriptor() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.set_descriptor", false]], "set_displacement() (bbl method)": [[31, "microprobe.code.bbl.Bbl.set_displacement", false]], "set_env() (target method)": [[168, "microprobe.target.Target.set_env", false]], "set_fields() (genericinstructionformat method)": [[190, "microprobe.target.isa.instruction_format.GenericInstructionFormat.set_fields", false]], "set_fields() (instructionformat method)": [[191, "microprobe.target.isa.instruction_format.InstructionFormat.set_fields", false]], "set_forbidden_address_range() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_forbidden_address_range", false]], "set_instruction_count() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_instruction_count", false]], "set_instruction_count() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_instruction_count", false]], "set_instruction_count() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_instruction_count", false]], "set_instruction_definitions() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_instruction_definitions", false]], "set_instruction_definitions() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_instruction_definitions", false]], "set_instruction_type() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_instruction_type", false]], "set_isa() (target method)": [[168, "microprobe.target.Target.set_isa", false]], "set_label() (instruction method)": [[41, "microprobe.code.ins.Instruction.set_label", false]], "set_label() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_label", false]], "set_length() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_length", false]], "set_log_level() (in module microprobe.utils.logger)": [[243, "microprobe.utils.logger.set_log_level", false]], "set_memory_value() (context method)": [[39, "microprobe.code.context.Context.set_memory_value", false]], "set_operands() (instruction method)": [[41, "microprobe.code.ins.Instruction.set_operands", false]], "set_operands() (microprobeinstructiondefinition method)": [[44, "microprobe.code.ins.MicroprobeInstructionDefinition.set_operands", false]], "set_parent_element() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.set_parent_element", false]], "set_parent_element() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.set_parent_element", false]], "set_possible_addresses() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_possible_addresses", false]], "set_possible_lengths() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.set_possible_lengths", false]], "set_register() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.set_register", false]], "set_register() (isa method)": [[174, "microprobe.target.isa.ISA.set_register", false]], "set_register_bits() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.set_register_bits", false]], "set_register_bits() (isa method)": [[174, "microprobe.target.isa.ISA.set_register_bits", false]], "set_register_to_address() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.set_register_to_address", false]], "set_register_to_address() (isa method)": [[174, "microprobe.target.isa.ISA.set_register_to_address", false]], "set_register_value() (context method)": [[39, "microprobe.code.context.Context.set_register_value", false]], "set_roi_cyc() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_roi_cyc", false]], "set_roi_cyc() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_roi_cyc", false]], "set_roi_cyc() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_roi_cyc", false]], "set_roi_ins() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_roi_ins", false]], "set_roi_ins() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_roi_ins", false]], "set_roi_ins() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_roi_ins", false]], "set_roi_memory_access_trace() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_roi_memory_access_trace", false]], "set_roi_memory_access_trace() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_roi_memory_access_trace", false]], "set_roi_memory_access_trace() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_roi_memory_access_trace", false]], "set_state() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.set_state", false]], "set_state() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_state", false]], "set_state() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_state", false]], "set_subelements() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.set_subelements", false]], "set_subelements() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.set_subelements", false]], "set_symbolic() (context method)": [[39, "microprobe.code.context.Context.set_symbolic", false]], "set_target() (environment method)": [[170, "microprobe.target.env.Environment.set_target", false]], "set_target() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.set_target", false]], "set_target() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.set_target", false]], "set_target() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.set_target", false]], "set_target() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.set_target", false]], "set_target() (isa method)": [[174, "microprobe.target.isa.ISA.set_target", false]], "set_target() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.set_target", false]], "set_target() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.set_target", false]], "set_target_instruction() (instructionaddress method)": [[28, "microprobe.code.address.InstructionAddress.set_target_instruction", false]], "set_threads() (environment method)": [[170, "microprobe.target.env.Environment.set_threads", false]], "set_threads() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.set_threads", false]], "set_type() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.set_type", false]], "set_type() (operanddescriptor method)": [[199, "microprobe.target.isa.operand.OperandDescriptor.set_type", false]], "set_uarch() (target method)": [[168, "microprobe.target.Target.set_uarch", false]], "set_valid_values() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.set_valid_values", false]], "set_valid_values() (operand method)": [[196, "microprobe.target.isa.operand.Operand.set_valid_values", false]], "set_valid_values() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.set_valid_values", false]], "set_valid_values() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.set_valid_values", false]], "set_valid_values() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.set_valid_values", false]], "set_valid_values() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.set_valid_values", false]], "set_valid_values() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.set_valid_values", false]], "set_value() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.set_value", false]], "set_value() (property method)": [[163, "microprobe.property.Property.set_value", false]], "set_var_displacement() (benchmark method)": [[33, "microprobe.code.benchmark.Benchmark.set_var_displacement", false]], "set_var_displacement() (multithreadedbenchmark method)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.set_var_displacement", false]], "set_variables_definition() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.set_variables_definition", false]], "set_variables_definition() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.set_variables_definition", false]], "set_ways_bits (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.set_ways_bits", false]], "set_wrapper() (target method)": [[168, "microprobe.target.Target.set_wrapper", false]], "setassociativecache (class in microprobe.target.uarch.cache)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache", false]], "setdefault() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.setdefault", false]], "setdefault() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.setdefault", false]], "setdefault() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.setdefault", false]], "setdefault() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.setdefault", false]], "setdefault() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.setdefault", false]], "setinitaddresspass (class in microprobe.passes.address)": [[92, "microprobe.passes.address.SetInitAddressPass", false]], "setinstructionlabelbyindexpass (class in microprobe.passes.symbol)": [[158, "microprobe.passes.symbol.SetInstructionLabelByIndexPass", false]], "setinstructionoperandsbyopcodepass (class in microprobe.passes.instruction)": [[131, "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass", false]], "setinstructiontypebyalternatingsequencespass (class in microprobe.passes.instruction)": [[132, "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass", false]], "setinstructiontypebyelementpass (class in microprobe.passes.instruction)": [[133, "microprobe.passes.instruction.SetInstructionTypeByElementPass", false]], "setinstructiontypebyprofilepass (class in microprobe.passes.instruction)": [[134, "microprobe.passes.instruction.SetInstructionTypeByProfilePass", false]], "setinstructiontypebypropertypass (class in microprobe.passes.instruction)": [[135, "microprobe.passes.instruction.SetInstructionTypeByPropertyPass", false]], "setinstructiontypebysequencepass (class in microprobe.passes.instruction)": [[136, "microprobe.passes.instruction.SetInstructionTypeBySequencePass", false]], "setinstructiontypepass (class in microprobe.passes.instruction)": [[137, "microprobe.passes.instruction.SetInstructionTypePass", false]], "setmemoryoperandbyopcodepass (class in microprobe.passes.memory)": [[145, "microprobe.passes.memory.SetMemoryOperandByOpcodePass", false]], "setrandominstructiontypepass (class in microprobe.passes.instruction)": [[138, "microprobe.passes.instruction.SetRandomInstructionTypePass", false]], "sets() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.sets", false]], "sets() (instruction method)": [[41, "microprobe.code.ins.Instruction.sets", false]], "sets() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.sets", false]], "sets() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.sets", false]], "sets() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.sets", false]], "sets() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.sets", false]], "setsways() (setassociativecache method)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.setsways", false]], "shift (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.shift", false]], "shift (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.shift", false]], "shift (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.shift", false]], "shift (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.shift", false]], "shift_with_sign() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.shift_with_sign", false]], "shuffle() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.shuffle", false]], "simplebuildingblockpass (class in microprobe.passes.structure)": [[155, "microprobe.passes.structure.SimpleBuildingBlockPass", false]], "singlememorystreampass (class in microprobe.passes.memory)": [[146, "microprobe.passes.memory.SingleMemoryStreamPass", false]], "size (bbl property)": [[31, "microprobe.code.bbl.Bbl.size", false]], "size (cache property)": [[214, "microprobe.target.uarch.cache.Cache.size", false]], "size (genericinstructionfield property)": [[187, "microprobe.target.isa.instruction_field.GenericInstructionField.size", false]], "size (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.size", false]], "size (instructionfield property)": [[188, "microprobe.target.isa.instruction_field.InstructionField.size", false]], "size (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.size", false]], "size (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.size", false]], "size (variable property)": [[46, "microprobe.code.var.Variable.size", false]], "size (variablearray property)": [[47, "microprobe.code.var.VariableArray.size", false]], "size (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.size", false]], "skip() (microprobebininstructionstream method)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.skip", false]], "skip_all() (microprobebininstructionstream method)": [[227, "microprobe.utils.bin.MicroprobeBinInstructionStream.skip_all", false]], "smart_copy_dict() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.smart_copy_dict", false]], "sort_by_distance() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.sort_by_distance", false]], "sort_by_usage() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.sort_by_usage", false]], "source (datmap property)": [[178, "microprobe.target.isa.dat.DATmap.source", false]], "stack_direction (environment property)": [[170, "microprobe.target.env.Environment.stack_direction", false]], "stack_direction (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.stack_direction", false]], "stack_pointer (environment property)": [[170, "microprobe.target.env.Environment.stack_pointer", false]], "stack_pointer (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.stack_pointer", false]], "start_loop() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.start_loop", false]], "start_main() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.start_main", false]], "start_section() (paragraphformatterml method)": [[233, "microprobe.utils.cmdline.ParagraphFormatterML.start_section", false]], "state (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.state", false]], "state (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.state", false]], "state (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.state", false]], "step (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.step", false]], "store_decimal() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.store_decimal", false]], "store_decimal() (isa method)": [[174, "microprobe.target.isa.ISA.store_decimal", false]], "store_float() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.store_float", false]], "store_float() (isa method)": [[174, "microprobe.target.isa.ISA.store_float", false]], "store_integer() (genericisa method)": [[173, "microprobe.target.isa.GenericISA.store_integer", false]], "store_integer() (isa method)": [[174, "microprobe.target.isa.ISA.store_integer", false]], "string_with_chars() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.string_with_chars", false]], "string_with_fields() (in module microprobe.utils.cmdline)": [[229, "microprobe.utils.cmdline.string_with_fields", false]], "subelements (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.subelements", false]], "subelements (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.subelements", false]], "symbolic (context property)": [[39, "microprobe.code.context.Context.symbolic", false]], "synthesize() (synthesizer method)": [[24, "microprobe.code.Synthesizer.synthesize", false]], "synthesize() (tracesynthesizer method)": [[25, "microprobe.code.TraceSynthesizer.synthesize", false]], "synthesizer (class in microprobe.code)": [[24, "microprobe.code.Synthesizer", false]], "target (class in microprobe.target)": [[168, "microprobe.target.Target", false]], "target (datmap property)": [[178, "microprobe.target.isa.dat.DATmap.target", false]], "target (environment property)": [[170, "microprobe.target.env.Environment.target", false]], "target (genericcpumicroarchitecture property)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.target", false]], "target (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.target", false]], "target (genericisa property)": [[173, "microprobe.target.isa.GenericISA.target", false]], "target (genericmicroarchitecture property)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.target", false]], "target (isa property)": [[174, "microprobe.target.isa.ISA.target", false]], "target (microarchitecture property)": [[212, "microprobe.target.uarch.Microarchitecture.target", false]], "target (synthesizer property)": [[24, "microprobe.code.Synthesizer.target", false]], "target (tracesynthesizer property)": [[25, "microprobe.code.TraceSynthesizer.target", false]], "target (wrapper property)": [[50, "microprobe.code.wrapper.Wrapper.target", false]], "target_checks (genericinstructiontype property)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.target_checks", false]], "target_checks (instructiontype property)": [[185, "microprobe.target.isa.instruction.InstructionType.target_checks", false]], "target_instruction (instructionaddress property)": [[28, "microprobe.code.address.InstructionAddress.target_instruction", false]], "threads (environment property)": [[170, "microprobe.target.env.Environment.threads", false]], "threads (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.threads", false]], "to_str() (microprobetestmemoryaccessdefinition method)": [[253, "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition.to_str", false]], "tracesynthesizer (class in microprobe.code)": [[25, "microprobe.code.TraceSynthesizer", false]], "translate() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.translate", false]], "translate() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.translate", false]], "translateaddresspass (class in microprobe.passes.dat)": [[104, "microprobe.passes.dat.TranslateAddressPass", false]], "twocs_to_int() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.twocs_to_int", false]], "type (genericmicroarchitectureelement property)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.type", false]], "type (genericregister property)": [[204, "microprobe.target.isa.register.GenericRegister.type", false]], "type (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.type", false]], "type (memoryoperanddescriptor property)": [[195, "microprobe.target.isa.operand.MemoryOperandDescriptor.type", false]], "type (microarchitectureelement property)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.type", false]], "type (operanddescriptor property)": [[199, "microprobe.target.isa.operand.OperandDescriptor.type", false]], "type (register property)": [[205, "microprobe.target.isa.register.Register.type", false]], "type (variable property)": [[46, "microprobe.code.var.Variable.type", false]], "type (variablearray property)": [[47, "microprobe.code.var.VariableArray.type", false]], "type (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.type", false]], "unregister_property() (environment method)": [[170, "microprobe.target.env.Environment.unregister_property", false]], "unregister_property() (genericcpumicroarchitecture method)": [[210, "microprobe.target.uarch.GenericCPUMicroarchitecture.unregister_property", false]], "unregister_property() (genericenvironment method)": [[171, "microprobe.target.env.GenericEnvironment.unregister_property", false]], "unregister_property() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.unregister_property", false]], "unregister_property() (genericmicroarchitecture method)": [[211, "microprobe.target.uarch.GenericMicroarchitecture.unregister_property", false]], "unregister_property() (genericmicroarchitectureelement method)": [[218, "microprobe.target.uarch.element.GenericMicroarchitectureElement.unregister_property", false]], "unregister_property() (genericmicroarchitectureelementtype method)": [[221, "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType.unregister_property", false]], "unregister_property() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.unregister_property", false]], "unregister_property() (microarchitecture method)": [[212, "microprobe.target.uarch.Microarchitecture.unregister_property", false]], "unregister_property() (microarchitectureelement method)": [[219, "microprobe.target.uarch.element.MicroarchitectureElement.unregister_property", false]], "unregister_property() (microarchitectureelementtype method)": [[222, "microprobe.target.uarch.element_type.MicroarchitectureElementType.unregister_property", false]], "unregister_property() (propertyholder method)": [[164, "microprobe.property.PropertyHolder.unregister_property", false]], "unreserveregisterspass (class in microprobe.passes.initialization)": [[121, "microprobe.passes.initialization.UnReserveRegistersPass", false]], "unset_address() (instruction method)": [[41, "microprobe.code.ins.Instruction.unset_address", false]], "unset_forbidden_address_range() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.unset_forbidden_address_range", false]], "unset_memory() (context method)": [[39, "microprobe.code.context.Context.unset_memory", false]], "unset_possible_addresses() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.unset_possible_addresses", false]], "unset_possible_lengths() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.unset_possible_lengths", false]], "unset_register() (context method)": [[39, "microprobe.code.context.Context.unset_register", false]], "unset_registers() (context method)": [[39, "microprobe.code.context.Context.unset_registers", false]], "unset_value() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.unset_value", false]], "update() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.update", false]], "update() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.update", false]], "update() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.update", false]], "update() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.update", false]], "update() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.update", false]], "update_address() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.update_address", false]], "update_address_from_operands() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.update_address_from_operands", false]], "update_cache_needed() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.update_cache_needed", false]], "update_dat() (dynamicaddresstranslation method)": [[179, "microprobe.target.isa.dat.DynamicAddressTranslation.update_dat", false]], "update_dat() (genericdynamicaddresstranslation method)": [[180, "microprobe.target.isa.dat.GenericDynamicAddressTranslation.update_dat", false]], "update_register_definition() (microprobetestdefinition method)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.update_register_definition", false]], "update_register_definition() (microprobetestdefinitiondefault method)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.update_register_definition", false]], "update_register_definition() (microprobetestdefinitionv0x5 method)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.update_register_definition", false]], "updateinstructionaddressespass (class in microprobe.passes.address)": [[93, "microprobe.passes.address.UpdateInstructionAddressesPass", false]], "updatevariableaddressespass (class in microprobe.passes.variable)": [[161, "microprobe.passes.variable.UpdateVariableAddressesPass", false]], "used_for_address_arithmetic (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.used_for_address_arithmetic", false]], "used_for_address_arithmetic (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.used_for_address_arithmetic", false]], "used_for_float_arithmetic (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.used_for_float_arithmetic", false]], "used_for_float_arithmetic (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.used_for_float_arithmetic", false]], "used_for_vector_arithmetic (genericregistertype property)": [[207, "microprobe.target.isa.register_type.GenericRegisterType.used_for_vector_arithmetic", false]], "used_for_vector_arithmetic (registertype property)": [[208, "microprobe.target.isa.register_type.RegisterType.used_for_vector_arithmetic", false]], "uses() (genericinstructiontype method)": [[184, "microprobe.target.isa.instruction.GenericInstructionType.uses", false]], "uses() (instruction method)": [[41, "microprobe.code.ins.Instruction.uses", false]], "uses() (instructionmemoryoperandvalue method)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.uses", false]], "uses() (instructionoperandvalue method)": [[43, "microprobe.code.ins.InstructionOperandValue.uses", false]], "uses() (instructiontype method)": [[185, "microprobe.target.isa.instruction.InstructionType.uses", false]], "value (instructionoperandvalue property)": [[43, "microprobe.code.ins.InstructionOperandValue.value", false]], "value (memoryvalue property)": [[29, "microprobe.code.address.MemoryValue.value", false]], "value (property property)": [[163, "microprobe.property.Property.value", false]], "value (variable property)": [[46, "microprobe.code.var.Variable.value", false]], "value (variablearray property)": [[47, "microprobe.code.var.VariableArray.value", false]], "value (variablesingle property)": [[48, "microprobe.code.var.VariableSingle.value", false]], "values() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.values", false]], "values() (instructionaddressrelativeoperand method)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.values", false]], "values() (microprobeconfiguration method)": [[236, "microprobe.utils.config.MicroprobeConfiguration.values", false]], "values() (microprobedefaultconfiguration method)": [[237, "microprobe.utils.config.MicroprobeDefaultConfiguration.values", false]], "values() (operand method)": [[196, "microprobe.target.isa.operand.Operand.values", false]], "values() (operandconst method)": [[197, "microprobe.target.isa.operand.OperandConst.values", false]], "values() (operandconstreg method)": [[198, "microprobe.target.isa.operand.OperandConstReg.values", false]], "values() (operandimmrange method)": [[200, "microprobe.target.isa.operand.OperandImmRange.values", false]], "values() (operandreg method)": [[201, "microprobe.target.isa.operand.OperandReg.values", false]], "values() (operandvalueset method)": [[202, "microprobe.target.isa.operand.OperandValueSet.values", false]], "values() (rejectingdict method)": [[247, "microprobe.utils.misc.RejectingDict.values", false]], "values() (rejectingordereddict method)": [[248, "microprobe.utils.misc.RejectingOrderedDict.values", false]], "variable (class in microprobe.code.var)": [[46, "microprobe.code.var.Variable", false]], "variable_length (instructionmemoryoperandvalue property)": [[42, "microprobe.code.ins.InstructionMemoryOperandValue.variable_length", false]], "variable_to_test_definition() (in module microprobe.utils.mpt)": [[249, "microprobe.utils.mpt.variable_to_test_definition", false]], "variablearray (class in microprobe.code.var)": [[47, "microprobe.code.var.VariableArray", false]], "variables (microprobetestdefinition property)": [[250, "microprobe.utils.mpt.MicroprobeTestDefinition.variables", false]], "variables (microprobetestdefinitiondefault property)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.variables", false]], "variables (microprobetestdefinitionv0x5 property)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.variables", false]], "variablesingle (class in microprobe.code.var)": [[48, "microprobe.code.var.VariableSingle", false]], "vector (instructionaddressrelativeoperand property)": [[193, "microprobe.target.isa.operand.InstructionAddressRelativeOperand.vector", false]], "vector (operand property)": [[196, "microprobe.target.isa.operand.Operand.vector", false]], "vector (operandconst property)": [[197, "microprobe.target.isa.operand.OperandConst.vector", false]], "vector (operandconstreg property)": [[198, "microprobe.target.isa.operand.OperandConstReg.vector", false]], "vector (operandimmrange property)": [[200, "microprobe.target.isa.operand.OperandImmRange.vector", false]], "vector (operandreg property)": [[201, "microprobe.target.isa.operand.OperandReg.vector", false]], "vector (operandvalueset property)": [[202, "microprobe.target.isa.operand.OperandValueSet.vector", false]], "version (microprobetestdefinitiondefault attribute)": [[251, "microprobe.utils.mpt.MicroprobeTestDefinitionDefault.version", false]], "version (microprobetestdefinitionv0x5 attribute)": [[252, "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5.version", false]], "version (microprobetestparserdefault attribute)": [[255, "microprobe.utils.mpt.MicroprobeTestParserDefault.version", false]], "version (microprobetestparserv0x5 attribute)": [[256, "microprobe.utils.mpt.MicroprobeTestParserV0x5.version", false]], "volatile_registers (environment property)": [[170, "microprobe.target.env.Environment.volatile_registers", false]], "volatile_registers (genericenvironment property)": [[171, "microprobe.target.env.GenericEnvironment.volatile_registers", false]], "warnings (benchmark property)": [[33, "microprobe.code.benchmark.Benchmark.warnings", false]], "warnings (buildingblock property)": [[34, "microprobe.code.benchmark.BuildingBlock.warnings", false]], "warnings (multithreadedbenchmark property)": [[35, "microprobe.code.benchmark.MultiThreadedBenchmark.warnings", false]], "ways (setassociativecache property)": [[216, "microprobe.target.uarch.cache.SetAssociativeCache.ways", false]], "weighted_choice() (in module microprobe.utils.distrib)": [[238, "microprobe.utils.distrib.weighted_choice", false]], "which() (in module microprobe.utils.misc)": [[244, "microprobe.utils.misc.which", false]], "with_traceback() (lazyargumenterror method)": [[231, "microprobe.utils.cmdline.LazyArgumentError.with_traceback", false]], "with_traceback() (microprobeaddresstranslationerror method)": [[54, "microprobe.exceptions.MicroprobeAddressTranslationError.with_traceback", false]], "with_traceback() (microprobearchitecturedefinitionerror method)": [[55, "microprobe.exceptions.MicroprobeArchitectureDefinitionError.with_traceback", false]], "with_traceback() (microprobearchitectureformaterror method)": [[56, "microprobe.exceptions.MicroprobeArchitectureFormatError.with_traceback", false]], "with_traceback() (microprobeasmerror method)": [[57, "microprobe.exceptions.MicroprobeAsmError.with_traceback", false]], "with_traceback() (microprobebinaryerror method)": [[58, "microprobe.exceptions.MicroprobeBinaryError.with_traceback", false]], "with_traceback() (microprobebranchconditionerror method)": [[59, "microprobe.exceptions.MicroprobeBranchConditionError.with_traceback", false]], "with_traceback() (microprobecacheerror method)": [[60, "microprobe.exceptions.MicroprobeCacheError.with_traceback", false]], "with_traceback() (microprobecalledprocesserror method)": [[61, "microprobe.exceptions.MicroprobeCalledProcessError.with_traceback", false]], "with_traceback() (microprobecodegenerationerror method)": [[62, "microprobe.exceptions.MicroprobeCodeGenerationError.with_traceback", false]], "with_traceback() (microprobeconstantregistererror method)": [[63, "microprobe.exceptions.MicroprobeConstantRegisterError.with_traceback", false]], "with_traceback() (microprobedmaformaterror method)": [[64, "microprobe.exceptions.MicroprobeDMAFormatError.with_traceback", false]], "with_traceback() (microprobeduplicatedvalueerror method)": [[65, "microprobe.exceptions.MicroprobeDuplicatedValueError.with_traceback", false]], "with_traceback() (microprobeerror method)": [[66, "microprobe.exceptions.MicroprobeError.with_traceback", false]], "with_traceback() (microprobeexception method)": [[67, "microprobe.exceptions.MicroprobeException.with_traceback", false]], "with_traceback() (microprobeimportdefinitionerror method)": [[68, "microprobe.exceptions.MicroprobeImportDefinitionError.with_traceback", false]], "with_traceback() (microprobeimporterror method)": [[69, "microprobe.exceptions.MicroprobeImportError.with_traceback", false]], "with_traceback() (microprobelookuperror method)": [[70, "microprobe.exceptions.MicroprobeLookupError.with_traceback", false]], "with_traceback() (microprobemodelerror method)": [[72, "microprobe.exceptions.MicroprobeModelError.with_traceback", false]], "with_traceback() (microprobemptformaterror method)": [[71, "microprobe.exceptions.MicroprobeMPTFormatError.with_traceback", false]], "with_traceback() (microprobenocomparatorerror method)": [[73, "microprobe.exceptions.MicroprobeNoComparatorError.with_traceback", false]], "with_traceback() (microprobenogenerationpatherror method)": [[74, "microprobe.exceptions.MicroprobeNoGenerationPathError.with_traceback", false]], "with_traceback() (microprobeobjdumperror method)": [[75, "microprobe.exceptions.MicroprobeObjdumpError.with_traceback", false]], "with_traceback() (microprobepolicyerror method)": [[76, "microprobe.exceptions.MicroprobePolicyError.with_traceback", false]], "with_traceback() (microproberuncmderror method)": [[77, "microprobe.exceptions.MicroprobeRunCmdError.with_traceback", false]], "with_traceback() (microprobetargetdefinitionerror method)": [[78, "microprobe.exceptions.MicroprobeTargetDefinitionError.with_traceback", false]], "with_traceback() (microprobetypeerror method)": [[79, "microprobe.exceptions.MicroprobeTypeError.with_traceback", false]], "with_traceback() (microprobeuncheckableenvironmentwarning method)": [[80, "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning.with_traceback", false]], "with_traceback() (microprobevalueerror method)": [[81, "microprobe.exceptions.MicroprobeValueError.with_traceback", false]], "with_traceback() (microprobewarning method)": [[82, "microprobe.exceptions.MicroprobeWarning.with_traceback", false]], "with_traceback() (microprobeyamlformaterror method)": [[83, "microprobe.exceptions.MicroprobeYamlFormatError.with_traceback", false]], "wrap_ins() (wrapper method)": [[50, "microprobe.code.wrapper.Wrapper.wrap_ins", false]], "wrapper (class in microprobe.code.wrapper)": [[50, "microprobe.code.wrapper.Wrapper", false]], "wrapper (synthesizer property)": [[24, "microprobe.code.Synthesizer.wrapper", false]], "wrapper (target property)": [[168, "microprobe.target.Target.wrapper", false]], "wrapper (tracesynthesizer property)": [[25, "microprobe.code.TraceSynthesizer.wrapper", false]], "write() (duplicateconfigparser method)": [[235, "microprobe.utils.config.DuplicateConfigParser.write", false]], "write_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.write_cache_data", false]], "write_default_cache_data() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.write_default_cache_data", false]], "write_default_cache_data_silent() (in module microprobe.utils.cache)": [[228, "microprobe.utils.cache.write_default_cache_data_silent", false]]}, "objects": {"": [[22, 0, 0, "-", "microprobe"]], "microprobe": [[23, 0, 0, "-", "code"], [51, 0, 0, "-", "driver"], [53, 0, 0, "-", "exceptions"], [84, 0, 0, "-", "model"], [89, 0, 0, "-", "passes"], [162, 0, 0, "-", "property"], [165, 0, 0, "-", "schemas"], [166, 0, 0, "-", "target"], [223, 0, 0, "-", "utils"]], "microprobe.code": [[24, 1, 1, "", "Synthesizer"], [25, 1, 1, "", "TraceSynthesizer"], [26, 0, 0, "-", "address"], [30, 0, 0, "-", "bbl"], [32, 0, 0, "-", "benchmark"], [36, 0, 0, "-", "cfg"], [38, 0, 0, "-", "context"], [23, 4, 1, "", "get_wrapper"], [40, 0, 0, "-", "ins"], [45, 0, 0, "-", "var"], [49, 0, 0, "-", "wrapper"]], "microprobe.code.Synthesizer": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "add_pass"], [24, 2, 1, "", "save"], [24, 2, 1, "", "set_current_thread"], [24, 2, 1, "", "synthesize"], [24, 3, 1, "", "target"], [24, 3, 1, "", "wrapper"]], "microprobe.code.TraceSynthesizer": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "add_pass"], [25, 2, 1, "", "save"], [25, 2, 1, "", "set_current_thread"], [25, 2, 1, "", "synthesize"], [25, 3, 1, "", "target"], [25, 3, 1, "", "wrapper"]], "microprobe.code.address": [[27, 1, 1, "", "Address"], [28, 1, 1, "", "InstructionAddress"], [29, 1, 1, "", "MemoryValue"]], "microprobe.code.address.Address": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "base_address"], [27, 2, 1, "", "check_alignment"], [27, 2, 1, "", "copy"], [27, 3, 1, "", "displacement"]], "microprobe.code.address.InstructionAddress": [[28, 2, 1, "", "__init__"], [28, 3, 1, "", "base_address"], [28, 2, 1, "", "check_alignment"], [28, 2, 1, "", "copy"], [28, 3, 1, "", "displacement"], [28, 2, 1, "", "set_target_instruction"], [28, 3, 1, "", "target_instruction"]], "microprobe.code.address.MemoryValue": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "address"], [29, 3, 1, "", "length"], [29, 3, 1, "", "value"]], "microprobe.code.bbl": [[31, 1, 1, "", "Bbl"], [30, 4, 1, "", "replicate_bbls"]], "microprobe.code.bbl.Bbl": [[31, 2, 1, "", "__init__"], [31, 3, 1, "", "address"], [31, 3, 1, "", "displacement"], [31, 2, 1, "", "distance"], [31, 2, 1, "", "get_instruction_by_distance"], [31, 2, 1, "", "get_instruction_index"], [31, 2, 1, "", "insert_instr"], [31, 3, 1, "", "instrs"], [31, 2, 1, "", "remove_instructions_from"], [31, 2, 1, "", "replicate"], [31, 2, 1, "", "reset_instruction"], [31, 2, 1, "", "set_address"], [31, 2, 1, "", "set_displacement"], [31, 3, 1, "", "size"]], "microprobe.code.benchmark": [[33, 1, 1, "", "Benchmark"], [34, 1, 1, "", "BuildingBlock"], [35, 1, 1, "", "MultiThreadedBenchmark"], [32, 4, 1, "", "benchmark_factory"]], "microprobe.code.benchmark.Benchmark": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "add_fini"], [33, 2, 1, "", "add_info"], [33, 2, 1, "", "add_init"], [33, 2, 1, "", "add_instructions"], [33, 2, 1, "", "add_pass_info"], [33, 2, 1, "", "add_requirement"], [33, 2, 1, "", "add_warning"], [33, 3, 1, "", "cfg"], [33, 3, 1, "", "code_size"], [33, 3, 1, "", "context"], [33, 3, 1, "", "fini"], [33, 3, 1, "", "info"], [33, 3, 1, "", "init"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "pass_info"], [33, 2, 1, "", "register_var"], [33, 2, 1, "", "registered_global_vars"], [33, 3, 1, "", "requirements"], [33, 2, 1, "", "rm_init"], [33, 2, 1, "", "set_cfg"], [33, 2, 1, "", "set_context"], [33, 2, 1, "", "set_current_thread"], [33, 2, 1, "", "set_var_displacement"], [33, 3, 1, "", "warnings"]], "microprobe.code.benchmark.BuildingBlock": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "add_info"], [34, 2, 1, "", "add_pass_info"], [34, 2, 1, "", "add_requirement"], [34, 2, 1, "", "add_warning"], [34, 3, 1, "", "info"], [34, 3, 1, "", "pass_info"], [34, 3, 1, "", "requirements"], [34, 3, 1, "", "warnings"]], "microprobe.code.benchmark.MultiThreadedBenchmark": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "add_fini"], [35, 2, 1, "", "add_info"], [35, 2, 1, "", "add_init"], [35, 2, 1, "", "add_instructions"], [35, 2, 1, "", "add_pass_info"], [35, 2, 1, "", "add_requirement"], [35, 2, 1, "", "add_warning"], [35, 3, 1, "", "cfg"], [35, 3, 1, "", "code_size"], [35, 3, 1, "", "context"], [35, 3, 1, "", "fini"], [35, 3, 1, "", "info"], [35, 3, 1, "", "init"], [35, 3, 1, "", "labels"], [35, 3, 1, "", "pass_info"], [35, 2, 1, "", "register_var"], [35, 2, 1, "", "registered_global_vars"], [35, 3, 1, "", "requirements"], [35, 2, 1, "", "rm_init"], [35, 2, 1, "", "set_cfg"], [35, 2, 1, "", "set_context"], [35, 2, 1, "", "set_current_thread"], [35, 2, 1, "", "set_var_displacement"], [35, 3, 1, "", "warnings"]], "microprobe.code.cfg": [[37, 1, 1, "", "Cfg"]], "microprobe.code.cfg.Cfg": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "add_bbl"], [37, 2, 1, "", "add_bbls"], [37, 3, 1, "", "bbls"], [37, 2, 1, "", "get_bbl"], [37, 2, 1, "", "index"], [37, 2, 1, "", "last_bbl"]], "microprobe.code.context": [[39, 1, 1, "", "Context"]], "microprobe.code.context.Context": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "add_reserved_registers"], [39, 3, 1, "", "code_segment"], [39, 2, 1, "", "copy"], [39, 3, 1, "", "dat"], [39, 3, 1, "", "data_segment"], [39, 2, 1, "", "dump"], [39, 3, 1, "", "force_absolute"], [39, 2, 1, "", "get_closest_address_value"], [39, 2, 1, "", "get_closest_value"], [39, 2, 1, "", "get_memory_value"], [39, 2, 1, "", "get_register_closest_value"], [39, 2, 1, "", "get_register_value"], [39, 2, 1, "", "get_registername_value"], [39, 2, 1, "", "register_has_value"], [39, 3, 1, "", "register_values"], [39, 2, 1, "", "registers_get_value"], [39, 2, 1, "", "remove_reserved_registers"], [39, 3, 1, "", "reserved_registers"], [39, 2, 1, "", "set_absolute"], [39, 2, 1, "", "set_code_segment"], [39, 2, 1, "", "set_dat"], [39, 2, 1, "", "set_data_segment"], [39, 2, 1, "", "set_memory_value"], [39, 2, 1, "", "set_register_value"], [39, 2, 1, "", "set_symbolic"], [39, 3, 1, "", "symbolic"], [39, 2, 1, "", "unset_memory"], [39, 2, 1, "", "unset_register"], [39, 2, 1, "", "unset_registers"]], "microprobe.code.ins": [[41, 1, 1, "", "Instruction"], [42, 1, 1, "", "InstructionMemoryOperandValue"], [43, 1, 1, "", "InstructionOperandValue"], [44, 1, 1, "", "MicroprobeInstructionDefinition"], [40, 4, 1, "", "create_dependency_between_ins"], [40, 4, 1, "", "instruction_factory"], [40, 4, 1, "", "instruction_from_definition"], [40, 4, 1, "", "instruction_set_def_properties"], [40, 4, 1, "", "instruction_to_definition"], [40, 4, 1, "", "instructions_from_asm"]], "microprobe.code.ins.Instruction": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "add_allow_register"], [41, 2, 1, "", "add_comment"], [41, 2, 1, "", "add_decorator"], [41, 3, 1, "", "address"], [41, 3, 1, "", "allowed_regs"], [41, 2, 1, "", "allows"], [41, 3, 1, "", "architecture_type"], [41, 2, 1, "", "assembly"], [41, 2, 1, "", "binary"], [41, 2, 1, "", "check_context"], [41, 3, 1, "", "comments"], [41, 3, 1, "", "context_callbacks"], [41, 2, 1, "", "copy"], [41, 3, 1, "", "decorators"], [41, 3, 1, "", "label"], [41, 2, 1, "", "memory_operands"], [41, 2, 1, "", "operand_by_field"], [41, 2, 1, "", "operand_fields"], [41, 2, 1, "", "operands"], [41, 2, 1, "", "register_context_callback"], [41, 2, 1, "", "rm_decorator"], [41, 2, 1, "", "set_address"], [41, 2, 1, "", "set_arch_type"], [41, 2, 1, "", "set_label"], [41, 2, 1, "", "set_operands"], [41, 2, 1, "", "sets"], [41, 2, 1, "", "unset_address"], [41, 2, 1, "", "uses"]], "microprobe.code.ins.InstructionMemoryOperandValue": [[42, 2, 1, "", "__init__"], [42, 3, 1, "", "address"], [42, 2, 1, "", "alignment"], [42, 3, 1, "", "descriptor"], [42, 3, 1, "", "length"], [42, 3, 1, "", "operands"], [42, 2, 1, "", "possible_addresses"], [42, 2, 1, "", "possible_lengths"], [42, 2, 1, "", "register_mem_operand_callback"], [42, 2, 1, "", "set_address"], [42, 2, 1, "", "set_alignment"], [42, 2, 1, "", "set_forbidden_address_range"], [42, 2, 1, "", "set_length"], [42, 2, 1, "", "set_possible_addresses"], [42, 2, 1, "", "set_possible_lengths"], [42, 2, 1, "", "sets"], [42, 2, 1, "", "unset_forbidden_address_range"], [42, 2, 1, "", "unset_possible_addresses"], [42, 2, 1, "", "unset_possible_lengths"], [42, 2, 1, "", "update_address"], [42, 2, 1, "", "update_address_from_operands"], [42, 2, 1, "", "uses"], [42, 3, 1, "", "variable_length"]], "microprobe.code.ins.InstructionOperandValue": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "copy"], [43, 3, 1, "", "descriptor"], [43, 3, 1, "", "is_input"], [43, 3, 1, "", "is_output"], [43, 2, 1, "", "register_operand_callbacks"], [43, 3, 1, "", "representation"], [43, 2, 1, "", "set_descriptor"], [43, 2, 1, "", "set_type"], [43, 2, 1, "", "set_value"], [43, 2, 1, "", "sets"], [43, 3, 1, "", "type"], [43, 2, 1, "", "unset_value"], [43, 2, 1, "", "uses"], [43, 3, 1, "", "value"]], "microprobe.code.ins.MicroprobeInstructionDefinition": [[44, 2, 1, "", "__init__"], [44, 3, 1, "", "address"], [44, 3, 1, "", "asm"], [44, 3, 1, "", "comments"], [44, 2, 1, "", "copy"], [44, 3, 1, "", "decorators"], [44, 2, 1, "", "get_address"], [44, 2, 1, "", "get_asm"], [44, 2, 1, "", "get_comments"], [44, 2, 1, "", "get_decorators"], [44, 2, 1, "", "get_instruction_type"], [44, 2, 1, "", "get_label"], [44, 2, 1, "", "get_operands"], [44, 3, 1, "", "instruction_type"], [44, 3, 1, "", "label"], [44, 3, 1, "", "operands"], [44, 2, 1, "", "set_address"], [44, 2, 1, "", "set_asm"], [44, 2, 1, "", "set_comments"], [44, 2, 1, "", "set_decorators"], [44, 2, 1, "", "set_instruction_type"], [44, 2, 1, "", "set_label"], [44, 2, 1, "", "set_operands"]], "microprobe.code.var": [[46, 1, 1, "", "Variable"], [47, 1, 1, "", "VariableArray"], [48, 1, 1, "", "VariableSingle"]], "microprobe.code.var.Variable": [[46, 2, 1, "", "__init__"], [46, 3, 1, "", "address"], [46, 3, 1, "", "align"], [46, 2, 1, "", "array"], [46, 3, 1, "", "name"], [46, 2, 1, "", "set_address"], [46, 3, 1, "", "size"], [46, 3, 1, "", "type"], [46, 3, 1, "", "value"]], "microprobe.code.var.VariableArray": [[47, 2, 1, "", "__init__"], [47, 3, 1, "", "address"], [47, 3, 1, "", "align"], [47, 2, 1, "", "array"], [47, 3, 1, "", "elems"], [47, 3, 1, "", "name"], [47, 2, 1, "", "set_address"], [47, 3, 1, "", "size"], [47, 3, 1, "", "type"], [47, 3, 1, "", "value"]], "microprobe.code.var.VariableSingle": [[48, 2, 1, "", "__init__"], [48, 3, 1, "", "address"], [48, 3, 1, "", "align"], [48, 2, 1, "", "array"], [48, 3, 1, "", "name"], [48, 2, 1, "", "set_address"], [48, 3, 1, "", "size"], [48, 3, 1, "", "type"], [48, 3, 1, "", "value"]], "microprobe.code.wrapper": [[50, 1, 1, "", "Wrapper"]], "microprobe.code.wrapper.Wrapper": [[50, 2, 1, "", "__init__"], [50, 3, 1, "", "benchmark"], [50, 2, 1, "", "context"], [50, 2, 1, "", "declare_global_var"], [50, 3, 1, "", "direct_initialization_support"], [50, 2, 1, "", "end_loop"], [50, 2, 1, "", "end_main"], [50, 2, 1, "", "footer"], [50, 2, 1, "", "get_direct_init"], [50, 2, 1, "", "headers"], [50, 2, 1, "", "infinite"], [50, 2, 1, "", "init_global_var"], [50, 2, 1, "", "init_loop_pad"], [50, 2, 1, "", "init_main_pad"], [50, 2, 1, "", "outputname"], [50, 2, 1, "", "post_var"], [50, 2, 1, "", "register_direct_init"], [50, 2, 1, "", "required_global_vars"], [50, 2, 1, "", "reserved_registers"], [50, 3, 1, "", "reset"], [50, 2, 1, "", "set_benchmark"], [50, 2, 1, "", "set_target"], [50, 2, 1, "", "start_loop"], [50, 2, 1, "", "start_main"], [50, 3, 1, "", "target"], [50, 2, 1, "", "wrap_ins"]], "microprobe.driver": [[52, 0, 0, "-", "guided"]], "microprobe.exceptions": [[54, 5, 1, "", "MicroprobeAddressTranslationError"], [55, 5, 1, "", "MicroprobeArchitectureDefinitionError"], [56, 5, 1, "", "MicroprobeArchitectureFormatError"], [57, 5, 1, "", "MicroprobeAsmError"], [58, 5, 1, "", "MicroprobeBinaryError"], [59, 5, 1, "", "MicroprobeBranchConditionError"], [60, 5, 1, "", "MicroprobeCacheError"], [61, 5, 1, "", "MicroprobeCalledProcessError"], [62, 5, 1, "", "MicroprobeCodeGenerationError"], [63, 5, 1, "", "MicroprobeConstantRegisterError"], [64, 5, 1, "", "MicroprobeDMAFormatError"], [65, 5, 1, "", "MicroprobeDuplicatedValueError"], [66, 5, 1, "", "MicroprobeError"], [67, 5, 1, "", "MicroprobeException"], [68, 5, 1, "", "MicroprobeImportDefinitionError"], [69, 5, 1, "", "MicroprobeImportError"], [70, 5, 1, "", "MicroprobeLookupError"], [71, 5, 1, "", "MicroprobeMPTFormatError"], [72, 5, 1, "", "MicroprobeModelError"], [73, 5, 1, "", "MicroprobeNoComparatorError"], [74, 5, 1, "", "MicroprobeNoGenerationPathError"], [75, 5, 1, "", "MicroprobeObjdumpError"], [76, 5, 1, "", "MicroprobePolicyError"], [77, 5, 1, "", "MicroprobeRunCmdError"], [78, 5, 1, "", "MicroprobeTargetDefinitionError"], [79, 5, 1, "", "MicroprobeTypeError"], [80, 5, 1, "", "MicroprobeUncheckableEnvironmentWarning"], [81, 5, 1, "", "MicroprobeValueError"], [82, 5, 1, "", "MicroprobeWarning"], [83, 5, 1, "", "MicroprobeYamlFormatError"]], "microprobe.exceptions.MicroprobeAddressTranslationError": [[54, 6, 1, "", "__cause__"], [54, 6, 1, "", "__context__"], [54, 2, 1, "", "__delattr__"], [54, 6, 1, "", "__dict__"], [54, 2, 1, "", "__getattribute__"], [54, 2, 1, "", "__init__"], [54, 6, 1, "", "__module__"], [54, 2, 1, "", "__new__"], [54, 2, 1, "", "__reduce__"], [54, 2, 1, "", "__repr__"], [54, 2, 1, "", "__setattr__"], [54, 2, 1, "", "__setstate__"], [54, 2, 1, "", "__str__"], [54, 6, 1, "", "__suppress_context__"], [54, 6, 1, "", "__traceback__"], [54, 6, 1, "", "__weakref__"], [54, 6, 1, "", "args"], [54, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeArchitectureDefinitionError": [[55, 6, 1, "", "__cause__"], [55, 6, 1, "", "__context__"], [55, 2, 1, "", "__delattr__"], [55, 6, 1, "", "__dict__"], [55, 2, 1, "", "__getattribute__"], [55, 2, 1, "", "__init__"], [55, 6, 1, "", "__module__"], [55, 2, 1, "", "__new__"], [55, 2, 1, "", "__reduce__"], [55, 2, 1, "", "__repr__"], [55, 2, 1, "", "__setattr__"], [55, 2, 1, "", "__setstate__"], [55, 2, 1, "", "__str__"], [55, 6, 1, "", "__suppress_context__"], [55, 6, 1, "", "__traceback__"], [55, 6, 1, "", "__weakref__"], [55, 6, 1, "", "args"], [55, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeArchitectureFormatError": [[56, 6, 1, "", "__annotations__"], [56, 6, 1, "", "__cause__"], [56, 6, 1, "", "__context__"], [56, 2, 1, "", "__delattr__"], [56, 6, 1, "", "__dict__"], [56, 2, 1, "", "__getattribute__"], [56, 2, 1, "", "__init__"], [56, 6, 1, "", "__module__"], [56, 2, 1, "", "__new__"], [56, 2, 1, "", "__reduce__"], [56, 2, 1, "", "__repr__"], [56, 2, 1, "", "__setattr__"], [56, 2, 1, "", "__setstate__"], [56, 2, 1, "", "__str__"], [56, 6, 1, "", "__suppress_context__"], [56, 6, 1, "", "__traceback__"], [56, 6, 1, "", "__weakref__"], [56, 6, 1, "", "args"], [56, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeAsmError": [[57, 6, 1, "", "__cause__"], [57, 6, 1, "", "__context__"], [57, 2, 1, "", "__delattr__"], [57, 6, 1, "", "__dict__"], [57, 2, 1, "", "__getattribute__"], [57, 2, 1, "", "__init__"], [57, 6, 1, "", "__module__"], [57, 2, 1, "", "__new__"], [57, 2, 1, "", "__reduce__"], [57, 2, 1, "", "__repr__"], [57, 2, 1, "", "__setattr__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 6, 1, "", "__suppress_context__"], [57, 6, 1, "", "__traceback__"], [57, 6, 1, "", "__weakref__"], [57, 6, 1, "", "args"], [57, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeBinaryError": [[58, 6, 1, "", "__cause__"], [58, 6, 1, "", "__context__"], [58, 2, 1, "", "__delattr__"], [58, 6, 1, "", "__dict__"], [58, 2, 1, "", "__getattribute__"], [58, 2, 1, "", "__init__"], [58, 6, 1, "", "__module__"], [58, 2, 1, "", "__new__"], [58, 2, 1, "", "__reduce__"], [58, 2, 1, "", "__repr__"], [58, 2, 1, "", "__setattr__"], [58, 2, 1, "", "__setstate__"], [58, 2, 1, "", "__str__"], [58, 6, 1, "", "__suppress_context__"], [58, 6, 1, "", "__traceback__"], [58, 6, 1, "", "__weakref__"], [58, 6, 1, "", "args"], [58, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeBranchConditionError": [[59, 6, 1, "", "__cause__"], [59, 6, 1, "", "__context__"], [59, 2, 1, "", "__delattr__"], [59, 6, 1, "", "__dict__"], [59, 2, 1, "", "__getattribute__"], [59, 2, 1, "", "__init__"], [59, 6, 1, "", "__module__"], [59, 2, 1, "", "__new__"], [59, 2, 1, "", "__reduce__"], [59, 2, 1, "", "__repr__"], [59, 2, 1, "", "__setattr__"], [59, 2, 1, "", "__setstate__"], [59, 2, 1, "", "__str__"], [59, 6, 1, "", "__suppress_context__"], [59, 6, 1, "", "__traceback__"], [59, 6, 1, "", "__weakref__"], [59, 6, 1, "", "args"], [59, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeCacheError": [[60, 6, 1, "", "__cause__"], [60, 6, 1, "", "__context__"], [60, 2, 1, "", "__delattr__"], [60, 6, 1, "", "__dict__"], [60, 2, 1, "", "__getattribute__"], [60, 2, 1, "", "__init__"], [60, 6, 1, "", "__module__"], [60, 2, 1, "", "__new__"], [60, 2, 1, "", "__reduce__"], [60, 2, 1, "", "__repr__"], [60, 2, 1, "", "__setattr__"], [60, 2, 1, "", "__setstate__"], [60, 2, 1, "", "__str__"], [60, 6, 1, "", "__suppress_context__"], [60, 6, 1, "", "__traceback__"], [60, 6, 1, "", "__weakref__"], [60, 6, 1, "", "args"], [60, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeCalledProcessError": [[61, 6, 1, "", "__cause__"], [61, 6, 1, "", "__context__"], [61, 2, 1, "", "__delattr__"], [61, 6, 1, "", "__dict__"], [61, 2, 1, "", "__getattribute__"], [61, 2, 1, "", "__init__"], [61, 6, 1, "", "__module__"], [61, 2, 1, "", "__new__"], [61, 2, 1, "", "__reduce__"], [61, 2, 1, "", "__repr__"], [61, 2, 1, "", "__setattr__"], [61, 2, 1, "", "__setstate__"], [61, 2, 1, "", "__str__"], [61, 6, 1, "", "__suppress_context__"], [61, 6, 1, "", "__traceback__"], [61, 6, 1, "", "__weakref__"], [61, 6, 1, "", "args"], [61, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeCodeGenerationError": [[62, 6, 1, "", "__cause__"], [62, 6, 1, "", "__context__"], [62, 2, 1, "", "__delattr__"], [62, 6, 1, "", "__dict__"], [62, 2, 1, "", "__getattribute__"], [62, 2, 1, "", "__init__"], [62, 6, 1, "", "__module__"], [62, 2, 1, "", "__new__"], [62, 2, 1, "", "__reduce__"], [62, 2, 1, "", "__repr__"], [62, 2, 1, "", "__setattr__"], [62, 2, 1, "", "__setstate__"], [62, 2, 1, "", "__str__"], [62, 6, 1, "", "__suppress_context__"], [62, 6, 1, "", "__traceback__"], [62, 6, 1, "", "__weakref__"], [62, 6, 1, "", "args"], [62, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeConstantRegisterError": [[63, 6, 1, "", "__annotations__"], [63, 6, 1, "", "__cause__"], [63, 6, 1, "", "__context__"], [63, 2, 1, "", "__delattr__"], [63, 6, 1, "", "__dict__"], [63, 2, 1, "", "__getattribute__"], [63, 2, 1, "", "__init__"], [63, 6, 1, "", "__module__"], [63, 2, 1, "", "__new__"], [63, 2, 1, "", "__reduce__"], [63, 2, 1, "", "__repr__"], [63, 2, 1, "", "__setattr__"], [63, 2, 1, "", "__setstate__"], [63, 2, 1, "", "__str__"], [63, 6, 1, "", "__suppress_context__"], [63, 6, 1, "", "__traceback__"], [63, 6, 1, "", "__weakref__"], [63, 6, 1, "", "args"], [63, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeDMAFormatError": [[64, 6, 1, "", "__cause__"], [64, 6, 1, "", "__context__"], [64, 2, 1, "", "__delattr__"], [64, 6, 1, "", "__dict__"], [64, 2, 1, "", "__getattribute__"], [64, 2, 1, "", "__init__"], [64, 6, 1, "", "__module__"], [64, 2, 1, "", "__new__"], [64, 2, 1, "", "__reduce__"], [64, 2, 1, "", "__repr__"], [64, 2, 1, "", "__setattr__"], [64, 2, 1, "", "__setstate__"], [64, 2, 1, "", "__str__"], [64, 6, 1, "", "__suppress_context__"], [64, 6, 1, "", "__traceback__"], [64, 6, 1, "", "__weakref__"], [64, 6, 1, "", "args"], [64, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeDuplicatedValueError": [[65, 6, 1, "", "__cause__"], [65, 6, 1, "", "__context__"], [65, 2, 1, "", "__delattr__"], [65, 6, 1, "", "__dict__"], [65, 2, 1, "", "__getattribute__"], [65, 2, 1, "", "__init__"], [65, 6, 1, "", "__module__"], [65, 2, 1, "", "__new__"], [65, 2, 1, "", "__reduce__"], [65, 2, 1, "", "__repr__"], [65, 2, 1, "", "__setattr__"], [65, 2, 1, "", "__setstate__"], [65, 2, 1, "", "__str__"], [65, 6, 1, "", "__suppress_context__"], [65, 6, 1, "", "__traceback__"], [65, 6, 1, "", "__weakref__"], [65, 6, 1, "", "args"], [65, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeError": [[66, 6, 1, "", "__cause__"], [66, 6, 1, "", "__context__"], [66, 2, 1, "", "__delattr__"], [66, 6, 1, "", "__dict__"], [66, 2, 1, "", "__getattribute__"], [66, 2, 1, "", "__init__"], [66, 6, 1, "", "__module__"], [66, 2, 1, "", "__new__"], [66, 2, 1, "", "__reduce__"], [66, 2, 1, "", "__repr__"], [66, 2, 1, "", "__setattr__"], [66, 2, 1, "", "__setstate__"], [66, 2, 1, "", "__str__"], [66, 6, 1, "", "__suppress_context__"], [66, 6, 1, "", "__traceback__"], [66, 6, 1, "", "__weakref__"], [66, 6, 1, "", "args"], [66, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeException": [[67, 6, 1, "", "__cause__"], [67, 6, 1, "", "__context__"], [67, 2, 1, "", "__delattr__"], [67, 6, 1, "", "__dict__"], [67, 2, 1, "", "__getattribute__"], [67, 2, 1, "", "__init__"], [67, 6, 1, "", "__module__"], [67, 2, 1, "", "__new__"], [67, 2, 1, "", "__reduce__"], [67, 2, 1, "", "__repr__"], [67, 2, 1, "", "__setattr__"], [67, 2, 1, "", "__setstate__"], [67, 2, 1, "", "__str__"], [67, 6, 1, "", "__suppress_context__"], [67, 6, 1, "", "__traceback__"], [67, 6, 1, "", "__weakref__"], [67, 6, 1, "", "args"], [67, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeImportDefinitionError": [[68, 6, 1, "", "__annotations__"], [68, 6, 1, "", "__cause__"], [68, 6, 1, "", "__context__"], [68, 2, 1, "", "__delattr__"], [68, 6, 1, "", "__dict__"], [68, 2, 1, "", "__getattribute__"], [68, 2, 1, "", "__init__"], [68, 6, 1, "", "__module__"], [68, 2, 1, "", "__new__"], [68, 2, 1, "", "__reduce__"], [68, 2, 1, "", "__repr__"], [68, 2, 1, "", "__setattr__"], [68, 2, 1, "", "__setstate__"], [68, 2, 1, "", "__str__"], [68, 6, 1, "", "__suppress_context__"], [68, 6, 1, "", "__traceback__"], [68, 6, 1, "", "__weakref__"], [68, 6, 1, "", "args"], [68, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeImportError": [[69, 6, 1, "", "__annotations__"], [69, 6, 1, "", "__cause__"], [69, 6, 1, "", "__context__"], [69, 2, 1, "", "__delattr__"], [69, 6, 1, "", "__dict__"], [69, 2, 1, "", "__getattribute__"], [69, 2, 1, "", "__init__"], [69, 6, 1, "", "__module__"], [69, 2, 1, "", "__new__"], [69, 2, 1, "", "__reduce__"], [69, 2, 1, "", "__repr__"], [69, 2, 1, "", "__setattr__"], [69, 2, 1, "", "__setstate__"], [69, 2, 1, "", "__str__"], [69, 6, 1, "", "__suppress_context__"], [69, 6, 1, "", "__traceback__"], [69, 6, 1, "", "__weakref__"], [69, 6, 1, "", "args"], [69, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeLookupError": [[70, 6, 1, "", "__annotations__"], [70, 6, 1, "", "__cause__"], [70, 6, 1, "", "__context__"], [70, 2, 1, "", "__delattr__"], [70, 6, 1, "", "__dict__"], [70, 2, 1, "", "__getattribute__"], [70, 2, 1, "", "__init__"], [70, 6, 1, "", "__module__"], [70, 2, 1, "", "__new__"], [70, 2, 1, "", "__reduce__"], [70, 2, 1, "", "__repr__"], [70, 2, 1, "", "__setattr__"], [70, 2, 1, "", "__setstate__"], [70, 2, 1, "", "__str__"], [70, 6, 1, "", "__suppress_context__"], [70, 6, 1, "", "__traceback__"], [70, 6, 1, "", "__weakref__"], [70, 6, 1, "", "args"], [70, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeMPTFormatError": [[71, 6, 1, "", "__annotations__"], [71, 6, 1, "", "__cause__"], [71, 6, 1, "", "__context__"], [71, 2, 1, "", "__delattr__"], [71, 6, 1, "", "__dict__"], [71, 2, 1, "", "__getattribute__"], [71, 2, 1, "", "__init__"], [71, 6, 1, "", "__module__"], [71, 2, 1, "", "__new__"], [71, 2, 1, "", "__reduce__"], [71, 2, 1, "", "__repr__"], [71, 2, 1, "", "__setattr__"], [71, 2, 1, "", "__setstate__"], [71, 2, 1, "", "__str__"], [71, 6, 1, "", "__suppress_context__"], [71, 6, 1, "", "__traceback__"], [71, 6, 1, "", "__weakref__"], [71, 6, 1, "", "args"], [71, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeModelError": [[72, 6, 1, "", "__cause__"], [72, 6, 1, "", "__context__"], [72, 2, 1, "", "__delattr__"], [72, 6, 1, "", "__dict__"], [72, 2, 1, "", "__getattribute__"], [72, 2, 1, "", "__init__"], [72, 6, 1, "", "__module__"], [72, 2, 1, "", "__new__"], [72, 2, 1, "", "__reduce__"], [72, 2, 1, "", "__repr__"], [72, 2, 1, "", "__setattr__"], [72, 2, 1, "", "__setstate__"], [72, 2, 1, "", "__str__"], [72, 6, 1, "", "__suppress_context__"], [72, 6, 1, "", "__traceback__"], [72, 6, 1, "", "__weakref__"], [72, 6, 1, "", "args"], [72, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeNoComparatorError": [[73, 6, 1, "", "__cause__"], [73, 6, 1, "", "__context__"], [73, 2, 1, "", "__delattr__"], [73, 6, 1, "", "__dict__"], [73, 2, 1, "", "__getattribute__"], [73, 2, 1, "", "__init__"], [73, 6, 1, "", "__module__"], [73, 2, 1, "", "__new__"], [73, 2, 1, "", "__reduce__"], [73, 2, 1, "", "__repr__"], [73, 2, 1, "", "__setattr__"], [73, 2, 1, "", "__setstate__"], [73, 2, 1, "", "__str__"], [73, 6, 1, "", "__suppress_context__"], [73, 6, 1, "", "__traceback__"], [73, 6, 1, "", "__weakref__"], [73, 6, 1, "", "args"], [73, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeNoGenerationPathError": [[74, 6, 1, "", "__cause__"], [74, 6, 1, "", "__context__"], [74, 2, 1, "", "__delattr__"], [74, 6, 1, "", "__dict__"], [74, 2, 1, "", "__getattribute__"], [74, 2, 1, "", "__init__"], [74, 6, 1, "", "__module__"], [74, 2, 1, "", "__new__"], [74, 2, 1, "", "__reduce__"], [74, 2, 1, "", "__repr__"], [74, 2, 1, "", "__setattr__"], [74, 2, 1, "", "__setstate__"], [74, 2, 1, "", "__str__"], [74, 6, 1, "", "__suppress_context__"], [74, 6, 1, "", "__traceback__"], [74, 6, 1, "", "__weakref__"], [74, 6, 1, "", "args"], [74, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeObjdumpError": [[75, 6, 1, "", "__cause__"], [75, 6, 1, "", "__context__"], [75, 2, 1, "", "__delattr__"], [75, 6, 1, "", "__dict__"], [75, 2, 1, "", "__getattribute__"], [75, 2, 1, "", "__init__"], [75, 6, 1, "", "__module__"], [75, 2, 1, "", "__new__"], [75, 2, 1, "", "__reduce__"], [75, 2, 1, "", "__repr__"], [75, 2, 1, "", "__setattr__"], [75, 2, 1, "", "__setstate__"], [75, 2, 1, "", "__str__"], [75, 6, 1, "", "__suppress_context__"], [75, 6, 1, "", "__traceback__"], [75, 6, 1, "", "__weakref__"], [75, 6, 1, "", "args"], [75, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobePolicyError": [[76, 6, 1, "", "__cause__"], [76, 6, 1, "", "__context__"], [76, 2, 1, "", "__delattr__"], [76, 6, 1, "", "__dict__"], [76, 2, 1, "", "__getattribute__"], [76, 2, 1, "", "__init__"], [76, 6, 1, "", "__module__"], [76, 2, 1, "", "__new__"], [76, 2, 1, "", "__reduce__"], [76, 2, 1, "", "__repr__"], [76, 2, 1, "", "__setattr__"], [76, 2, 1, "", "__setstate__"], [76, 2, 1, "", "__str__"], [76, 6, 1, "", "__suppress_context__"], [76, 6, 1, "", "__traceback__"], [76, 6, 1, "", "__weakref__"], [76, 6, 1, "", "args"], [76, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeRunCmdError": [[77, 6, 1, "", "__cause__"], [77, 6, 1, "", "__context__"], [77, 2, 1, "", "__delattr__"], [77, 6, 1, "", "__dict__"], [77, 2, 1, "", "__getattribute__"], [77, 2, 1, "", "__init__"], [77, 6, 1, "", "__module__"], [77, 2, 1, "", "__new__"], [77, 2, 1, "", "__reduce__"], [77, 2, 1, "", "__repr__"], [77, 2, 1, "", "__setattr__"], [77, 2, 1, "", "__setstate__"], [77, 2, 1, "", "__str__"], [77, 6, 1, "", "__suppress_context__"], [77, 6, 1, "", "__traceback__"], [77, 6, 1, "", "__weakref__"], [77, 6, 1, "", "args"], [77, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeTargetDefinitionError": [[78, 6, 1, "", "__cause__"], [78, 6, 1, "", "__context__"], [78, 2, 1, "", "__delattr__"], [78, 6, 1, "", "__dict__"], [78, 2, 1, "", "__getattribute__"], [78, 2, 1, "", "__init__"], [78, 6, 1, "", "__module__"], [78, 2, 1, "", "__new__"], [78, 2, 1, "", "__reduce__"], [78, 2, 1, "", "__repr__"], [78, 2, 1, "", "__setattr__"], [78, 2, 1, "", "__setstate__"], [78, 2, 1, "", "__str__"], [78, 6, 1, "", "__suppress_context__"], [78, 6, 1, "", "__traceback__"], [78, 6, 1, "", "__weakref__"], [78, 6, 1, "", "args"], [78, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeTypeError": [[79, 6, 1, "", "__cause__"], [79, 6, 1, "", "__context__"], [79, 2, 1, "", "__delattr__"], [79, 6, 1, "", "__dict__"], [79, 2, 1, "", "__getattribute__"], [79, 2, 1, "", "__init__"], [79, 6, 1, "", "__module__"], [79, 2, 1, "", "__new__"], [79, 2, 1, "", "__reduce__"], [79, 2, 1, "", "__repr__"], [79, 2, 1, "", "__setattr__"], [79, 2, 1, "", "__setstate__"], [79, 2, 1, "", "__str__"], [79, 6, 1, "", "__suppress_context__"], [79, 6, 1, "", "__traceback__"], [79, 6, 1, "", "__weakref__"], [79, 6, 1, "", "args"], [79, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning": [[80, 6, 1, "", "__cause__"], [80, 6, 1, "", "__context__"], [80, 2, 1, "", "__delattr__"], [80, 6, 1, "", "__dict__"], [80, 2, 1, "", "__getattribute__"], [80, 2, 1, "", "__init__"], [80, 6, 1, "", "__module__"], [80, 2, 1, "", "__new__"], [80, 2, 1, "", "__reduce__"], [80, 2, 1, "", "__repr__"], [80, 2, 1, "", "__setattr__"], [80, 2, 1, "", "__setstate__"], [80, 2, 1, "", "__str__"], [80, 6, 1, "", "__suppress_context__"], [80, 6, 1, "", "__traceback__"], [80, 6, 1, "", "__weakref__"], [80, 6, 1, "", "args"], [80, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeValueError": [[81, 6, 1, "", "__cause__"], [81, 6, 1, "", "__context__"], [81, 2, 1, "", "__delattr__"], [81, 6, 1, "", "__dict__"], [81, 2, 1, "", "__getattribute__"], [81, 2, 1, "", "__init__"], [81, 6, 1, "", "__module__"], [81, 2, 1, "", "__new__"], [81, 2, 1, "", "__reduce__"], [81, 2, 1, "", "__repr__"], [81, 2, 1, "", "__setattr__"], [81, 2, 1, "", "__setstate__"], [81, 2, 1, "", "__str__"], [81, 6, 1, "", "__suppress_context__"], [81, 6, 1, "", "__traceback__"], [81, 6, 1, "", "__weakref__"], [81, 6, 1, "", "args"], [81, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeWarning": [[82, 6, 1, "", "__cause__"], [82, 6, 1, "", "__context__"], [82, 2, 1, "", "__delattr__"], [82, 6, 1, "", "__dict__"], [82, 2, 1, "", "__getattribute__"], [82, 2, 1, "", "__init__"], [82, 6, 1, "", "__module__"], [82, 2, 1, "", "__new__"], [82, 2, 1, "", "__reduce__"], [82, 2, 1, "", "__repr__"], [82, 2, 1, "", "__setattr__"], [82, 2, 1, "", "__setstate__"], [82, 2, 1, "", "__str__"], [82, 6, 1, "", "__suppress_context__"], [82, 6, 1, "", "__traceback__"], [82, 6, 1, "", "__weakref__"], [82, 6, 1, "", "args"], [82, 2, 1, "", "with_traceback"]], "microprobe.exceptions.MicroprobeYamlFormatError": [[83, 6, 1, "", "__cause__"], [83, 6, 1, "", "__context__"], [83, 2, 1, "", "__delattr__"], [83, 6, 1, "", "__dict__"], [83, 2, 1, "", "__getattribute__"], [83, 2, 1, "", "__init__"], [83, 6, 1, "", "__module__"], [83, 2, 1, "", "__new__"], [83, 2, 1, "", "__reduce__"], [83, 2, 1, "", "__repr__"], [83, 2, 1, "", "__setattr__"], [83, 2, 1, "", "__setstate__"], [83, 2, 1, "", "__str__"], [83, 6, 1, "", "__suppress_context__"], [83, 6, 1, "", "__traceback__"], [83, 6, 1, "", "__weakref__"], [83, 6, 1, "", "args"], [83, 2, 1, "", "with_traceback"]], "microprobe.model": [[85, 1, 1, "", "GenericModel"], [86, 0, 0, "-", "memory"]], "microprobe.model.GenericModel": [[85, 2, 1, "", "__init__"], [85, 3, 1, "", "description"], [85, 3, 1, "", "name"]], "microprobe.model.memory": [[87, 1, 1, "", "EndlessLoopDataMemoryModel"], [88, 1, 1, "", "EndlessLoopInstructionMemoryModel"]], "microprobe.model.memory.EndlessLoopDataMemoryModel": [[87, 2, 1, "", "__init__"], [87, 3, 1, "", "description"], [87, 2, 1, "", "finalize_model"], [87, 2, 1, "", "initialize_model"], [87, 3, 1, "", "name"]], "microprobe.model.memory.EndlessLoopInstructionMemoryModel": [[88, 2, 1, "", "__init__"], [88, 3, 1, "", "description"], [88, 3, 1, "", "name"]], "microprobe.passes": [[90, 1, 1, "", "Pass"], [91, 0, 0, "-", "address"], [94, 0, 0, "-", "branch"], [102, 0, 0, "-", "dat"], [105, 0, 0, "-", "decimal"], [107, 0, 0, "-", "float"], [109, 0, 0, "-", "ilp"], [113, 0, 0, "-", "initialization"], [122, 0, 0, "-", "instruction"], [139, 0, 0, "-", "memory"], [147, 0, 0, "-", "register"], [153, 0, 0, "-", "structure"], [156, 0, 0, "-", "symbol"], [159, 0, 0, "-", "variable"]], "microprobe.passes.Pass": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "check"], [90, 2, 1, "", "info"], [90, 2, 1, "", "report"], [90, 2, 1, "", "requires"]], "microprobe.passes.address": [[92, 1, 1, "", "SetInitAddressPass"], [93, 1, 1, "", "UpdateInstructionAddressesPass"]], "microprobe.passes.address.SetInitAddressPass": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "check"], [92, 2, 1, "", "info"], [92, 2, 1, "", "report"], [92, 2, 1, "", "requires"]], "microprobe.passes.address.UpdateInstructionAddressesPass": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "check"], [93, 2, 1, "", "info"], [93, 2, 1, "", "report"], [93, 2, 1, "", "requires"]], "microprobe.passes.branch": [[95, 1, 1, "", "BranchBraidNextPass"], [96, 1, 1, "", "BranchNextPass"], [97, 1, 1, "", "FixIndirectBranchPass"], [98, 1, 1, "", "InitializeBranchDecorator"], [99, 1, 1, "", "LinkBbls"], [100, 1, 1, "", "NormalizeBranchTargetsPass"], [101, 1, 1, "", "RandomizeByTypePass"]], "microprobe.passes.branch.BranchBraidNextPass": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "check"], [95, 2, 1, "", "info"], [95, 2, 1, "", "report"], [95, 2, 1, "", "requires"]], "microprobe.passes.branch.BranchNextPass": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "check"], [96, 2, 1, "", "info"], [96, 2, 1, "", "report"], [96, 2, 1, "", "requires"]], "microprobe.passes.branch.FixIndirectBranchPass": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "check"], [97, 2, 1, "", "check_branch"], [97, 2, 1, "", "info"], [97, 2, 1, "", "report"], [97, 2, 1, "", "requires"]], "microprobe.passes.branch.InitializeBranchDecorator": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "check"], [98, 2, 1, "", "info"], [98, 2, 1, "", "report"], [98, 2, 1, "", "requires"]], "microprobe.passes.branch.LinkBbls": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "check"], [99, 2, 1, "", "info"], [99, 2, 1, "", "report"], [99, 2, 1, "", "requires"]], "microprobe.passes.branch.NormalizeBranchTargetsPass": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "check"], [100, 2, 1, "", "info"], [100, 2, 1, "", "report"], [100, 2, 1, "", "requires"]], "microprobe.passes.branch.RandomizeByTypePass": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "check"], [101, 2, 1, "", "info"], [101, 2, 1, "", "report"], [101, 2, 1, "", "requires"]], "microprobe.passes.dat": [[103, 1, 1, "", "InitializeDATPass"], [104, 1, 1, "", "TranslateAddressPass"]], "microprobe.passes.dat.InitializeDATPass": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "check"], [103, 2, 1, "", "info"], [103, 2, 1, "", "report"], [103, 2, 1, "", "requires"]], "microprobe.passes.dat.TranslateAddressPass": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "check"], [104, 2, 1, "", "info"], [104, 2, 1, "", "report"], [104, 2, 1, "", "requires"]], "microprobe.passes.decimal": [[106, 1, 1, "", "InitializeMemoryDecimalPass"]], "microprobe.passes.decimal.InitializeMemoryDecimalPass": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "check"], [106, 2, 1, "", "info"], [106, 2, 1, "", "report"], [106, 2, 1, "", "requires"]], "microprobe.passes.float": [[108, 1, 1, "", "InitializeMemoryFloatPass"]], "microprobe.passes.float.InitializeMemoryFloatPass": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "check"], [108, 2, 1, "", "info"], [108, 2, 1, "", "report"], [108, 2, 1, "", "requires"]], "microprobe.passes.ilp": [[110, 1, 1, "", "AverageDependencyDistancePass"], [111, 1, 1, "", "ConstantDependencyDistancePass"], [112, 1, 1, "", "RandomDependencyDistancePass"]], "microprobe.passes.ilp.AverageDependencyDistancePass": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "check"], [110, 2, 1, "", "info"], [110, 2, 1, "", "report"], [110, 2, 1, "", "requires"]], "microprobe.passes.ilp.ConstantDependencyDistancePass": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "check"], [111, 2, 1, "", "info"], [111, 2, 1, "", "report"], [111, 2, 1, "", "requires"]], "microprobe.passes.ilp.RandomDependencyDistancePass": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "check"], [112, 2, 1, "", "info"], [112, 2, 1, "", "report"], [112, 2, 1, "", "requires"]], "microprobe.passes.initialization": [[114, 1, 1, "", "AddFinalizationAssemblyPass"], [115, 1, 1, "", "AddInitializationAssemblyPass"], [116, 1, 1, "", "AddInitializationInstructionsPass"], [117, 1, 1, "", "AutoAlignPass"], [118, 1, 1, "", "InitializeRegisterPass"], [119, 1, 1, "", "InitializeRegistersPass"], [120, 1, 1, "", "ReserveRegistersPass"], [121, 1, 1, "", "UnReserveRegistersPass"]], "microprobe.passes.initialization.AddFinalizationAssemblyPass": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "check"], [114, 2, 1, "", "info"], [114, 2, 1, "", "report"], [114, 2, 1, "", "requires"]], "microprobe.passes.initialization.AddInitializationAssemblyPass": [[115, 2, 1, "", "__init__"], [115, 2, 1, "", "check"], [115, 2, 1, "", "info"], [115, 2, 1, "", "report"], [115, 2, 1, "", "requires"]], "microprobe.passes.initialization.AddInitializationInstructionsPass": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "check"], [116, 2, 1, "", "info"], [116, 2, 1, "", "report"], [116, 2, 1, "", "requires"]], "microprobe.passes.initialization.AutoAlignPass": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "check"], [117, 2, 1, "", "info"], [117, 2, 1, "", "report"], [117, 2, 1, "", "requires"]], "microprobe.passes.initialization.InitializeRegisterPass": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "check"], [118, 2, 1, "", "info"], [118, 2, 1, "", "report"], [118, 2, 1, "", "requires"]], "microprobe.passes.initialization.InitializeRegistersPass": [[119, 2, 1, "", "__init__"], [119, 2, 1, "", "check"], [119, 2, 1, "", "info"], [119, 2, 1, "", "report"], [119, 2, 1, "", "requires"]], "microprobe.passes.initialization.ReserveRegistersPass": [[120, 2, 1, "", "__init__"], [120, 2, 1, "", "check"], [120, 2, 1, "", "info"], [120, 2, 1, "", "report"], [120, 2, 1, "", "requires"]], "microprobe.passes.initialization.UnReserveRegistersPass": [[121, 2, 1, "", "__init__"], [121, 2, 1, "", "check"], [121, 2, 1, "", "info"], [121, 2, 1, "", "report"], [121, 2, 1, "", "requires"]], "microprobe.passes.instruction": [[123, 1, 1, "", "AddAssemblyByIndexPass"], [124, 1, 1, "", "AddOnePass"], [125, 1, 1, "", "DIDTSimplePass"], [126, 1, 1, "", "DisableAsmByOpcodePass"], [127, 1, 1, "", "InsertInstructionSequencePass"], [128, 1, 1, "", "ReplaceInstructionByTypePass"], [129, 1, 1, "", "ReplaceLoadInstructionsPass"], [130, 1, 1, "", "ReproduceSequencePass"], [131, 1, 1, "", "SetInstructionOperandsByOpcodePass"], [132, 1, 1, "", "SetInstructionTypeByAlternatingSequencesPass"], [133, 1, 1, "", "SetInstructionTypeByElementPass"], [134, 1, 1, "", "SetInstructionTypeByProfilePass"], [135, 1, 1, "", "SetInstructionTypeByPropertyPass"], [136, 1, 1, "", "SetInstructionTypeBySequencePass"], [137, 1, 1, "", "SetInstructionTypePass"], [138, 1, 1, "", "SetRandomInstructionTypePass"]], "microprobe.passes.instruction.AddAssemblyByIndexPass": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "check"], [123, 2, 1, "", "info"], [123, 2, 1, "", "report"], [123, 2, 1, "", "requires"]], "microprobe.passes.instruction.AddOnePass": [[124, 2, 1, "", "__init__"], [124, 2, 1, "", "check"], [124, 2, 1, "", "info"], [124, 2, 1, "", "report"], [124, 2, 1, "", "requires"]], "microprobe.passes.instruction.DIDTSimplePass": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "check"], [125, 2, 1, "", "info"], [125, 2, 1, "", "report"], [125, 2, 1, "", "requires"]], "microprobe.passes.instruction.DisableAsmByOpcodePass": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "check"], [126, 2, 1, "", "info"], [126, 2, 1, "", "report"], [126, 2, 1, "", "requires"]], "microprobe.passes.instruction.InsertInstructionSequencePass": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "check"], [127, 2, 1, "", "info"], [127, 2, 1, "", "report"], [127, 2, 1, "", "requires"]], "microprobe.passes.instruction.ReplaceInstructionByTypePass": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "check"], [128, 2, 1, "", "info"], [128, 2, 1, "", "report"], [128, 2, 1, "", "requires"]], "microprobe.passes.instruction.ReplaceLoadInstructionsPass": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "check"], [129, 2, 1, "", "info"], [129, 2, 1, "", "report"], [129, 2, 1, "", "requires"]], "microprobe.passes.instruction.ReproduceSequencePass": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "check"], [130, 2, 1, "", "info"], [130, 2, 1, "", "report"], [130, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "check"], [131, 2, 1, "", "info"], [131, 2, 1, "", "report"], [131, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "check"], [132, 2, 1, "", "info"], [132, 2, 1, "", "report"], [132, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypeByElementPass": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "check"], [133, 2, 1, "", "info"], [133, 2, 1, "", "report"], [133, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypeByProfilePass": [[134, 2, 1, "", "__init__"], [134, 2, 1, "", "check"], [134, 2, 1, "", "info"], [134, 2, 1, "", "report"], [134, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypeByPropertyPass": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "check"], [135, 2, 1, "", "info"], [135, 2, 1, "", "report"], [135, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypeBySequencePass": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "check"], [136, 2, 1, "", "info"], [136, 2, 1, "", "report"], [136, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetInstructionTypePass": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "check"], [137, 2, 1, "", "info"], [137, 2, 1, "", "report"], [137, 2, 1, "", "requires"]], "microprobe.passes.instruction.SetRandomInstructionTypePass": [[138, 2, 1, "", "__init__"], [138, 2, 1, "", "check"], [138, 2, 1, "", "info"], [138, 2, 1, "", "report"], [138, 2, 1, "", "requires"]], "microprobe.passes.memory": [[140, 1, 1, "", "FixMemoryReferencesPass"], [141, 1, 1, "", "GenericMemoryModelPass"], [142, 1, 1, "", "GenericMemoryStreamsPass"], [143, 1, 1, "", "GenericOldMemoryModelPass"], [144, 1, 1, "", "InitializeMemoryDecorator"], [145, 1, 1, "", "SetMemoryOperandByOpcodePass"], [146, 1, 1, "", "SingleMemoryStreamPass"]], "microprobe.passes.memory.FixMemoryReferencesPass": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "check"], [140, 2, 1, "", "info"], [140, 2, 1, "", "report"], [140, 2, 1, "", "requires"]], "microprobe.passes.memory.GenericMemoryModelPass": [[141, 2, 1, "", "__init__"], [141, 2, 1, "", "check"], [141, 2, 1, "", "info"], [141, 2, 1, "", "report"], [141, 2, 1, "", "requires"]], "microprobe.passes.memory.GenericMemoryStreamsPass": [[142, 2, 1, "", "__init__"], [142, 2, 1, "", "check"], [142, 2, 1, "", "info"], [142, 2, 1, "", "report"], [142, 2, 1, "", "requires"]], "microprobe.passes.memory.GenericOldMemoryModelPass": [[143, 2, 1, "", "__init__"], [143, 2, 1, "", "check"], [143, 2, 1, "", "info"], [143, 2, 1, "", "report"], [143, 2, 1, "", "requires"]], "microprobe.passes.memory.InitializeMemoryDecorator": [[144, 2, 1, "", "__init__"], [144, 2, 1, "", "check"], [144, 2, 1, "", "info"], [144, 2, 1, "", "report"], [144, 2, 1, "", "requires"]], "microprobe.passes.memory.SetMemoryOperandByOpcodePass": [[145, 2, 1, "", "__init__"], [145, 2, 1, "", "check"], [145, 2, 1, "", "info"], [145, 2, 1, "", "report"], [145, 2, 1, "", "requires"]], "microprobe.passes.memory.SingleMemoryStreamPass": [[146, 2, 1, "", "__init__"], [146, 2, 1, "", "check"], [146, 2, 1, "", "info"], [146, 2, 1, "", "report"], [146, 2, 1, "", "requires"]], "microprobe.passes.register": [[148, 1, 1, "", "CycleMinimalAllocationPass"], [149, 1, 1, "", "DefaultRegisterAllocationPass"], [150, 1, 1, "", "FixRegistersPass"], [151, 1, 1, "", "NoHazardsAllocationPass"], [152, 1, 1, "", "RandomAllocationPass"]], "microprobe.passes.register.CycleMinimalAllocationPass": [[148, 2, 1, "", "__init__"], [148, 2, 1, "", "check"], [148, 2, 1, "", "info"], [148, 2, 1, "", "report"], [148, 2, 1, "", "requires"]], "microprobe.passes.register.DefaultRegisterAllocationPass": [[149, 2, 1, "", "__init__"], [149, 2, 1, "", "check"], [149, 2, 1, "", "info"], [149, 2, 1, "", "report"], [149, 2, 1, "", "requires"]], "microprobe.passes.register.FixRegistersPass": [[150, 2, 1, "", "__init__"], [150, 2, 1, "", "check"], [150, 2, 1, "", "info"], [150, 2, 1, "", "report"], [150, 2, 1, "", "requires"]], "microprobe.passes.register.NoHazardsAllocationPass": [[151, 2, 1, "", "__init__"], [151, 2, 1, "", "check"], [151, 2, 1, "", "info"], [151, 2, 1, "", "report"], [151, 2, 1, "", "requires"]], "microprobe.passes.register.RandomAllocationPass": [[152, 2, 1, "", "__init__"], [152, 2, 1, "", "check"], [152, 2, 1, "", "info"], [152, 2, 1, "", "report"], [152, 2, 1, "", "requires"]], "microprobe.passes.structure": [[154, 1, 1, "", "GenericCodeStructurePass"], [155, 1, 1, "", "SimpleBuildingBlockPass"]], "microprobe.passes.structure.GenericCodeStructurePass": [[154, 2, 1, "", "__init__"], [154, 2, 1, "", "check"], [154, 2, 1, "", "info"], [154, 2, 1, "", "report"], [154, 2, 1, "", "requires"]], "microprobe.passes.structure.SimpleBuildingBlockPass": [[155, 2, 1, "", "__init__"], [155, 2, 1, "", "check"], [155, 2, 1, "", "info"], [155, 2, 1, "", "report"], [155, 2, 1, "", "requires"]], "microprobe.passes.symbol": [[157, 1, 1, "", "ResolveSymbolicReferencesPass"], [158, 1, 1, "", "SetInstructionLabelByIndexPass"]], "microprobe.passes.symbol.ResolveSymbolicReferencesPass": [[157, 2, 1, "", "__init__"], [157, 2, 1, "", "check"], [157, 2, 1, "", "info"], [157, 2, 1, "", "report"], [157, 2, 1, "", "requires"]], "microprobe.passes.symbol.SetInstructionLabelByIndexPass": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "check"], [158, 2, 1, "", "info"], [158, 2, 1, "", "report"], [158, 2, 1, "", "requires"]], "microprobe.passes.variable": [[160, 1, 1, "", "DeclareVariablesPass"], [161, 1, 1, "", "UpdateVariableAddressesPass"]], "microprobe.passes.variable.DeclareVariablesPass": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "check"], [160, 2, 1, "", "info"], [160, 2, 1, "", "report"], [160, 2, 1, "", "requires"]], "microprobe.passes.variable.UpdateVariableAddressesPass": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "check"], [161, 2, 1, "", "info"], [161, 2, 1, "", "report"], [161, 2, 1, "", "requires"]], "microprobe.property": [[163, 1, 1, "", "Property"], [164, 1, 1, "", "PropertyHolder"], [162, 4, 1, "", "import_properties"], [162, 4, 1, "", "list_property_files"]], "microprobe.property.Property": [[163, 2, 1, "", "__init__"], [163, 3, 1, "", "default"], [163, 3, 1, "", "description"], [163, 3, 1, "", "name"], [163, 2, 1, "", "set_value"], [163, 3, 1, "", "value"]], "microprobe.property.PropertyHolder": [[164, 2, 1, "", "__init__"], [164, 2, 1, "", "list_properties"], [164, 3, 1, "", "properties"], [164, 2, 1, "", "register_property"], [164, 2, 1, "", "unregister_property"]], "microprobe.target": [[167, 1, 1, "", "Definition"], [168, 1, 1, "", "Target"], [169, 0, 0, "-", "env"], [166, 4, 1, "", "import_definition"], [172, 0, 0, "-", "isa"], [209, 0, 0, "-", "uarch"]], "microprobe.target.Definition": [[167, 2, 1, "", "__init__"], [167, 3, 1, "", "description"], [167, 3, 1, "", "filename"], [167, 3, 1, "", "name"]], "microprobe.target.Target": [[168, 2, 1, "", "__init__"], [168, 3, 1, "", "description"], [168, 3, 1, "", "environment"], [168, 2, 1, "", "full_report"], [168, 3, 1, "", "isa"], [168, 3, 1, "", "microarchitecture"], [168, 3, 1, "", "name"], [168, 2, 1, "", "property_isa_map"], [168, 3, 1, "", "reserved_registers"], [168, 2, 1, "", "set_env"], [168, 2, 1, "", "set_isa"], [168, 2, 1, "", "set_uarch"], [168, 2, 1, "", "set_wrapper"], [168, 3, 1, "", "wrapper"]], "microprobe.target.env": [[170, 1, 1, "", "Environment"], [171, 1, 1, "", "GenericEnvironment"], [169, 4, 1, "", "find_env_definitions"], [169, 4, 1, "", "import_env_definition"]], "microprobe.target.env.Environment": [[170, 2, 1, "", "__init__"], [170, 3, 1, "", "default_wrapper"], [170, 3, 1, "", "description"], [170, 2, 1, "", "elf_abi"], [170, 3, 1, "", "environment_reserved_registers"], [170, 2, 1, "", "full_report"], [170, 2, 1, "", "function_call"], [170, 2, 1, "", "function_return"], [170, 2, 1, "", "hook_after_reset_instructions"], [170, 2, 1, "", "hook_after_test_instructions"], [170, 2, 1, "", "hook_before_test_instructions"], [170, 2, 1, "", "hook_test_end_instructions"], [170, 2, 1, "", "hook_test_init_instructions"], [170, 3, 1, "", "isa"], [170, 2, 1, "", "list_properties"], [170, 3, 1, "", "little_endian"], [170, 3, 1, "", "name"], [170, 3, 1, "", "properties"], [170, 2, 1, "", "register_name"], [170, 2, 1, "", "register_property"], [170, 2, 1, "", "set_target"], [170, 2, 1, "", "set_threads"], [170, 3, 1, "", "stack_direction"], [170, 3, 1, "", "stack_pointer"], [170, 3, 1, "", "target"], [170, 3, 1, "", "threads"], [170, 2, 1, "", "unregister_property"], [170, 3, 1, "", "volatile_registers"]], "microprobe.target.env.GenericEnvironment": [[171, 2, 1, "", "__init__"], [171, 3, 1, "", "default_wrapper"], [171, 3, 1, "", "description"], [171, 2, 1, "", "elf_abi"], [171, 3, 1, "", "environment_reserved_registers"], [171, 2, 1, "", "full_report"], [171, 2, 1, "", "function_call"], [171, 2, 1, "", "function_return"], [171, 2, 1, "", "hook_after_reset_instructions"], [171, 2, 1, "", "hook_after_test_instructions"], [171, 2, 1, "", "hook_before_test_instructions"], [171, 2, 1, "", "hook_test_end_instructions"], [171, 2, 1, "", "hook_test_init_instructions"], [171, 3, 1, "", "isa"], [171, 2, 1, "", "list_properties"], [171, 3, 1, "", "little_endian"], [171, 3, 1, "", "name"], [171, 3, 1, "", "properties"], [171, 2, 1, "", "register_name"], [171, 2, 1, "", "register_property"], [171, 2, 1, "", "set_target"], [171, 2, 1, "", "set_threads"], [171, 3, 1, "", "stack_direction"], [171, 3, 1, "", "stack_pointer"], [171, 3, 1, "", "target"], [171, 3, 1, "", "threads"], [171, 2, 1, "", "unregister_property"], [171, 3, 1, "", "volatile_registers"]], "microprobe.target.isa": [[173, 1, 1, "", "GenericISA"], [174, 1, 1, "", "ISA"], [175, 0, 0, "-", "comparator"], [177, 0, 0, "-", "dat"], [172, 4, 1, "", "find_isa_definitions"], [181, 0, 0, "-", "generator"], [172, 4, 1, "", "import_isa_definition"], [183, 0, 0, "-", "instruction"], [186, 0, 0, "-", "instruction_field"], [189, 0, 0, "-", "instruction_format"], [192, 0, 0, "-", "operand"], [203, 0, 0, "-", "register"], [206, 0, 0, "-", "register_type"]], "microprobe.target.isa.GenericISA": [[173, 2, 1, "", "__init__"], [173, 2, 1, "", "add_to_register"], [173, 3, 1, "", "address_registers"], [173, 2, 1, "", "branch_to_itself"], [173, 2, 1, "", "branch_unconditional_relative"], [173, 2, 1, "", "compare_and_branch"], [173, 3, 1, "", "context_var"], [173, 3, 1, "", "control_registers"], [173, 3, 1, "", "description"], [173, 3, 1, "", "flag_registers"], [173, 3, 1, "", "float_registers"], [173, 2, 1, "", "full_report"], [173, 2, 1, "", "get_context"], [173, 2, 1, "", "get_dat"], [173, 2, 1, "", "get_register_for_address_arithmetic"], [173, 2, 1, "", "get_register_for_float_arithmetic"], [173, 3, 1, "", "instructions"], [173, 2, 1, "", "load"], [173, 2, 1, "", "load_float"], [173, 3, 1, "", "name"], [173, 2, 1, "", "negate_register"], [173, 2, 1, "", "new_instruction"], [173, 2, 1, "", "nop"], [173, 2, 1, "", "normalize_asm"], [173, 3, 1, "", "path"], [173, 2, 1, "", "randomize_register"], [173, 2, 1, "", "register_value_comparator"], [173, 3, 1, "", "registers"], [173, 3, 1, "", "scratch_registers"], [173, 3, 1, "", "scratch_var"], [173, 2, 1, "", "set_context"], [173, 2, 1, "", "set_register"], [173, 2, 1, "", "set_register_bits"], [173, 2, 1, "", "set_register_to_address"], [173, 2, 1, "", "set_target"], [173, 2, 1, "", "store_decimal"], [173, 2, 1, "", "store_float"], [173, 2, 1, "", "store_integer"], [173, 3, 1, "", "target"]], "microprobe.target.isa.ISA": [[174, 2, 1, "", "__init__"], [174, 2, 1, "", "add_to_register"], [174, 3, 1, "", "address_registers"], [174, 2, 1, "", "branch_to_itself"], [174, 2, 1, "", "branch_unconditional_relative"], [174, 2, 1, "", "compare_and_branch"], [174, 3, 1, "", "context_var"], [174, 3, 1, "", "control_registers"], [174, 3, 1, "", "description"], [174, 3, 1, "", "flag_registers"], [174, 3, 1, "", "float_registers"], [174, 2, 1, "", "full_report"], [174, 2, 1, "", "get_context"], [174, 2, 1, "", "get_dat"], [174, 2, 1, "", "get_register_for_address_arithmetic"], [174, 2, 1, "", "get_register_for_float_arithmetic"], [174, 3, 1, "", "instructions"], [174, 2, 1, "", "load"], [174, 2, 1, "", "load_float"], [174, 3, 1, "", "name"], [174, 2, 1, "", "negate_register"], [174, 2, 1, "", "new_instruction"], [174, 2, 1, "", "nop"], [174, 2, 1, "", "normalize_asm"], [174, 3, 1, "", "path"], [174, 2, 1, "", "randomize_register"], [174, 2, 1, "", "register_value_comparator"], [174, 3, 1, "", "registers"], [174, 3, 1, "", "scratch_registers"], [174, 3, 1, "", "scratch_var"], [174, 2, 1, "", "set_context"], [174, 2, 1, "", "set_register"], [174, 2, 1, "", "set_register_bits"], [174, 2, 1, "", "set_register_to_address"], [174, 2, 1, "", "set_target"], [174, 2, 1, "", "store_decimal"], [174, 2, 1, "", "store_float"], [174, 2, 1, "", "store_integer"], [174, 3, 1, "", "target"]], "microprobe.target.isa.comparator": [[176, 1, 1, "", "Comparator"], [175, 4, 1, "", "import_classes_from"]], "microprobe.target.isa.comparator.Comparator": [[176, 2, 1, "", "__init__"], [176, 3, 1, "", "arch"], [176, 2, 1, "", "check"], [176, 2, 1, "", "generate"], [176, 3, 1, "", "instr_name"]], "microprobe.target.isa.dat": [[178, 1, 1, "", "DATmap"], [179, 1, 1, "", "DynamicAddressTranslation"], [180, 1, 1, "", "GenericDynamicAddressTranslation"]], "microprobe.target.isa.dat.DATmap": [[178, 2, 1, "", "__init__"], [178, 2, 1, "", "address_in_map"], [178, 2, 1, "", "address_translate"], [178, 3, 1, "", "mask"], [178, 3, 1, "", "source"], [178, 3, 1, "", "target"]], "microprobe.target.isa.dat.DynamicAddressTranslation": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "add_mapping"], [179, 3, 1, "", "control"], [179, 2, 1, "", "copy"], [179, 3, 1, "", "maps"], [179, 2, 1, "", "raw_decorate"], [179, 2, 1, "", "raw_parse"], [179, 2, 1, "", "required_memory_values"], [179, 2, 1, "", "required_register_values"], [179, 2, 1, "", "translate"], [179, 2, 1, "", "update_dat"]], "microprobe.target.isa.dat.GenericDynamicAddressTranslation": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "add_mapping"], [180, 3, 1, "", "control"], [180, 2, 1, "", "copy"], [180, 3, 1, "", "maps"], [180, 2, 1, "", "raw_decorate"], [180, 2, 1, "", "raw_parse"], [180, 2, 1, "", "required_memory_values"], [180, 2, 1, "", "required_register_values"], [180, 2, 1, "", "translate"], [180, 2, 1, "", "update_dat"]], "microprobe.target.isa.generator": [[182, 1, 1, "", "Generator"], [181, 4, 1, "", "import_classes_from"]], "microprobe.target.isa.generator.Generator": [[182, 2, 1, "", "__init__"], [182, 3, 1, "", "alias"], [182, 3, 1, "", "arch"], [182, 2, 1, "", "check"], [182, 2, 1, "", "generate"], [182, 3, 1, "", "instr_name"]], "microprobe.target.isa.instruction": [[184, 1, 1, "", "GenericInstructionType"], [185, 1, 1, "", "InstructionType"], [183, 4, 1, "", "import_definition"], [183, 4, 1, "", "instruction_type_from_bin"]], "microprobe.target.isa.instruction.GenericInstructionType": [[184, 2, 1, "", "__init__"], [184, 2, 1, "", "assembly"], [184, 2, 1, "", "binary"], [184, 3, 1, "", "bit_mask"], [184, 3, 1, "", "description"], [184, 3, 1, "", "format"], [184, 2, 1, "", "full_report"], [184, 3, 1, "", "implicit_operands"], [184, 3, 1, "", "instruction_checks"], [184, 2, 1, "", "list_properties"], [184, 2, 1, "", "match"], [184, 3, 1, "", "memory_operand_descriptors"], [184, 3, 1, "", "mnemonic"], [184, 3, 1, "", "name"], [184, 3, 1, "", "opcode"], [184, 3, 1, "", "operand_descriptors"], [184, 3, 1, "", "operands"], [184, 3, 1, "", "properties"], [184, 2, 1, "", "register_property"], [184, 2, 1, "", "sets"], [184, 3, 1, "", "target_checks"], [184, 2, 1, "", "unregister_property"], [184, 2, 1, "", "uses"]], "microprobe.target.isa.instruction.InstructionType": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "assembly"], [185, 2, 1, "", "binary"], [185, 3, 1, "", "description"], [185, 3, 1, "", "format"], [185, 2, 1, "", "full_report"], [185, 3, 1, "", "implicit_operands"], [185, 3, 1, "", "instruction_checks"], [185, 2, 1, "", "list_properties"], [185, 3, 1, "", "memory_operand_descriptors"], [185, 3, 1, "", "mnemonic"], [185, 3, 1, "", "name"], [185, 3, 1, "", "opcode"], [185, 3, 1, "", "operand_descriptors"], [185, 3, 1, "", "operands"], [185, 3, 1, "", "properties"], [185, 2, 1, "", "register_property"], [185, 2, 1, "", "sets"], [185, 3, 1, "", "target_checks"], [185, 2, 1, "", "unregister_property"], [185, 2, 1, "", "uses"]], "microprobe.target.isa.instruction_field": [[187, 1, 1, "", "GenericInstructionField"], [188, 1, 1, "", "InstructionField"], [186, 4, 1, "", "import_definition"]], "microprobe.target.isa.instruction_field.GenericInstructionField": [[187, 2, 1, "", "__init__"], [187, 3, 1, "", "default_io"], [187, 3, 1, "", "default_operand"], [187, 3, 1, "", "default_show"], [187, 3, 1, "", "description"], [187, 3, 1, "", "name"], [187, 3, 1, "", "size"]], "microprobe.target.isa.instruction_field.InstructionField": [[188, 2, 1, "", "__init__"], [188, 3, 1, "", "default_io"], [188, 3, 1, "", "default_operand"], [188, 3, 1, "", "default_show"], [188, 3, 1, "", "description"], [188, 3, 1, "", "name"], [188, 3, 1, "", "size"]], "microprobe.target.isa.instruction_format": [[190, 1, 1, "", "GenericInstructionFormat"], [191, 1, 1, "", "InstructionFormat"], [189, 4, 1, "", "import_definition"]], "microprobe.target.isa.instruction_format.GenericInstructionFormat": [[190, 2, 1, "", "__init__"], [190, 3, 1, "", "assembly_format"], [190, 3, 1, "", "description"], [190, 3, 1, "", "fields"], [190, 2, 1, "", "flip_fields"], [190, 2, 1, "", "full_report"], [190, 2, 1, "", "get_field"], [190, 2, 1, "", "get_field_props"], [190, 2, 1, "", "get_fields"], [190, 2, 1, "", "get_findex"], [190, 2, 1, "", "get_operands"], [190, 3, 1, "", "length"], [190, 3, 1, "", "name"], [190, 2, 1, "", "set_fields"]], "microprobe.target.isa.instruction_format.InstructionFormat": [[191, 2, 1, "", "__init__"], [191, 3, 1, "", "assembly_format"], [191, 3, 1, "", "description"], [191, 3, 1, "", "fields"], [191, 2, 1, "", "flip_fields"], [191, 2, 1, "", "full_report"], [191, 2, 1, "", "get_field"], [191, 2, 1, "", "get_field_props"], [191, 2, 1, "", "get_fields"], [191, 2, 1, "", "get_findex"], [191, 2, 1, "", "get_operands"], [191, 3, 1, "", "name"], [191, 2, 1, "", "set_fields"]], "microprobe.target.isa.operand": [[193, 1, 1, "", "InstructionAddressRelativeOperand"], [194, 1, 1, "", "MemoryOperand"], [195, 1, 1, "", "MemoryOperandDescriptor"], [196, 1, 1, "", "Operand"], [197, 1, 1, "", "OperandConst"], [198, 1, 1, "", "OperandConstReg"], [199, 1, 1, "", "OperandDescriptor"], [200, 1, 1, "", "OperandImmRange"], [201, 1, 1, "", "OperandReg"], [202, 1, 1, "", "OperandValueSet"], [192, 4, 1, "", "import_definition"]], "microprobe.target.isa.operand.InstructionAddressRelativeOperand": [[193, 2, 1, "", "__init__"], [193, 2, 1, "", "access"], [193, 3, 1, "", "address_absolute"], [193, 3, 1, "", "address_base"], [193, 3, 1, "", "address_immediate"], [193, 3, 1, "", "address_index"], [193, 3, 1, "", "address_relative"], [193, 2, 1, "", "check"], [193, 2, 1, "", "codification"], [193, 3, 1, "", "constant"], [193, 2, 1, "", "copy"], [193, 3, 1, "", "description"], [193, 3, 1, "", "float"], [193, 3, 1, "", "immediate"], [193, 3, 1, "", "name"], [193, 2, 1, "", "random_value"], [193, 2, 1, "", "representation"], [193, 2, 1, "", "set_valid_values"], [193, 3, 1, "", "shift"], [193, 2, 1, "", "values"], [193, 3, 1, "", "vector"]], "microprobe.target.isa.operand.MemoryOperand": [[194, 2, 1, "", "__init__"], [194, 3, 1, "", "address_operands"], [194, 2, 1, "", "full_report"], [194, 3, 1, "", "length_operands"]], "microprobe.target.isa.operand.MemoryOperandDescriptor": [[195, 2, 1, "", "__init__"], [195, 3, 1, "", "bit_rate"], [195, 2, 1, "", "full_report"], [195, 3, 1, "", "is_agen"], [195, 3, 1, "", "is_branch_target"], [195, 3, 1, "", "is_load"], [195, 3, 1, "", "is_prefetch"], [195, 3, 1, "", "is_store"], [195, 3, 1, "", "type"]], "microprobe.target.isa.operand.Operand": [[196, 2, 1, "", "__init__"], [196, 2, 1, "", "access"], [196, 3, 1, "", "address_absolute"], [196, 3, 1, "", "address_base"], [196, 3, 1, "", "address_immediate"], [196, 3, 1, "", "address_index"], [196, 3, 1, "", "address_relative"], [196, 2, 1, "", "check"], [196, 2, 1, "", "codification"], [196, 3, 1, "", "constant"], [196, 2, 1, "", "copy"], [196, 3, 1, "", "description"], [196, 3, 1, "", "float"], [196, 3, 1, "", "immediate"], [196, 3, 1, "", "name"], [196, 2, 1, "", "random_value"], [196, 2, 1, "", "representation"], [196, 2, 1, "", "set_valid_values"], [196, 2, 1, "", "values"], [196, 3, 1, "", "vector"]], "microprobe.target.isa.operand.OperandConst": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "access"], [197, 3, 1, "", "address_absolute"], [197, 3, 1, "", "address_base"], [197, 3, 1, "", "address_immediate"], [197, 3, 1, "", "address_index"], [197, 3, 1, "", "address_relative"], [197, 2, 1, "", "check"], [197, 2, 1, "", "codification"], [197, 3, 1, "", "constant"], [197, 2, 1, "", "copy"], [197, 3, 1, "", "description"], [197, 3, 1, "", "float"], [197, 3, 1, "", "immediate"], [197, 3, 1, "", "min"], [197, 3, 1, "", "name"], [197, 2, 1, "", "random_value"], [197, 2, 1, "", "representation"], [197, 2, 1, "", "set_valid_values"], [197, 3, 1, "", "shift"], [197, 2, 1, "", "values"], [197, 3, 1, "", "vector"]], "microprobe.target.isa.operand.OperandConstReg": [[198, 2, 1, "", "__init__"], [198, 2, 1, "", "access"], [198, 3, 1, "", "address_absolute"], [198, 3, 1, "", "address_base"], [198, 3, 1, "", "address_immediate"], [198, 3, 1, "", "address_index"], [198, 3, 1, "", "address_relative"], [198, 2, 1, "", "check"], [198, 2, 1, "", "codification"], [198, 3, 1, "", "constant"], [198, 2, 1, "", "copy"], [198, 3, 1, "", "description"], [198, 3, 1, "", "float"], [198, 3, 1, "", "immediate"], [198, 3, 1, "", "name"], [198, 2, 1, "", "random_value"], [198, 2, 1, "", "representation"], [198, 2, 1, "", "set_valid_values"], [198, 2, 1, "", "values"], [198, 3, 1, "", "vector"]], "microprobe.target.isa.operand.OperandDescriptor": [[199, 2, 1, "", "__init__"], [199, 2, 1, "", "copy"], [199, 3, 1, "", "is_input"], [199, 3, 1, "", "is_output"], [199, 2, 1, "", "set_type"], [199, 3, 1, "", "type"]], "microprobe.target.isa.operand.OperandImmRange": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "access"], [200, 3, 1, "", "add"], [200, 3, 1, "", "address_absolute"], [200, 3, 1, "", "address_base"], [200, 3, 1, "", "address_immediate"], [200, 3, 1, "", "address_index"], [200, 3, 1, "", "address_relative"], [200, 2, 1, "", "check"], [200, 2, 1, "", "codification"], [200, 3, 1, "", "constant"], [200, 2, 1, "", "copy"], [200, 3, 1, "", "description"], [200, 3, 1, "", "float"], [200, 3, 1, "", "immediate"], [200, 3, 1, "", "max"], [200, 3, 1, "", "min"], [200, 3, 1, "", "name"], [200, 2, 1, "", "random_value"], [200, 2, 1, "", "representation"], [200, 2, 1, "", "set_valid_values"], [200, 3, 1, "", "shift"], [200, 3, 1, "", "step"], [200, 2, 1, "", "values"], [200, 3, 1, "", "vector"]], "microprobe.target.isa.operand.OperandReg": [[201, 2, 1, "", "__init__"], [201, 2, 1, "", "access"], [201, 3, 1, "", "address_absolute"], [201, 3, 1, "", "address_base"], [201, 3, 1, "", "address_immediate"], [201, 3, 1, "", "address_index"], [201, 3, 1, "", "address_relative"], [201, 2, 1, "", "check"], [201, 2, 1, "", "codification"], [201, 3, 1, "", "constant"], [201, 2, 1, "", "copy"], [201, 3, 1, "", "description"], [201, 3, 1, "", "float"], [201, 3, 1, "", "immediate"], [201, 3, 1, "", "name"], [201, 2, 1, "", "random_value"], [201, 2, 1, "", "representation"], [201, 2, 1, "", "set_valid_values"], [201, 2, 1, "", "values"], [201, 3, 1, "", "vector"]], "microprobe.target.isa.operand.OperandValueSet": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "access"], [202, 3, 1, "", "address_absolute"], [202, 3, 1, "", "address_base"], [202, 3, 1, "", "address_immediate"], [202, 3, 1, "", "address_index"], [202, 3, 1, "", "address_relative"], [202, 2, 1, "", "check"], [202, 2, 1, "", "codification"], [202, 3, 1, "", "constant"], [202, 2, 1, "", "copy"], [202, 3, 1, "", "description"], [202, 3, 1, "", "float"], [202, 3, 1, "", "immediate"], [202, 3, 1, "", "min"], [202, 3, 1, "", "name"], [202, 2, 1, "", "random_value"], [202, 2, 1, "", "representation"], [202, 2, 1, "", "set_valid_values"], [202, 3, 1, "", "shift"], [202, 2, 1, "", "values"], [202, 3, 1, "", "vector"]], "microprobe.target.isa.register": [[204, 1, 1, "", "GenericRegister"], [205, 1, 1, "", "Register"], [203, 4, 1, "", "import_definition"]], "microprobe.target.isa.register.GenericRegister": [[204, 2, 1, "", "__init__"], [204, 3, 1, "", "codification"], [204, 3, 1, "", "description"], [204, 3, 1, "", "name"], [204, 3, 1, "", "representation"], [204, 3, 1, "", "type"]], "microprobe.target.isa.register.Register": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "codification"], [205, 3, 1, "", "description"], [205, 3, 1, "", "name"], [205, 2, 1, "", "representation"], [205, 3, 1, "", "type"]], "microprobe.target.isa.register_type": [[207, 1, 1, "", "GenericRegisterType"], [208, 1, 1, "", "RegisterType"], [206, 4, 1, "", "import_definition"]], "microprobe.target.isa.register_type.GenericRegisterType": [[207, 2, 1, "", "__init__"], [207, 3, 1, "", "description"], [207, 3, 1, "", "name"], [207, 3, 1, "", "size"], [207, 3, 1, "", "used_for_address_arithmetic"], [207, 3, 1, "", "used_for_float_arithmetic"], [207, 3, 1, "", "used_for_vector_arithmetic"]], "microprobe.target.isa.register_type.RegisterType": [[208, 2, 1, "", "__init__"], [208, 3, 1, "", "description"], [208, 3, 1, "", "name"], [208, 3, 1, "", "size"], [208, 3, 1, "", "used_for_address_arithmetic"], [208, 3, 1, "", "used_for_float_arithmetic"], [208, 3, 1, "", "used_for_vector_arithmetic"]], "microprobe.target.uarch": [[210, 1, 1, "", "GenericCPUMicroarchitecture"], [211, 1, 1, "", "GenericMicroarchitecture"], [212, 1, 1, "", "Microarchitecture"], [213, 0, 0, "-", "cache"], [217, 0, 0, "-", "element"], [220, 0, 0, "-", "element_type"], [209, 4, 1, "", "find_microarchitecture_definitions"], [209, 4, 1, "", "import_microarchitecture_definition"]], "microprobe.target.uarch.GenericCPUMicroarchitecture": [[210, 2, 1, "", "__init__"], [210, 2, 1, "", "add_properties_to_isa"], [210, 3, 1, "", "cache_hierarchy"], [210, 3, 1, "", "description"], [210, 3, 1, "", "elements"], [210, 2, 1, "", "full_report"], [210, 2, 1, "", "list_properties"], [210, 3, 1, "", "name"], [210, 3, 1, "", "properties"], [210, 2, 1, "", "register_property"], [210, 2, 1, "", "set_target"], [210, 3, 1, "", "target"], [210, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.GenericMicroarchitecture": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "add_properties_to_isa"], [211, 3, 1, "", "description"], [211, 3, 1, "", "elements"], [211, 2, 1, "", "full_report"], [211, 2, 1, "", "list_properties"], [211, 3, 1, "", "name"], [211, 3, 1, "", "properties"], [211, 2, 1, "", "register_property"], [211, 2, 1, "", "set_target"], [211, 3, 1, "", "target"], [211, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.Microarchitecture": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "add_properties_to_isa"], [212, 3, 1, "", "description"], [212, 3, 1, "", "elements"], [212, 2, 1, "", "full_report"], [212, 2, 1, "", "list_properties"], [212, 3, 1, "", "name"], [212, 3, 1, "", "properties"], [212, 2, 1, "", "register_property"], [212, 2, 1, "", "set_target"], [212, 3, 1, "", "target"], [212, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.cache": [[214, 1, 1, "", "Cache"], [215, 1, 1, "", "CacheHierarchy"], [216, 1, 1, "", "SetAssociativeCache"], [213, 4, 1, "", "cache_hierarchy_from_elements"]], "microprobe.target.uarch.cache.Cache": [[214, 2, 1, "", "__init__"], [214, 3, 1, "", "contains_data"], [214, 3, 1, "", "contains_instructions"], [214, 3, 1, "", "description"], [214, 3, 1, "", "element"], [214, 3, 1, "", "level"], [214, 3, 1, "", "line_size"], [214, 3, 1, "", "name"], [214, 3, 1, "", "size"]], "microprobe.target.uarch.cache.CacheHierarchy": [[215, 2, 1, "", "__init__"], [215, 2, 1, "", "data_linesize"], [215, 2, 1, "", "get_data_hierarchy_from_element"], [215, 2, 1, "", "get_instruction_hierarchy_from_element"]], "microprobe.target.uarch.cache.SetAssociativeCache": [[216, 2, 1, "", "__init__"], [216, 3, 1, "", "bits_x_lines"], [216, 3, 1, "", "bits_x_offset"], [216, 3, 1, "", "bits_x_set"], [216, 2, 1, "", "congruence_class"], [216, 3, 1, "", "contains_data"], [216, 3, 1, "", "contains_instructions"], [216, 3, 1, "", "description"], [216, 3, 1, "", "element"], [216, 3, 1, "", "level"], [216, 3, 1, "", "line_size"], [216, 2, 1, "", "lines"], [216, 3, 1, "", "name"], [216, 2, 1, "", "offset"], [216, 3, 1, "", "offset_bits"], [216, 2, 1, "", "print_info"], [216, 3, 1, "", "set_ways_bits"], [216, 2, 1, "", "sets"], [216, 2, 1, "", "setsways"], [216, 3, 1, "", "size"], [216, 3, 1, "", "ways"]], "microprobe.target.uarch.element": [[218, 1, 1, "", "GenericMicroarchitectureElement"], [219, 1, 1, "", "MicroarchitectureElement"], [217, 4, 1, "", "import_definition"]], "microprobe.target.uarch.element.GenericMicroarchitectureElement": [[218, 2, 1, "", "__init__"], [218, 2, 1, "", "closest_common_element"], [218, 3, 1, "", "depth"], [218, 3, 1, "", "description"], [218, 3, 1, "", "full_name"], [218, 2, 1, "", "list_properties"], [218, 3, 1, "", "name"], [218, 3, 1, "", "parent"], [218, 3, 1, "", "parents"], [218, 3, 1, "", "properties"], [218, 2, 1, "", "register_property"], [218, 2, 1, "", "set_parent_element"], [218, 2, 1, "", "set_subelements"], [218, 3, 1, "", "subelements"], [218, 3, 1, "", "type"], [218, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.element.MicroarchitectureElement": [[219, 2, 1, "", "__init__"], [219, 2, 1, "", "closest_common_element"], [219, 3, 1, "", "depth"], [219, 3, 1, "", "description"], [219, 3, 1, "", "full_name"], [219, 2, 1, "", "list_properties"], [219, 3, 1, "", "name"], [219, 3, 1, "", "parent"], [219, 3, 1, "", "parents"], [219, 3, 1, "", "properties"], [219, 2, 1, "", "register_property"], [219, 2, 1, "", "set_parent_element"], [219, 2, 1, "", "set_subelements"], [219, 3, 1, "", "subelements"], [219, 3, 1, "", "type"], [219, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.element_type": [[221, 1, 1, "", "GenericMicroarchitectureElementType"], [222, 1, 1, "", "MicroarchitectureElementType"], [220, 4, 1, "", "import_definition"]], "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType": [[221, 2, 1, "", "__init__"], [221, 3, 1, "", "description"], [221, 2, 1, "", "list_properties"], [221, 3, 1, "", "name"], [221, 3, 1, "", "properties"], [221, 2, 1, "", "register_property"], [221, 2, 1, "", "unregister_property"]], "microprobe.target.uarch.element_type.MicroarchitectureElementType": [[222, 2, 1, "", "__init__"], [222, 3, 1, "", "description"], [222, 2, 1, "", "list_properties"], [222, 3, 1, "", "name"], [222, 3, 1, "", "properties"], [222, 2, 1, "", "register_property"], [222, 2, 1, "", "unregister_property"]], "microprobe.utils": [[224, 0, 0, "-", "asm"], [226, 0, 0, "-", "bin"], [228, 0, 0, "-", "cache"], [229, 0, 0, "-", "cmdline"], [234, 0, 0, "-", "config"], [238, 0, 0, "-", "distrib"], [240, 0, 0, "-", "ieee"], [241, 0, 0, "-", "imp"], [242, 0, 0, "-", "info"], [243, 0, 0, "-", "logger"], [244, 0, 0, "-", "misc"], [249, 0, 0, "-", "mpt"], [259, 0, 0, "-", "profile"], [260, 0, 0, "-", "yaml"]], "microprobe.utils.asm": [[225, 1, 1, "", "MicroprobeAsmInstructionDefinition"], [224, 4, 1, "", "instruction_to_asm_definition"], [224, 4, 1, "", "interpret_asm"]], "microprobe.utils.asm.MicroprobeAsmInstructionDefinition": [[225, 2, 1, "", "__init__"]], "microprobe.utils.bin": [[227, 1, 1, "", "MicroprobeBinInstructionStream"], [226, 4, 1, "", "interpret_bin"]], "microprobe.utils.bin.MicroprobeBinInstructionStream": [[227, 2, 1, "", "__init__"], [227, 2, 1, "", "decode_next"], [227, 2, 1, "", "empty"], [227, 3, 1, "", "lengths"], [227, 2, 1, "", "skip"], [227, 2, 1, "", "skip_all"]], "microprobe.utils.cache": [[228, 4, 1, "", "cache_file"], [228, 4, 1, "", "read_cache_data"], [228, 4, 1, "", "read_default_cache_data"], [228, 4, 1, "", "rm_cache_data"], [228, 4, 1, "", "rm_default_cache_data"], [228, 4, 1, "", "update_cache_needed"], [228, 4, 1, "", "write_cache_data"], [228, 4, 1, "", "write_default_cache_data"], [228, 4, 1, "", "write_default_cache_data_silent"]], "microprobe.utils.cmdline": [[230, 1, 1, "", "CLI"], [231, 5, 1, "", "LazyArgumentError"], [232, 1, 1, "", "LazyArgumentParser"], [233, 1, 1, "", "ParagraphFormatterML"], [229, 4, 1, "", "csv_with_integer"], [229, 4, 1, "", "csv_with_ranges"], [229, 4, 1, "", "dict_key"], [229, 4, 1, "", "existing_cmd"], [229, 4, 1, "", "existing_dir"], [229, 4, 1, "", "existing_file"], [229, 4, 1, "", "existing_file_ext"], [229, 4, 1, "", "file_with"], [229, 4, 1, "", "float_range"], [229, 4, 1, "", "float_type"], [229, 4, 1, "", "int_range"], [229, 4, 1, "", "int_type"], [229, 4, 1, "", "new_file"], [229, 4, 1, "", "new_file_ext"], [229, 4, 1, "", "parse_instruction_list"], [229, 4, 1, "", "print_error"], [229, 4, 1, "", "print_info"], [229, 4, 1, "", "print_warning"], [229, 4, 1, "", "string_with_chars"], [229, 4, 1, "", "string_with_fields"]], "microprobe.utils.cmdline.CLI": [[230, 2, 1, "", "__init__"], [230, 2, 1, "", "add_description"], [230, 2, 1, "", "add_epilog"], [230, 2, 1, "", "add_flag"], [230, 2, 1, "", "add_group"], [230, 2, 1, "", "add_option"], [230, 3, 1, "", "arg_parser"], [230, 3, 1, "", "arguments"], [230, 2, 1, "", "get"], [230, 2, 1, "", "main"], [230, 2, 1, "", "save"]], "microprobe.utils.cmdline.LazyArgumentError": [[231, 6, 1, "", "__cause__"], [231, 6, 1, "", "__context__"], [231, 2, 1, "", "__delattr__"], [231, 6, 1, "", "__dict__"], [231, 2, 1, "", "__getattribute__"], [231, 2, 1, "", "__init__"], [231, 6, 1, "", "__module__"], [231, 2, 1, "", "__new__"], [231, 2, 1, "", "__reduce__"], [231, 2, 1, "", "__repr__"], [231, 2, 1, "", "__setattr__"], [231, 2, 1, "", "__setstate__"], [231, 2, 1, "", "__str__"], [231, 6, 1, "", "__suppress_context__"], [231, 6, 1, "", "__traceback__"], [231, 6, 1, "", "__weakref__"], [231, 6, 1, "", "args"], [231, 2, 1, "", "with_traceback"]], "microprobe.utils.cmdline.LazyArgumentParser": [[232, 2, 1, "", "__init__"], [232, 2, 1, "", "add_argument"], [232, 2, 1, "", "add_argument_group"], [232, 2, 1, "", "add_mutually_exclusive_group"], [232, 2, 1, "", "add_subparsers"], [232, 2, 1, "", "check_argument_errors"], [232, 2, 1, "", "convert_arg_line_to_args"], [232, 2, 1, "", "error"], [232, 2, 1, "", "exit"], [232, 2, 1, "", "force_error"], [232, 2, 1, "", "format_help"], [232, 2, 1, "", "format_usage"], [232, 2, 1, "", "get_default"], [232, 2, 1, "", "parse_args"], [232, 2, 1, "", "parse_intermixed_args"], [232, 2, 1, "", "parse_known_args"], [232, 2, 1, "", "parse_known_intermixed_args"], [232, 2, 1, "", "print_help"], [232, 2, 1, "", "print_usage"], [232, 2, 1, "", "register"], [232, 2, 1, "", "set_defaults"]], "microprobe.utils.cmdline.ParagraphFormatterML": [[233, 2, 1, "", "__init__"], [233, 2, 1, "", "add_argument"], [233, 2, 1, "", "add_arguments"], [233, 2, 1, "", "add_text"], [233, 2, 1, "", "add_usage"], [233, 2, 1, "", "end_section"], [233, 2, 1, "", "format_help"], [233, 2, 1, "", "start_section"]], "microprobe.utils.config": [[235, 1, 1, "", "DuplicateConfigParser"], [236, 1, 1, "", "MicroprobeConfiguration"], [237, 1, 1, "", "MicroprobeDefaultConfiguration"]], "microprobe.utils.config.DuplicateConfigParser": [[235, 6, 1, "", "BOOLEAN_STATES"], [235, 6, 1, "", "NONSPACECRE"], [235, 6, 1, "", "OPTCRE"], [235, 6, 1, "", "OPTCRE_NV"], [235, 6, 1, "", "SECTCRE"], [235, 2, 1, "", "__init__"], [235, 2, 1, "", "add_section"], [235, 2, 1, "", "clear"], [235, 3, 1, "", "converters"], [235, 2, 1, "", "defaults"], [235, 2, 1, "", "get"], [235, 2, 1, "", "getboolean"], [235, 2, 1, "", "getfloat"], [235, 2, 1, "", "getint"], [235, 2, 1, "", "has_option"], [235, 2, 1, "", "has_section"], [235, 2, 1, "", "items"], [235, 2, 1, "", "keys"], [235, 2, 1, "", "options"], [235, 2, 1, "", "optionxform"], [235, 2, 1, "", "pop"], [235, 2, 1, "", "popitem"], [235, 2, 1, "", "read"], [235, 2, 1, "", "read_dict"], [235, 2, 1, "", "read_file"], [235, 2, 1, "", "read_string"], [235, 2, 1, "", "readfp"], [235, 2, 1, "", "remove_option"], [235, 2, 1, "", "remove_section"], [235, 2, 1, "", "sections"], [235, 2, 1, "", "set"], [235, 2, 1, "", "setdefault"], [235, 2, 1, "", "update"], [235, 2, 1, "", "values"], [235, 2, 1, "", "write"]], "microprobe.utils.config.MicroprobeConfiguration": [[236, 2, 1, "", "__init__"], [236, 2, 1, "", "clear"], [236, 2, 1, "", "copy"], [236, 2, 1, "", "fromkeys"], [236, 2, 1, "", "get"], [236, 2, 1, "", "items"], [236, 2, 1, "", "keys"], [236, 2, 1, "", "pop"], [236, 2, 1, "", "popitem"], [236, 2, 1, "", "setdefault"], [236, 2, 1, "", "update"], [236, 2, 1, "", "values"]], "microprobe.utils.config.MicroprobeDefaultConfiguration": [[237, 2, 1, "", "__init__"], [237, 2, 1, "", "clear"], [237, 2, 1, "", "copy"], [237, 2, 1, "", "fromkeys"], [237, 2, 1, "", "get"], [237, 2, 1, "", "items"], [237, 2, 1, "", "keys"], [237, 2, 1, "", "pop"], [237, 2, 1, "", "popitem"], [237, 2, 1, "", "setdefault"], [237, 2, 1, "", "update"], [237, 2, 1, "", "values"]], "microprobe.utils.distrib": [[239, 1, 1, "", "Choice"], [238, 4, 1, "", "average"], [238, 4, 1, "", "compute_weighted_profile_average"], [238, 4, 1, "", "discrete_average"], [238, 4, 1, "", "generate_plain_profile"], [238, 4, 1, "", "generate_weighted_profile"], [238, 4, 1, "", "locality"], [238, 4, 1, "", "probability"], [238, 4, 1, "", "pstdev"], [238, 4, 1, "", "regular_probability"], [238, 4, 1, "", "regular_seq"], [238, 4, 1, "", "shuffle"], [238, 4, 1, "", "sort_by_distance"], [238, 4, 1, "", "sort_by_usage"], [238, 4, 1, "", "weighted_choice"]], "microprobe.utils.distrib.Choice": [[239, 2, 1, "", "__init__"]], "microprobe.utils.ieee": [[240, 4, 1, "", "float_to_nnp_data_type_1"], [240, 4, 1, "", "ieee_float_to_int64"]], "microprobe.utils.imp": [[241, 4, 1, "", "find_subclasses"], [241, 4, 1, "", "get_all_subclasses"], [241, 4, 1, "", "get_attr_from_module"], [241, 4, 1, "", "get_dict_from_module"], [241, 4, 1, "", "get_object_from_module"], [241, 4, 1, "", "import_cls_definition"], [241, 4, 1, "", "import_definition"], [241, 4, 1, "", "import_operand_definition"], [241, 4, 1, "", "load_source"]], "microprobe.utils.logger": [[243, 4, 1, "", "get_logger"], [243, 4, 1, "", "set_log_level"]], "microprobe.utils.misc": [[245, 1, 1, "", "Pickable"], [246, 1, 1, "", "Progress"], [244, 4, 1, "", "RNDFP"], [244, 4, 1, "", "RNDINT"], [247, 1, 1, "", "RejectingDict"], [248, 1, 1, "", "RejectingOrderedDict"], [244, 4, 1, "", "closest_divisor"], [244, 4, 1, "", "compress_file"], [244, 4, 1, "", "dict2OrderedDict"], [244, 4, 1, "", "findfiles"], [244, 4, 1, "", "getnextf"], [244, 4, 1, "", "int_to_twocs"], [244, 4, 1, "", "iter_flatten"], [244, 4, 1, "", "longest_common_substr"], [244, 4, 1, "", "move_file"], [244, 4, 1, "", "natural_sort"], [244, 4, 1, "", "open_generic_fd"], [244, 4, 1, "", "primes"], [244, 4, 1, "", "range_to_sequence"], [244, 4, 1, "", "range_to_sequence_float"], [244, 4, 1, "", "shift_with_sign"], [244, 4, 1, "", "smart_copy_dict"], [244, 4, 1, "", "twocs_to_int"], [244, 4, 1, "", "which"]], "microprobe.utils.misc.Pickable": [[245, 2, 1, "", "__init__"]], "microprobe.utils.misc.Progress": [[246, 2, 1, "", "__init__"]], "microprobe.utils.misc.RejectingDict": [[247, 2, 1, "", "__init__"], [247, 2, 1, "", "clear"], [247, 2, 1, "", "copy"], [247, 2, 1, "", "fromkeys"], [247, 2, 1, "", "get"], [247, 2, 1, "", "items"], [247, 2, 1, "", "keys"], [247, 2, 1, "", "pop"], [247, 2, 1, "", "popitem"], [247, 2, 1, "", "setdefault"], [247, 2, 1, "", "update"], [247, 2, 1, "", "values"]], "microprobe.utils.misc.RejectingOrderedDict": [[248, 2, 1, "", "__init__"], [248, 2, 1, "", "clear"], [248, 2, 1, "", "copy"], [248, 2, 1, "", "fromkeys"], [248, 2, 1, "", "get"], [248, 2, 1, "", "items"], [248, 2, 1, "", "keys"], [248, 2, 1, "", "move_to_end"], [248, 2, 1, "", "pop"], [248, 2, 1, "", "popitem"], [248, 2, 1, "", "setdefault"], [248, 2, 1, "", "update"], [248, 2, 1, "", "values"]], "microprobe.utils.mpt": [[250, 1, 1, "", "MicroprobeTestDefinition"], [251, 1, 1, "", "MicroprobeTestDefinitionDefault"], [252, 1, 1, "", "MicroprobeTestDefinitionV0x5"], [253, 1, 1, "", "MicroprobeTestMemoryAccessDefinition"], [254, 1, 1, "", "MicroprobeTestParser"], [255, 1, 1, "", "MicroprobeTestParserDefault"], [256, 1, 1, "", "MicroprobeTestParserV0x5"], [257, 1, 1, "", "MicroprobeTestRegisterDefinition"], [258, 1, 1, "", "MicroprobeTestVariableDefinition"], [249, 4, 1, "", "mpt_configuration_factory"], [249, 4, 1, "", "mpt_parser_factory"], [249, 4, 1, "", "mpt_shift"], [249, 4, 1, "", "variable_to_test_definition"]], "microprobe.utils.mpt.MicroprobeTestDefinition": [[250, 2, 1, "", "__init__"], [250, 3, 1, "", "code"], [250, 3, 1, "", "cycle_count"], [250, 3, 1, "", "dat_mappings"], [250, 3, 1, "", "dat_properties"], [250, 3, 1, "", "default_code_address"], [250, 3, 1, "", "default_data_address"], [250, 3, 1, "", "instruction_count"], [250, 3, 1, "", "raw"], [250, 2, 1, "", "register_dat_mapping"], [250, 2, 1, "", "register_dat_property"], [250, 2, 1, "", "register_instruction_definitions"], [250, 2, 1, "", "register_raw_definition"], [250, 2, 1, "", "register_register_definition"], [250, 2, 1, "", "register_variable_definition"], [250, 3, 1, "", "registers"], [250, 3, 1, "", "roi_cyc"], [250, 3, 1, "", "roi_ins"], [250, 3, 1, "", "roi_memory_access_trace"], [250, 2, 1, "", "set_cycle_count"], [250, 2, 1, "", "set_default_code_address"], [250, 2, 1, "", "set_default_data_address"], [250, 2, 1, "", "set_instruction_count"], [250, 2, 1, "", "set_roi_cyc"], [250, 2, 1, "", "set_roi_ins"], [250, 2, 1, "", "set_roi_memory_access_trace"], [250, 2, 1, "", "set_state"], [250, 3, 1, "", "state"], [250, 2, 1, "", "update_register_definition"], [250, 3, 1, "", "variables"]], "microprobe.utils.mpt.MicroprobeTestDefinitionDefault": [[251, 2, 1, "", "__init__"], [251, 3, 1, "", "code"], [251, 3, 1, "", "cycle_count"], [251, 3, 1, "", "dat_mappings"], [251, 3, 1, "", "dat_properties"], [251, 3, 1, "", "default_code_address"], [251, 3, 1, "", "default_data_address"], [251, 3, 1, "", "instruction_count"], [251, 3, 1, "", "raw"], [251, 2, 1, "", "register_dat_mapping"], [251, 2, 1, "", "register_dat_property"], [251, 2, 1, "", "register_instruction_definitions"], [251, 2, 1, "", "register_raw_definition"], [251, 2, 1, "", "register_register_definition"], [251, 2, 1, "", "register_variable_definition"], [251, 3, 1, "", "registers"], [251, 3, 1, "", "roi_cyc"], [251, 3, 1, "", "roi_ins"], [251, 3, 1, "", "roi_memory_access_trace"], [251, 2, 1, "", "set_cycle_count"], [251, 2, 1, "", "set_default_code_address"], [251, 2, 1, "", "set_default_data_address"], [251, 2, 1, "", "set_instruction_count"], [251, 2, 1, "", "set_instruction_definitions"], [251, 2, 1, "", "set_roi_cyc"], [251, 2, 1, "", "set_roi_ins"], [251, 2, 1, "", "set_roi_memory_access_trace"], [251, 2, 1, "", "set_state"], [251, 2, 1, "", "set_variables_definition"], [251, 3, 1, "", "state"], [251, 2, 1, "", "update_register_definition"], [251, 3, 1, "", "variables"], [251, 6, 1, "", "version"]], "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5": [[252, 2, 1, "", "__init__"], [252, 3, 1, "", "code"], [252, 3, 1, "", "cycle_count"], [252, 3, 1, "", "dat_mappings"], [252, 3, 1, "", "dat_properties"], [252, 3, 1, "", "default_code_address"], [252, 3, 1, "", "default_data_address"], [252, 3, 1, "", "instruction_count"], [252, 3, 1, "", "raw"], [252, 2, 1, "", "register_dat_mapping"], [252, 2, 1, "", "register_dat_property"], [252, 2, 1, "", "register_instruction_definitions"], [252, 2, 1, "", "register_raw_definition"], [252, 2, 1, "", "register_register_definition"], [252, 2, 1, "", "register_variable_definition"], [252, 3, 1, "", "registers"], [252, 3, 1, "", "roi_cyc"], [252, 3, 1, "", "roi_ins"], [252, 3, 1, "", "roi_memory_access_trace"], [252, 2, 1, "", "set_cycle_count"], [252, 2, 1, "", "set_default_code_address"], [252, 2, 1, "", "set_default_data_address"], [252, 2, 1, "", "set_instruction_count"], [252, 2, 1, "", "set_instruction_definitions"], [252, 2, 1, "", "set_roi_cyc"], [252, 2, 1, "", "set_roi_ins"], [252, 2, 1, "", "set_roi_memory_access_trace"], [252, 2, 1, "", "set_state"], [252, 2, 1, "", "set_variables_definition"], [252, 3, 1, "", "state"], [252, 2, 1, "", "update_register_definition"], [252, 3, 1, "", "variables"], [252, 6, 1, "", "version"]], "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "copy"], [253, 2, 1, "", "to_str"]], "microprobe.utils.mpt.MicroprobeTestParser": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "dump_mpt_config"], [254, 2, 1, "", "parse_contents"], [254, 2, 1, "", "parse_filename"], [254, 2, 1, "", "parse_instruction"], [254, 2, 1, "", "parse_register"], [254, 2, 1, "", "parse_variable"]], "microprobe.utils.mpt.MicroprobeTestParserDefault": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "dump_mpt_config"], [255, 2, 1, "", "parse_code"], [255, 2, 1, "", "parse_contents"], [255, 2, 1, "", "parse_filename"], [255, 2, 1, "", "parse_instruction"], [255, 2, 1, "", "parse_register"], [255, 2, 1, "", "parse_variable"], [255, 6, 1, "", "version"]], "microprobe.utils.mpt.MicroprobeTestParserV0x5": [[256, 2, 1, "", "__init__"], [256, 2, 1, "", "dump_mpt_config"], [256, 2, 1, "", "parse_code"], [256, 2, 1, "", "parse_contents"], [256, 2, 1, "", "parse_filename"], [256, 2, 1, "", "parse_instruction"], [256, 2, 1, "", "parse_register"], [256, 2, 1, "", "parse_variable"], [256, 6, 1, "", "version"]], "microprobe.utils.mpt.MicroprobeTestRegisterDefinition": [[257, 2, 1, "", "__init__"], [257, 2, 1, "", "copy"]], "microprobe.utils.mpt.MicroprobeTestVariableDefinition": [[258, 2, 1, "", "__init__"], [258, 2, 1, "", "copy"]], "microprobe.utils.profile": [[259, 4, 1, "", "read_profile"]], "microprobe.utils.yaml": [[260, 4, 1, "", "read_yaml"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [10, 16, 18, 20, 21, 33, 35, 44, 224, 228, 230, 235, 236, 237, 247, 248, 265, 275, 276, 277, 278, 279, 281, 284, 285, 286, 287, 289], "0": [8, 16, 21, 22, 27, 28, 31, 106, 108, 127, 142, 149, 155, 164, 170, 171, 184, 185, 190, 191, 194, 195, 210, 211, 212, 218, 219, 221, 222, 232, 235, 244, 251, 252, 255, 256, 262, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "00": 290, "000": 282, "0000": 284, "000000000000001": 16, "0000000010030000": 284, "0000000010030030": 284, "0000000010040000": 284, "0000000010040050": 284, "00000001": 278, "00000004": 284, "00000040": 284, "00000080": 278, "00004096": [278, 284], "00008067": 284, "00022": 20, "00060613": 284, "00078a63": 284, "0007b683": 284, "0010": 286, "00151513": 284, "00171713": 284, "002": 282, "0022": 1, "003": 282, "00863783": 284, "0087b783": 284, "00d70733": 284, "01234567890abcdef01234567890abcdef01234567890abcdef01234567890abcdef": 289, "04a7b823": 284, "04e63823": 284, "05": 16, "05063703": 284, "06": [16, 282, 290], "07": 290, "0b01010101": 16, "0b0101010101010101010101010101010101010101010101010101010101010101": 16, "0x": [275, 287, 289], "0x0": [275, 277, 278, 282, 283, 284, 289], "0x0000": 278, "0x0000000000000000": 284, "0x0000000000000200": 283, "0x0000000000123000": 289, "0x0000000000123004": 289, "0x0000000000200000": 283, "0x0000000000200008": 283, "0x0000000000200010": 283, "0x0000000000300000": 283, "0x0000000000300100": 283, "0x0000000000300200": 283, "0x0000000000300300": 283, "0x0000000000300400": 283, "0x0000000000300500": 283, "0x0000000000300600": 283, "0x0000000000300700": 283, "0x0000000000300800": 283, "0x0000000000300900": 283, "0x000000000123000": 289, "0x0000000010020000": 283, "0x0000000010020004": 283, "0x000000001002fff0": [278, 282], "0x000000001002fff8": 284, "0x0000000010030000": [278, 282, 283, 284], "0x0000000010030004": 283, "0x0000000010030008": 283, "0x000000001003000c": 283, "0x0000000010030010": 283, "0x0000000010030014": 283, "0x0000000010030018": 283, "0x000000001003001c": [278, 283], "0x0000000010030020": 283, "0x0000000010030024": 283, "0x0000000010030028": 283, "0x000000001003002c": 283, "0x0000000010030030": [282, 283, 284], "0x0000000010030034": 283, "0x0000000010030038": 283, "0x000000001003003c": 283, "0x0000000010030040": 283, "0x0000000010030060": 283, "0x0000000010030070": 283, "0x0000000010040000": [278, 282, 284], "0x0000000010040050": [278, 284], "0x0000000100001000": 289, "0x0000000100001004": 289, "0x0000000100001008": 289, "0x0000000101000000": 289, "0x0000000101000008": 289, "0x00000010": 289, "0x00000dfa76590000": 289, "0x00000dfa76590004": 289, "0x00000dfa76590008": 289, "0x00000dfa7659000c": 289, "0x00000dfa76590010": 289, "0x00000dfa76590014": 289, "0x00000dfa765a0000": 289, "0x000100300": 289, "0x000100302": 289, "0x000100306": 289, "0x0008": 278, "0x0010": [278, 284], "0x00100000": 289, "0x00200000": 289, "0x00210000": 289, "0x00220000": 289, "0x010": 283, "0x0102030405060708": [275, 278], "0x0123456700123000": 289, "0x0123456700124000": 289, "0x012345677": 289, "0x0123456789abc": 289, "0x1": [284, 289], "0x10": [282, 283], "0x100": [282, 283], "0x10000": 283, "0x100001000": 289, "0x100001004": 289, "0x100001008": 289, "0x10020004": 283, "0x10030000": 278, "0x10040": 284, "0x10040000": [278, 282], "0x10040010": 282, "0x1006c": 283, "0x101000000": 289, "0x101000008": 289, "0x108": 282, "0x110": [282, 283], "0x118": 282, "0x120": [282, 283], "0x123456700123000": 289, "0x123456700123004": 289, "0x123456700123008": 289, "0x12345670012300c": 289, "0x123456700123010": 289, "0x123456700123014": 289, "0x128": 282, "0x130": 282, "0x138": 282, "0x14": [282, 284], "0x140": 282, "0x148": 282, "0x150": 282, "0x158": 282, "0x16": 278, "0x160": 282, "0x168": 282, "0x170": 282, "0x178": 282, "0x18": 282, "0x180": 282, "0x188": 282, "0x190": 282, "0x198": 282, "0x1a0": 282, "0x1a8": 282, "0x1b0": 282, "0x1b8": 282, "0x1c0": 282, "0x1c8": 282, "0x1d0": 282, "0x1d8": 282, "0x1e0": 282, "0x1e8": 282, "0x1f0": [282, 283], "0x1f8": 282, "0x2": [283, 289], "0x20": [282, 283], "0x200": 283, "0x200000": 283, "0x200100": 283, "0x24": [282, 284], "0x240": 283, "0x28": 282, "0x30": 282, "0x34": 283, "0x38": [282, 283], "0x40": 282, "0x44": 283, "0x48": 282, "0x50": [278, 282, 284], "0x58": 282, "0x60": 282, "0x68": 282, "0x70": 282, "0x78": 282, "0x7eb0": 283, "0x7ef8": 283, "0x8": [278, 282, 283, 284], "0x80": 282, "0x88": 282, "0x90": 282, "0x98": 282, "0xa0": 282, "0xa8": 282, "0xb0": 282, "0xb8": 282, "0xc0": 282, "0xc8": 282, "0xcafecaf": [275, 278], "0xd0": 282, "0xd8": 282, "0xe": 278, "0xe0": 282, "0xe8": 282, "0xf0": 282, "0xf8": 282, "0xfffffffffffff000": 289, "1": [10, 16, 20, 21, 22, 24, 25, 32, 35, 37, 48, 101, 123, 149, 155, 158, 190, 191, 235, 244, 262, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "10": [16, 18, 20, 275, 278, 280, 281, 283, 286, 287, 289, 290], "100": 16, "1000": 16, "10000": [25, 244], "100000": 283, "10030000": 284, "10030004": 284, "10030008": 284, "1003000c": 284, "10030010": 284, "10030014": 284, "10030018": 284, "1003001c": 284, "10030020": 284, "10030024": 284, "10030028": 284, "1003002c": 284, "10030030": 284, "10030034": 284, "10030038": 284, "1003003c": 284, "10040000": 284, "10040002": 284, "10040004": 284, "10040006": 284, "10040008": 284, "1004000a": 284, "1004000c": 284, "1004000e": 284, "10040010": 284, "10040012": 284, "10040014": 284, "10040016": 284, "10040018": 284, "1004001a": 284, "1004001c": 284, "1004001e": 284, "10040020": 284, "10040022": 284, "10040024": 284, "10040026": 284, "10040028": 284, "1004002a": 284, "1004002c": 284, "1004002e": 284, "10040030": 284, "10040032": 284, "10040034": 284, "10040036": 284, "10040038": 284, "1004003a": 284, "1004003c": 284, "1004003e": 284, "10040040": 284, "10040042": 284, "10040044": 284, "10040046": 284, "10040048": 284, "1004004a": 284, "1004004c": 284, "1004004e": 284, "10040050": 284, "10040052": 284, "10040054": 284, "10040056": 284, "10040637": 284, "100407b7": 284, "1024": [16, 286], "105": 20, "108": [20, 282], "11": [16, 286, 287], "1109": [18, 20], "1147": 20, "12": [16, 18, 20, 283, 286, 287], "121": 20, "12636": 285, "128": 16, "13": [1, 16, 20, 287], "132": 20, "14": [16, 20, 286, 287], "144": 286, "15": [16, 282, 287, 289], "15th": 20, "16": [16, 20, 47, 48, 171, 278, 282, 287, 289], "160": 282, "16th": 20, "17": [16, 287], "171": 282, "1771561": 285, "18": [16, 286, 287], "189": 287, "19": [16, 282, 286, 287], "199": [18, 20], "1b": 287, "1k": 286, "1st": 176, "2": [8, 16, 20, 21, 22, 190, 191, 227, 233, 236, 237, 244, 247, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "20": [16, 95, 275, 278, 283, 286, 287, 289], "2004": [10, 21], "2006": 10, "2011": [1, 16, 282], "2012": [18, 20], "2014": 20, "2015": 20, "2016": 20, "2017": 20, "2018": 20, "2019": 20, "2020": 1, "2021": [16, 282], "2048": 286, "21": [16, 287], "211": [18, 20], "22": [16, 287], "222": 287, "22nm": 20, "23": [16, 287], "24": [16, 233, 282, 287], "2446872": 20, "25": [16, 286, 287], "256": [16, 282], "26": [16, 20, 287], "27": [16, 18, 20, 282, 287], "2721699": 20, "28": [16, 287], "2873582": 20, "288": 286, "29": [16, 287], "2f": [16, 287], "2k": 286, "2nd": 176, "3": [12, 16, 21, 22, 262, 264, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "30": [16, 20, 283, 287], "300": 20, "30000": 289, "302": 20, "31": [16, 286, 287], "32": [16, 244, 278, 282, 287], "320760": 285, "326": 20, "32768": 286, "32bit": 281, "32k": 286, "33": [16, 287], "336": 20, "34": 16, "3405695742": [278, 282], "35": 16, "36": [16, 282], "3600": 282, "368": 20, "37": [16, 287], "38": 16, "380": 20, "3840": 16, "39": 16, "39982": 289, "3b": 287, "3f": 287, "3frm": 287, "3k": 286, "4": [16, 20, 21, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "40": [16, 289], "4096": [278, 282, 284], "41": 16, "42": [16, 20], "43": [16, 287], "4323": 289, "438": 20, "439": 20, "44": 16, "441": 20, "449": 20, "45": 16, "45th": [18, 20], "46": 16, "4611686018427387903": 287, "47": [16, 287], "47th": 20, "48": [16, 20, 278, 282], "49": 16, "496": 282, "49th": 20, "4b": 287, "4f": 287, "4th": 20, "5": [16, 20, 21, 252, 255, 256, 266, 275, 278, 282, 284, 285, 286, 287, 288, 290], "50": [16, 21, 275, 286], "51": 16, "512": 16, "51966": 284, "52": 16, "53": [16, 287], "532170": 285, "54": [16, 20], "55": 16, "56": [16, 20], "57": 16, "5744": 289, "58": 16, "59": [16, 20], "6": [16, 21, 278, 282, 285, 287], "60": 16, "600": 282, "601": 20, "604": 20, "61": [16, 20], "62": [16, 283], "63": [16, 287], "64": [16, 278, 282, 287], "64bit": [282, 287, 290], "65": 16, "65600": [278, 282, 284], "66": 16, "67": [16, 287], "68": 16, "69": 16, "6f": 287, "7": [12, 16, 21, 264, 268, 278, 282, 283, 287], "70": 16, "71": 16, "72": 16, "73": [16, 287], "74": 16, "75": 16, "7517567": 20, "76": [16, 20], "77": 16, "78": [16, 20], "7870449": 20, "79": 16, "7992508": 20, "7th": 20, "8": [12, 16, 21, 246, 268, 278, 282, 283, 284, 286, 287, 289, 290], "80": [16, 20, 282, 284], "81": 20, "8310303": 20, "84": 284, "85": 282, "9": [12, 16, 21, 266, 268, 283, 287], "938": 16, "94129": 10, "964": 16, "97": 20, "A": [8, 16, 18, 20, 21, 23, 24, 25, 40, 90, 98, 133, 144, 155, 166, 167, 168, 204, 207, 224, 226, 232, 233, 235, 245, 246, 247, 262, 268, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291], "AND": [21, 275, 287], "AS": [8, 16, 21], "And": [265, 287], "As": [8, 268, 278, 280, 281, 282], "At": [8, 19, 289], "BE": 290, "Be": [14, 271, 278, 284], "By": [8, 10, 16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "FOR": 21, "For": [8, 14, 16, 19, 21, 50, 271, 278, 280, 281, 282, 284, 285, 289], "If": [0, 8, 11, 12, 14, 16, 18, 20, 21, 22, 24, 25, 31, 33, 35, 39, 40, 74, 176, 190, 191, 230, 232, 235, 236, 237, 247, 248, 262, 263, 264, 265, 267, 268, 269, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "In": [7, 8, 14, 16, 18, 19, 20, 21, 22, 25, 167, 235, 236, 237, 247, 248, 266, 268, 271, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290], "It": [8, 9, 19, 22, 194, 266, 268, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "NOT": [278, 282, 283, 284, 288, 289], "No": [16, 282, 286, 287], "Not": [16, 21, 287], "OF": [8, 16, 21], "OR": [8, 16, 20, 21, 287], "On": 289, "One": [8, 22, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "Or": 287, "THE": 275, "That": [11, 265, 271, 275, 284, 285, 289], "The": [0, 8, 10, 11, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 34, 40, 155, 166, 168, 190, 191, 224, 226, 235, 262, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "Then": [8, 12, 16, 24, 262, 264, 278, 285, 286, 288], "There": [8, 279, 284, 285, 286], "These": [8, 16, 22, 166, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "To": [8, 14, 21, 265, 271, 281, 282, 285, 286], "With": [12, 264], "_": [8, 16], "__": 8, "__64bit__": 275, "__aarch64__": 275, "__add__": 8, "__all__": 8, "__annotations__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__asm__": 282, "__attribute__": [275, 282], "__author__": [8, 16], "__cause__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__context__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__copyright__": [8, 16], "__credits__": [8, 16], "__delattr__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__dict__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__doc__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__email__": [8, 16], "__future__": 16, "__getattribute__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__init__": [8, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 221, 222, 225, 227, 230, 231, 232, 233, 235, 236, 237, 239, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258], "__license__": [8, 16], "__main__": 16, "__maintainer__": [8, 16], "__module__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__name__": 16, "__new__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__powerpc64__": 275, "__ppc64__": 275, "__reduce__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__repr__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__s390x__": 275, "__setattr__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__setstate__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__status__": [8, 16], "__str__": [8, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__suppress_context__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__traceback__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__va_args__": 275, "__version__": [8, 16], "__weakref__": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "__x86_64__": 275, "_data_cach": 227, "_def": 8, "_generate_benchmark": 16, "_generate_instruct": 16, "_init_valu": 16, "_io": 246, "_isa": 8, "_main": 16, "_rreg": 8, "_validate_instruct": 16, "a0": 284, "a2": 284, "a3": 284, "a4": 284, "a5": 284, "abc": [8, 45, 46, 49, 50, 172, 174, 177, 179, 181, 182, 186, 188, 189, 191, 192, 196, 203, 205, 206, 208, 234], "abi": [278, 284], "abl": [12, 14, 19, 166, 264, 271], "about": [8, 14, 16, 271, 275, 278, 284, 289], "abov": [8, 12, 16, 21, 264, 275, 278, 279, 280, 281, 282, 285, 286, 290], "absolut": [16, 39, 193, 196, 197, 198, 200, 201, 202], "absolute_import": 16, "abstract": [8, 20, 50, 90, 174, 176, 185, 188, 191, 205, 208, 222, 250, 254], "abstractmethod": 8, "acceler": 20, "accept": [16, 21], "access": [12, 16, 22, 193, 196, 197, 198, 200, 201, 202, 250, 251, 252, 264, 275, 280, 281, 282, 283, 286, 287, 289], "access_storag": [16, 287], "access_storage_with_upd": [16, 287], "accord": 40, "accordingli": [8, 12, 16, 20, 176, 236, 264, 278, 284, 289], "account": [12, 264, 280, 281, 282], "accur": [18, 19], "acknowledg": 235, "acm": [18, 20], "act": 21, "action": [14, 73, 230, 233, 271], "activ": [12, 16, 262, 264, 265, 269], "activate_microprob": [12, 264], "actual": [16, 29, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "ad": [13, 16, 18, 24, 25, 31, 33, 35, 235, 278, 280, 281, 284, 286, 288, 291], "adapt": [18, 19], "add": [8, 10, 14, 16, 19, 21, 24, 25, 33, 34, 35, 37, 39, 155, 200, 230, 271, 278, 282, 283, 284, 286, 287, 289], "add_allow_regist": 41, "add_argu": [232, 233], "add_argument_group": 232, "add_bbl": 37, "add_com": 41, "add_decor": 41, "add_descript": 230, "add_epilog": 230, "add_everi": 286, "add_fini": [33, 35], "add_flag": 230, "add_group": 230, "add_info": [33, 34, 35], "add_init": [33, 35], "add_instruct": [33, 35], "add_map": [179, 180], "add_mutually_exclusive_group": 232, "add_opt": [16, 230], "add_pass": [16, 24, 25], "add_pass_info": [33, 34, 35], "add_properties_to_isa": [210, 211, 212], "add_requir": [33, 34, 35], "add_reserved_regist": 39, "add_sect": 235, "add_subpars": 232, "add_text": 233, "add_to_regist": [173, 174], "add_usag": 233, "add_v0": 287, "add_warn": [33, 34, 35], "addassemblybyindexpass": 122, "addendum": 21, "addfinalizationassemblypass": 113, "addi": [278, 282, 283, 284, 287], "addi16sp": 287, "addi16sp_v0": 287, "addi4spn": 287, "addi4spn_v0": 287, "addi_v0": [285, 287], "addinitializationassemblypass": 113, "addinitializationinstructionspass": 113, "addit": [14, 19, 21, 230, 235, 271, 280, 281, 284], "addiw": 287, "addiw_v0": 287, "addon": 124, "addonepass": 122, "addr": 287, "addres": [42, 224, 226], "address": [8, 16, 18, 22, 23, 25, 31, 39, 41, 42, 44, 46, 47, 48, 74, 171, 173, 174, 178, 179, 180, 182, 193, 195, 196, 197, 198, 200, 201, 202, 207, 214, 216, 225, 250, 251, 252, 253, 258, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "address_absolut": [193, 196, 197, 198, 200, 201, 202], "address_bas": [193, 196, 197, 198, 200, 201, 202], "address_formula": 194, "address_immedi": [193, 196, 197, 198, 200, 201, 202], "address_in_map": 178, "address_index": [193, 196, 197, 198, 200, 201, 202], "address_operand": 194, "address_regist": [173, 174], "address_rel": [193, 196, 197, 198, 200, 201, 202], "address_s": [214, 216], "address_transl": 178, "addw": 287, "addw_v0": 287, "advantag": [14, 271], "advis": 21, "ae": 286, "aesr": 16, "affect": [8, 278], "aforement": 9, "after": [8, 11, 16, 31, 33, 35, 151, 232, 271, 275, 278, 282, 283, 284, 288, 289], "afterward": [16, 278], "again": [275, 286], "against": [21, 260], "aghi": 289, "agnost": 268, "agre": [8, 10, 11, 16, 21], "agreement": 21, "aim": [16, 197, 200, 280, 281, 282], "aix": [263, 265, 268], "al": 20, "alert": 278, "algebra": 16, "algnment": [275, 278], "algorithm": 16, "alia": 182, "align": [27, 28, 42, 46, 47, 48, 50, 146, 258, 275, 278, 282, 284, 289], "all": [7, 8, 9, 10, 11, 12, 15, 16, 21, 22, 66, 67, 82, 151, 166, 167, 168, 232, 235, 236, 237, 247, 248, 262, 263, 264, 265, 266, 268, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "alleg": 21, "alloc": [16, 278, 284], "allow": [8, 10, 14, 19, 39, 40, 41, 50, 155, 193, 196, 197, 198, 201, 202, 230, 235, 268, 271, 274, 275, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289], "allow_no_valu": 235, "allow_regist": [114, 115, 123, 136, 137], "allowed_reg": 41, "allowed_regist": 40, "alon": 21, "along": [21, 275], "alongsid": 21, "alper": [18, 20, 272], "alperb": 272, "alphabet": 8, "alreadi": [8, 14, 16, 247, 248, 268, 271, 279, 285, 286], "also": [8, 14, 16, 18, 21, 24, 207, 235, 262, 266, 271, 275, 278, 280, 281, 282, 283, 284, 289], "altern": 10, "although": [12, 15, 16, 264, 278, 282, 283, 284, 289], "alu": 16, "alu_fxu0_core0_scm_processor": 16, "alwai": [8, 16, 283], "am": 10, "amoadd": 287, "amoand": 287, "amomax": 287, "amomaxu": 287, "amomin": 287, "amominu": 287, "amoor": 287, "amor": 16, "amoswap": 287, "amoxor": 287, "amr": 16, "an": [2, 8, 10, 11, 14, 16, 18, 19, 20, 21, 22, 25, 27, 28, 31, 33, 34, 35, 40, 41, 42, 43, 46, 47, 48, 74, 151, 163, 164, 174, 176, 188, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 205, 230, 231, 232, 235, 236, 237, 247, 248, 262, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290], "analyt": 22, "analyz": [273, 285, 286], "and_v0": [285, 287], "andi": 287, "andi_v0": 287, "ani": [8, 11, 12, 14, 16, 18, 19, 20, 21, 22, 232, 235, 262, 264, 268, 269, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "annot": 21, "annual": [18, 20], "anoth": [8, 31, 176, 268], "answer": [18, 19], "anti": 151, "any_comp": [16, 133], "anyt": 271, "anyth": [285, 286], "apach": [8, 16, 21, 282], "api": [16, 18, 166, 273, 274], "appear": [21, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "append": [16, 33, 35, 235, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "appendix": 21, "appli": [8, 14, 16, 19, 21, 22, 23, 24, 90, 271], "applic": [8, 16, 21, 273], "appreci": [18, 20], "appropri": [10, 12, 14, 21, 264, 271, 278, 280, 281, 282, 284], "aq": 287, "ar": [8, 10, 11, 12, 14, 15, 16, 19, 21, 22, 23, 24, 25, 39, 90, 166, 176, 190, 191, 193, 207, 224, 226, 235, 236, 237, 245, 247, 248, 262, 264, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "arbitrari": 288, "arch": [176, 182, 259, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "archcompon": 8, "archdef": 8, "architect": [16, 204, 287], "architectur": [2, 8, 15, 16, 19, 20, 41, 166, 167, 168, 173, 174, 176, 205, 262, 263, 265, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "architecture_nam": 166, "architecture_path": [22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "architecture_typ": 41, "architecturedefinit": 8, "archiv": 21, "area": [273, 278, 284], "arel": 197, "arg": [16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 119, 183, 184, 185, 230, 231, 232, 236, 241, 244, 247, 248], "arg1": 275, "arg2": 275, "arg3": 275, "arg_lin": 232, "arg_pars": 230, "argc": [16, 275, 282], "argpars": [229, 230, 268], "argument": [16, 229, 230, 231, 232, 235, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "argumentpars": [229, 232], "argv": [16, 275, 282], "aris": 21, "arithmet": [22, 207, 287], "arnau": 272, "around": 286, "arrai": [46, 47, 48, 238, 275, 278, 282, 284, 289], "arrang": 8, "articl": [14, 271], "asid": [14, 271], "asm": [16, 18, 40, 44, 287, 290], "asm_arg": [184, 185], "asm_fil": [276, 281], "aspect": 287, "assembl": [278, 282, 283, 284, 289], "assembli": [16, 22, 41, 43, 114, 115, 123, 184, 185, 187, 190, 204, 205, 224, 225, 226, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "assembly_fil": 281, "assembly_format": [190, 191], "assert": [16, 21, 275], "assign": 39, "assist": 19, "associ": [21, 173, 174, 216], "assum": [12, 21, 210, 235, 264, 278, 280, 281, 285, 286], "atom": 287, "attach": [11, 14, 21, 271], "attr": 241, "attribut": [8, 21, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 50, 61, 67, 85, 87, 88, 135, 163, 164, 167, 168, 170, 171, 173, 174, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 216, 218, 219, 221, 222, 227, 230, 231, 235, 238, 250, 251, 252, 255, 256], "auipc": [278, 282, 284, 287], "auipc_v0": 287, "austin": 20, "author": [0, 8, 16, 21, 282], "authorship": 21, "autoalignpass": 113, "autom": [18, 19, 20], "automat": [0, 8, 10, 24, 25, 245, 278, 279, 283, 284, 285, 289], "avail": [11, 16, 18, 21, 74, 216, 224, 262, 265, 268, 269, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "avelat": [16, 133], "averag": [16, 238, 279, 285, 286], "average_lat": 16, "average_v": 238, "averagedependencydistancepass": 109, "avoid": [12, 19, 151, 264, 266, 268, 274, 280, 281, 282], "awai": [11, 271], "awar": [19, 20, 289], "azero": 287, "b": [10, 16, 21, 279, 283, 285, 286], "b_v0": 285, "back": [8, 275, 276, 277], "backend": [266, 285, 286, 289], "backup": [11, 271], "balanc": 20, "balign": 282, "bang": 230, "barcelona": 20, "base": [8, 10, 11, 16, 19, 21, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 221, 222, 225, 227, 230, 231, 232, 233, 235, 236, 237, 239, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 271, 274, 275, 278, 279, 285, 286, 287, 288], "base_address": [27, 28, 255, 256], "base_el": 16, "base_funct": 229, "base_modul": 241, "base_seq": 285, "bash": [12, 16, 264], "basi": [8, 16, 21], "basic": [16, 19, 30, 31, 34, 37, 268, 269, 288], "batch": [285, 286], "batch_numb": [285, 286], "bbl": [18, 23, 37, 95], "bbl_list": 30, "bblsize": 155, "bc": [16, 283], "bc_v0": 285, "bclr": 283, "bcomp": 16, "bcr": 289, "becaus": [16, 235, 275, 278, 285], "becom": 19, "been": [0, 2, 14, 16, 21, 24, 25, 268, 271], "befor": [8, 9, 11, 12, 16, 31, 33, 35, 264, 265, 271, 275, 278, 285, 286, 287, 289], "begin": [248, 278, 284, 289], "begin_variable_registr": [275, 278], "behalf": 21, "behavior": [24, 235, 278, 283, 284, 286], "being": [16, 22, 24, 25, 235, 272, 273, 278, 279, 283, 284, 285, 286, 290], "believ": [18, 19, 289], "below": [8, 14, 20, 21, 24, 263, 271, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290], "bench": [16, 24, 25, 50], "benchmak": 90, "benchmark": [16, 18, 20, 22, 23, 24, 25, 39, 50, 279, 282, 285, 286], "benchmark_factori": 32, "benchmark_s": [16, 279, 285, 286], "benchnark": 16, "benefici": 21, "beq": [282, 284, 287], "beq_v0": 287, "beqz": [278, 284, 287], "beqz_v0": 287, "berri": 20, "bertran": [1, 16, 18, 20, 272, 282], "besid": [13, 275, 286], "best": [10, 274], "better": [14, 271, 285], "between": [8, 16, 24, 176, 193, 244, 266, 278, 279, 280, 281, 282, 284, 285, 286], "bge": 287, "bge_v0": 287, "bgeu": 287, "bgeu_v0": 287, "big": 280, "biga": 272, "bin": [16, 18, 183, 262, 265, 269, 276, 277, 280, 281, 282, 283, 284], "bin2asm_test001": 276, "bin2objdump_test001": 277, "bin_output_fil": 280, "binari": [16, 41, 184, 185, 196, 226, 240, 268, 276, 277, 280, 281, 282, 283, 286, 287], "bind": 21, "binstr": 183, "binutil": [277, 284], "bit": [16, 187, 193, 195, 207, 208, 214, 216, 244, 287], "bit_mask": 184, "bit_rat": 195, "bits_x_lin": 216, "bits_x_offset": 216, "bits_x_set": 216, "bitsiz": 287, "bitwis": 287, "bl": 283, "bla": 8, "block": [8, 16, 23, 24, 25, 30, 31, 33, 34, 35, 37, 39, 40, 90, 133, 155, 282], "blt": 287, "blt_v0": 287, "bltu": 287, "bltu_v0": 287, "bn": [285, 286], "bne": [282, 284, 287], "bne_v0": 287, "bnez": [278, 284, 287], "bnez_v0": 287, "boilerpl": 21, "bolean": 184, "book": 20, "bool": [16, 22, 24, 25, 33, 35, 39, 40, 42, 43, 46, 47, 48, 50, 74, 171, 173, 174, 184, 187, 188, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 214, 216], "boolean": [16, 39, 50, 230, 287], "boolean_st": 235, "bootstrap_environ": [12, 264], "bose": [18, 20, 272], "boston": 20, "both": [230, 265], "bottom": [278, 287], "box": 19, "bp": [283, 286], "bracket": 21, "branch": [11, 16, 18, 59, 193, 195, 271, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289], "branch_condit": [16, 287], "branch_everi": 286, "branch_pattern": 286, "branch_rel": [16, 287], "branch_to_itself": [173, 174], "branch_unconditional_rel": [173, 174], "branchbraidnextpass": 94, "branchnextpass": [16, 94], "bravo": 20, "brc": 289, "brcl_v3": 289, "brctg": 289, "break": [8, 278, 284], "breviti": 16, "brief": [8, 275], "broken": [263, 265], "bsc": 20, "bt": 283, "bug": [7, 8, 13, 18, 268, 270], "buid": 155, "build": [9, 16, 23, 24, 25, 33, 34, 35, 37, 39, 40, 90, 155], "build_001_distribut": 9, "building_block": [40, 92, 93, 95, 96, 106, 108, 118, 119, 126, 130, 131, 135, 136, 138, 141, 145, 146, 154, 155], "buildingblock": [32, 33, 40], "built": [8, 9, 16], "bulla": 20, "button": [14, 271], "buyuktosunoglu": [18, 20, 272], "bymicroprob": 283, "byte": [16, 18, 19, 39, 46, 47, 48, 214, 216, 278, 284, 286, 287, 289], "bz2": 283, "c": [1, 10, 16, 18, 20, 21, 262, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "c2mpt": [275, 278], "c2mpt_dump_data": 275, "c2mpt_dump_var": 275, "c2mpt_fix_vartyp": 275, "c2mpt_function": [275, 278, 282, 283, 284], "c2mpt_init_global_var": [275, 278], "c2mpt_print_valu": 275, "c2mpt_test003": 284, "c2mpt_var": 275, "c2mpt_var_": 275, "c99": [16, 278], "c_funct14": 287, "c_imm1": 287, "c_imm11": 287, "c_imm2": 287, "c_imm3": 287, "c_imm5": 287, "c_imm6": 287, "c_imm8": 287, "c_output_fil": 282, "ca": [10, 20, 287], "cach": [16, 18, 19, 210, 269, 287], "cache_cor": 287, "cache_fil": 228, "cache_hierarchi": [16, 87, 88, 210], "cache_hierarchy_from_el": 213, "cachefil": 228, "cachehierarchi": 213, "cachenam": 228, "cafe": 284, "calcul": [238, 287], "call": [16, 24, 230, 238, 275, 278, 280, 281, 284], "callabl": [16, 42, 43, 50, 230, 238], "callback": 41, "calvin": 20, "can": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 35, 40, 176, 235, 262, 263, 264, 265, 268, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "candid": 285, "cannot": [16, 19, 21, 230, 235], "capabl": 50, "care": [268, 278], "carei": 20, "carri": 21, "case": [8, 14, 16, 20, 24, 25, 167, 235, 236, 237, 247, 248, 262, 268, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289], "categori": 16, "caus": [21, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "cb_": 287, "cb_b": 287, "cb_imm5": 287, "cb_l": 287, "cc": [278, 285, 286], "cd": [12, 264, 269], "cd_imm3": 287, "cd_imm5": 287, "cd_imm6": 287, "center": [20, 272], "central": 268, "certain": [278, 285], "certif": 10, "certifi": 10, "cfg": [18, 23, 33, 35], "cflag": 278, "chain": [19, 278, 279, 285, 286], "chainer": 20, "chandramoorthi": 20, "chang": [8, 10, 11, 12, 21, 22, 24, 31, 264, 271, 273, 278, 280, 281, 282, 284], "char": [16, 229, 230, 275, 278, 282, 284], "charact": [21, 227, 283, 289], "character": [18, 19, 20, 279, 285], "characterist": 16, "charg": [16, 21, 24, 25, 166, 176], "cheat": [12, 264], "check": [2, 7, 8, 9, 11, 12, 14, 16, 18, 27, 28, 41, 43, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 176, 182, 193, 196, 197, 198, 200, 201, 202, 232, 235, 245, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "check_align": [27, 28], "check_argument_error": 232, "check_branch": 97, "check_ci": 9, "check_context": 41, "check_fix_styl": 8, "checkabl": 282, "checking_funct": 41, "cher": 20, "chip": 20, "choic": [16, 230, 238], "choos": 21, "chopstix": 20, "chuang": 20, "ci": [8, 9], "ci_": 287, "ci_d": 287, "ci_i": 287, "ci_imm5": 287, "ci_l": 287, "ci_u": 287, "ci_w": 287, "cinfgen": 16, "cinfppc": 16, "circuit": 20, "citat": [18, 20], "ciw": 287, "cj": 287, "cl": [183, 186, 189, 203, 206, 217, 220, 241], "cl_d": 287, "cl_w": 287, "claim": 21, "clarif": 289, "clash": 281, "class": [16, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 66, 67, 73, 74, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 287], "classifi": 287, "classnam": 8, "clazz": 241, "clean": [268, 269], "clear": [14, 235, 236, 237, 247, 248, 271], "cli": [16, 229, 233, 278, 280, 281, 282, 283, 284], "click": [14, 271], "clone": [12, 264], "close": 16, "closer": [16, 244], "closest": [16, 39], "closest_common_el": [218, 219], "closest_divisor": 244, "cls_imm5": 287, "clsname": 241, "cmd": [16, 61], "cmdline": [16, 18], "cmp": [18, 20], "cmpi": 283, "code": [0, 2, 7, 9, 11, 13, 16, 18, 19, 20, 21, 22, 101, 166, 168, 224, 226, 227, 250, 251, 252, 264, 266, 268, 271, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290], "code_conventions_001_pycodestyl": [8, 9], "code_conventions_002_pylint": [8, 9], "code_conventions_003_document": [8, 9], "code_conventions_004_mypi": 8, "code_foot": [24, 289], "code_head": [24, 289], "code_init": 160, "code_s": [33, 35], "code_seg": 39, "codif": [16, 184, 193, 196, 197, 198, 200, 201, 202, 204, 205, 226, 280, 281, 282, 283, 287], "codifi": [226, 276, 277], "collect": [234, 244], "colon": [22, 288], "com": [1, 12, 14, 16, 264, 271, 272, 282], "combin": [21, 279, 285, 286], "comfort": [11, 271], "comma": [262, 279, 283, 285, 286, 287], "command": [8, 11, 16, 18, 230, 262, 265, 267, 268, 269, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291], "comment": [21, 41, 44, 225, 281, 284, 289], "comment_prefix": 235, "commerci": 21, "commit": [8, 10, 11, 12, 264, 271, 285], "common": [15, 16, 21, 168, 230, 266], "commun": [13, 21, 264], "comp": [16, 173, 174], "compar": [18, 73, 173], "compare_and_branch": [173, 174], "comparison": 176, "compil": [11, 16, 19, 21, 235, 271, 275, 278, 282, 287, 290], "compiler_flag": 281, "compiler_path": 281, "compitl": 282, "complet": [12, 16, 173, 264, 265, 273], "completelli": 286, "complex": [18, 19, 20, 291], "compli": [8, 21, 278, 281, 285], "complianc": [8, 16, 21], "compliant": 278, "compliment": 244, "compnam": 16, "compon": [8, 133, 166, 287], "component_list": 16, "compos": [0, 18, 19, 167], "comprehens": 290, "compress": [283, 285, 286, 287], "compress_fil": 244, "comput": [16, 18, 19, 20, 21, 174, 193, 244, 278, 280, 281, 282, 284, 286, 287, 289], "compute_weighted_profile_averag": 238, "concat": 286, "concept": [15, 16, 19, 290], "cond": [59, 173, 174], "condit": [8, 16, 21, 33, 35, 59, 286, 287], "confer": 20, "config": 18, "config_fil": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "config_opt": 16, "configfil": 230, "configpars": [234, 235], "configur": [21, 166, 235, 236, 237, 250, 251, 252, 254, 255, 256, 262, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "confirm": 278, "confit": 287, "conflict": [278, 282, 284, 289], "congruenc": 216, "congruence_class": 216, "conit": 16, "conjunct": 19, "consecut": [280, 281, 286], "consequ": [271, 278, 284], "consequenti": 21, "consid": [8, 271, 278], "consist": [10, 21], "conspicu": 21, "constant": [8, 16, 193, 196, 197, 198, 200, 201, 202], "constantdependencydistancepass": 109, "constitut": 21, "constrain": 285, "constraint": [278, 285], "constru": 21, "construct": 278, "constructor": 235, "consum": 271, "consumpt": 285, "contact": [0, 1, 8, 12, 18, 263, 264, 265, 268, 270, 273], "contain": [0, 8, 16, 21, 22, 24, 25, 37, 39, 164, 194, 234, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 289], "contains_data": [214, 216], "contains_instruct": [214, 216], "content": [8, 16, 21, 24, 25, 90, 235, 250, 251, 252, 254, 255, 256, 278, 279, 280, 281, 282, 285, 286, 289], "context": [18, 23, 33, 35, 40, 41, 42, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 173, 174, 231], "context_callback": 41, "context_var": [173, 174], "continu": [7, 8, 16, 18, 279, 286], "contract": [1, 21], "contribut": [7, 11, 18, 21, 267], "contributor": [10, 21], "contributori": 21, "control": [16, 21, 22, 23, 33, 35, 37, 179, 180, 230, 274, 278, 279, 285, 286, 289], "control_regist": [173, 174], "conveni": 278, "convenst": 9, "convent": [278, 284], "convers": 21, "convert": [44, 235, 240, 275, 278, 280, 281, 282, 283, 287], "convert_arg_line_to_arg": 232, "cool": 20, "coordin": 273, "copi": [8, 10, 11, 16, 21, 27, 28, 30, 39, 41, 43, 44, 179, 180, 193, 196, 197, 198, 199, 200, 201, 202, 236, 237, 247, 248, 253, 257, 258, 269, 271, 275], "copyright": [8, 10, 16, 18, 21, 282], "core": [18, 19, 20, 266, 273, 285, 287], "corner": [11, 12, 18, 264, 271, 272, 273], "corpor": [1, 8, 16, 282], "correct": [9, 14, 224, 232, 262, 271, 277, 278, 280, 281, 282, 283, 284, 289], "correctli": [280, 281, 282, 284, 288], "correspond": [22, 40, 166, 214, 216, 235, 236, 237, 247, 248, 266, 276, 277, 284], "could": [15, 167, 288, 290], "count": [246, 250, 251, 252, 275, 278, 282, 284, 285, 286], "counter": 287, "counterclaim": 21, "coupl": 168, "cover": 10, "cpp": 278, "cpu": [16, 210], "cpu_count": 16, "cr": [16, 287], "cr_jr": 287, "craft": [18, 19], "crd": 287, "creat": [8, 9, 10, 11, 12, 14, 16, 18, 24, 25, 37, 90, 98, 133, 144, 155, 167, 168, 193, 214, 216, 221, 222, 230, 235, 236, 237, 247, 248, 264, 265, 268, 271, 282, 291], "create_dependency_between_in": 40, "creg": 287, "crega": 287, "critic": [16, 20, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "cross": [21, 268, 284], "crs1": 287, "crs2": 287, "crucial": [18, 19], "cs_imm5": 287, "cs_imm8": 287, "csr": 287, "csrr": 287, "csrrs_v0": 287, "csrrw": 287, "csrrw_v0": 287, "css_d": 287, "css_w": 287, "csv_with_integ": 229, "csv_with_rang": 229, "cu_imm5": 287, "cumpat": 207, "current": [9, 13, 14, 15, 16, 31, 33, 35, 39, 193, 235, 271, 273, 282, 284, 286, 289], "current_vers": 8, "custom": [16, 268, 281], "customari": 21, "customiz": 19, "cut": 281, "cval": 275, "cw_imm3": 287, "cw_imm5": 287, "cw_imm6": 287, "cwrapper": 16, "cxflag": 278, "cxx": 278, "cycl": [16, 250, 251, 252, 285, 289], "cycle_count": [250, 251, 252, 289], "cycleminimalallocationpass": 147, "d": [10, 16, 21, 235, 236, 237, 247, 248, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "d4700": 10, "d_v0": 287, "d_v1": 287, "dai": 266, "damag": 21, "darpa": 1, "dat": [18, 39, 250, 251, 252], "dat_map": [250, 251, 252, 289], "dat_properti": [250, 251, 252], "dat_raw": 289, "data": [39, 151, 214, 216, 228, 238, 250, 251, 252, 260, 275, 278, 279, 280, 281, 282, 284, 285, 286, 287], "data_fil": 260, "data_lines": 215, "data_reload": 228, "data_seg": 39, "date": [16, 21], "datetim": 16, "datmap": 177, "dc": [18, 20], "dd": [16, 149, 279, 285, 286], "debug": [16, 22, 39, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "debug_opt": 16, "debugg": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "decid": [285, 286], "decim": [16, 18, 287, 289], "declar": [8, 16, 24, 25, 250, 251, 252, 278, 280, 281, 282, 283, 284, 289], "declare_global_var": 50, "declare_vari": [275, 278], "declare_variable_arrai": [275, 278], "declare_variable_array_with_valu": [275, 278], "declare_variable_with_valu": [275, 278], "declarevariablespass": [159, 282], "decod": 276, "decode_next": 227, "decor": [41, 44, 225, 283, 289], "decoupl": 24, "def": [8, 16], "default": [8, 16, 22, 24, 25, 27, 28, 30, 31, 33, 35, 37, 39, 43, 47, 48, 50, 88, 96, 98, 106, 108, 118, 119, 127, 135, 143, 144, 146, 148, 149, 155, 163, 168, 169, 173, 174, 182, 184, 190, 191, 228, 230, 235, 236, 237, 238, 241, 247, 248, 250, 251, 252, 262, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "default_address": [278, 282, 283, 284, 289], "default_branch_indirect_target_pattern": 283, "default_branch_pattern": 283, "default_code_address": [250, 251, 252, 278, 284], "default_context": 39, "default_data_address": [250, 251, 252, 278, 284], "default_io": [187, 188], "default_memory_access_pattern": 283, "default_operand": [187, 188], "default_path": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "default_sect": 235, "default_show": [187, 188], "default_wrapp": [170, 171], "defaultregisterallocationpass": [16, 147, 150], "defaultvalu": 50, "defdict": 241, "defend": 21, "defici": [18, 19, 271], "defin": [8, 16, 19, 21, 22, 23, 24, 25, 33, 35, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 166, 168, 174, 230, 231, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "definit": [8, 16, 18, 19, 21, 22, 40, 166, 168, 172, 173, 174, 209, 224, 226, 241, 249, 250, 251, 252, 262, 266, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291], "definition_nam": 169, "definition_tupl": 166, "delattr": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "delet": 269, "deliber": 21, "delimit": 235, "demand": 13, "dep": [110, 111], "dep1": 125, "dep2": 125, "depend": [8, 12, 16, 19, 20, 43, 151, 235, 264, 269, 279, 280, 281, 282, 285, 286], "dependecy_dist": 16, "dependency_dist": [16, 279, 285, 286], "deploi": 9, "deploy": 9, "deploy_001": 9, "deprec": 16, "depth": [218, 219], "deriv": 21, "descr": [171, 173, 184, 187, 190, 191, 193, 196, 197, 198, 200, 201, 202, 204, 210, 211, 218, 230], "describ": [8, 14, 21, 271, 289], "descript": [8, 11, 14, 16, 21, 85, 87, 88, 163, 165, 167, 168, 170, 171, 173, 174, 184, 185, 187, 188, 190, 191, 193, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 216, 218, 219, 221, 222, 230, 266, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "descriptor": [42, 43, 195, 199], "deseri": 245, "design": [16, 18, 19, 20, 21, 22, 168, 235, 273, 285], "desir": 274, "dest": 232, "detail": [2, 7, 8, 9, 11, 12, 14, 16, 19, 22, 23, 245, 262, 264, 267, 271, 274, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288], "detect": [11, 271, 290], "determin": [14, 21, 271], "dev": 282, "dev_tool": [8, 9], "develop": [8, 10, 11, 14, 16, 18, 19, 20, 22, 263, 264, 265, 266, 269, 271, 282], "deviat": [155, 238], "devic": 287, "devrandom": 282, "diagnos": [18, 19], "diagram": [23, 26, 30, 32, 36, 38, 40, 45, 49, 84, 86, 89, 91, 94, 102, 105, 107, 109, 113, 122, 139, 147, 153, 156, 159, 162, 166, 169, 172, 175, 177, 181, 183, 186, 189, 192, 203, 206, 209, 213, 217, 220, 224, 226, 229, 234, 238, 244, 249], "dict": [8, 24, 25, 39, 41, 168, 173, 174, 186, 235, 236, 237, 247, 248], "dict2ordereddict": 244, "dict_kei": [16, 229], "dict_typ": 235, "dictionari": [8, 39, 168, 229, 230, 235, 236, 237, 247, 248], "did": [12, 14, 264, 271, 282], "didtpass": 132, "didtsimplepass": 122, "diff": [8, 11, 271], "differ": [2, 10, 15, 16, 19, 21, 25, 34, 85, 155, 232, 262, 263, 266, 267, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "dimens": [275, 278], "dir": [16, 279, 285, 286], "direct": [11, 16, 21, 50, 271], "direct_initialization_support": 50, "directli": [10, 11, 269, 271, 280, 281, 282, 283, 284, 286], "directori": [11, 12, 16, 235, 264, 265, 271, 278, 279, 285, 286], "dirnam": 16, "disabl": [16, 24, 25, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "disable_asm": [16, 287], "disableasmbyopcodepass": 122, "disassembl": [276, 277, 284], "disassembli": 284, "discard": 285, "disclaim": 21, "discontinu": 16, "discrete_averag": 238, "discuss": [8, 21], "disk": [16, 24, 25, 245, 275, 278], "displac": [22, 27, 28, 30, 31, 33, 35, 193, 278, 281, 287], "displai": [21, 284], "dissable_field": 184, "dissabled_field": [184, 185], "dissert": 20, "dist": 16, "distanc": [16, 31, 101, 193, 238, 279, 285, 286], "distdict": 238, "distrib": 18, "distribut": [8, 9, 10, 16, 20, 21, 263, 265, 266, 268], "div": 287, "div_v0": 287, "divid": [285, 286, 287], "dividend": 287, "divis": 16, "divisor": 287, "divu": 287, "divu_v0": 287, "divuw": 287, "divuw_v0": 287, "divw": 287, "divw_v0": 287, "do": [8, 9, 10, 11, 14, 21, 262, 263, 265, 268, 271, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 289], "doc": 282, "docstr": 44, "doctor": 20, "document": [2, 9, 10, 13, 16, 21, 22, 23, 49, 165, 230, 265, 266, 267, 268, 273, 279, 285, 286], "doe": [8, 16, 21, 24, 235, 236, 237, 247, 248, 275, 276, 277, 278, 280, 281, 282, 283], "doi": [18, 20], "don": [21, 271], "done": [14, 262, 271, 285, 286], "dot": 8, "doubl": [262, 275, 287, 289], "doubt": [0, 8], "down": [274, 275], "dp": 287, "drive": [10, 16, 23, 166, 273], "driven": 13, "driver": [16, 18, 22], "droop": 20, "dse": 19, "dsn": 20, "dtype": 253, "due": [16, 19, 281], "dummi": [193, 197, 200, 202, 206, 220], "dummy_building_block": [90, 97, 98, 99, 100, 101, 103, 104, 110, 111, 112, 114, 115, 116, 117, 120, 121, 123, 124, 125, 127, 128, 129, 132, 133, 134, 137, 140, 142, 143, 144, 148, 149, 150, 151, 152, 157, 158, 160, 161], "dummy_context": 42, "dummy_defdict": 238, "dummy_idx": 238, "dummy_instr": [182, 238], "dummy_kei": 50, "dummy_reg": 182, "dummy_target": [90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 108, 110, 111, 112, 114, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161], "dummy_valu": 50, "dummycach": 287, "dump": [16, 25, 39, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "dump_mpt_config": [254, 255, 256], "duplic": 289, "duplicateconfigpars": 234, "dure": [16, 19, 166, 224, 226, 235, 262, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "dynam": [19, 25, 39, 289], "dynamicaddresstransl": [39, 177, 180], "e": [8, 10, 16, 19, 22, 25, 39, 166, 168, 207, 224, 235, 236, 237, 247, 248, 262, 265, 266, 268, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "e_stack": 282, "each": [8, 14, 15, 16, 21, 39, 207, 235, 262, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "earli": [19, 20], "easier": 21, "ebreak": 287, "ebreak_v0": 287, "ec": 16, "ecal": 287, "ecall_v0": 287, "echo": 16, "eco": 265, "edit": [11, 12, 271, 275], "editori": 21, "edt": 282, "educ": [12, 264], "effect": [14, 271], "effici": [20, 272], "effort": [271, 273], "either": [8, 16, 21, 232, 235, 236, 237, 247, 248], "elabor": [16, 21], "eldridg": [20, 272], "electron": [20, 21], "elem": [16, 47], "element": [8, 16, 18, 24, 25, 47, 166, 167, 190, 191, 210, 211, 212, 213, 214, 215, 216, 221, 222, 224, 226, 238, 248, 278, 282, 284, 286, 287, 289], "element_typ": [18, 217], "elems_s": 275, "elf": [281, 284], "elf64": 284, "elf_abi": [170, 171], "elf_abi_exit": [278, 282, 283, 284], "elf_abi_start": [278, 282, 283, 284], "elf_output_fil": 281, "elif": 16, "els": [8, 16, 236, 237, 247, 248, 275, 278, 282], "email": [8, 10, 282], "emb": [16, 289], "embed": [16, 20, 24, 25, 282, 289], "empir": 20, "empti": [16, 24, 40, 227, 235, 236, 237, 247, 275, 278], "empty_lines_in_valu": 235, "emul": 283, "en": [12, 264], "enabl": [11, 16, 22, 262, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "encapsul": 166, "enclos": 21, "encod": 246, "encourag": 273, "end": [8, 10, 16, 19, 21, 248, 249, 276, 277, 278, 283, 284, 285, 286, 289], "end_loop": [24, 50], "end_main": [24, 50], "end_sect": 233, "end_variable_registr": [275, 278], "endia": 278, "endian": [275, 280], "endif": 275, "endless": [16, 280, 281, 282, 285, 286], "endlessloopdatamemorymodel": [16, 86], "endlessloopinstructionmemorymodel": 86, "endswith": 16, "endtim": 16, "energi": [18, 19, 20, 279], "engin": [12, 20, 264], "enough": [16, 286], "ensur": [8, 19, 268, 278, 280, 281, 282], "enter": [14, 271], "enterpris": 20, "entir": [12, 264, 274], "entiti": 21, "entri": [8, 278, 281, 282, 283, 284, 288, 289], "env": [16, 18, 166, 168, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "environ": [12, 16, 166, 167, 168, 169, 171, 262, 264, 265, 268, 269, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "environment_nam": 166, "environment_path": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "environment_reserved_regist": [170, 171], "environments_path": 22, "envp": [16, 282], "epi": 279, "epi_output_dir": 279, "epi_output_fil": 279, "epilog": [16, 230], "equal": [8, 23, 287], "error": [0, 8, 12, 16, 20, 22, 66, 230, 231, 232, 262, 264, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "establish": 271, "estim": 20, "et": 20, "etc": [8, 16, 34, 39, 166, 174, 207, 224, 226, 280, 281, 282, 284, 286], "eval_cmd": 16, "evalu": [16, 19], "even": [8, 19, 21], "event": 21, "eventu": 289, "everi": [19, 101, 127, 128, 129, 238, 286], "everyon": 10, "everyth": [8, 284, 288], "exactli": [278, 280, 281, 282, 283, 284], "exampl": [18, 21, 193], "example1": 282, "example_1": 16, "example_2": 16, "example_3": 16, "example_4": 16, "example_5": 16, "example_mpt2test": 282, "examples_output": 282, "exc": 16, "except": [8, 9, 16, 18, 21, 22, 31, 33, 35, 166, 168, 196, 197, 198, 201, 202, 224, 226, 229, 231, 232, 247, 248], "except_rang": 193, "exclud": [21, 235, 284], "exclus": [21, 22], "excpept": 53, "exec": 16, "execcmddriv": 16, "execut": [8, 9, 12, 16, 21, 25, 33, 35, 39, 50, 168, 230, 262, 264, 265, 267, 268, 269, 278, 281, 283, 284, 285, 289, 290], "execution_unit": 16, "exercis": [18, 19, 21], "exist": [14, 16, 19, 224, 226, 235, 248, 271, 276, 277, 278, 281, 284, 287], "existing_cmd": 229, "existing_dir": [16, 229], "existing_fil": 229, "existing_file_ext": 229, "exit": [16, 232, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "exit_cod": 282, "expand": [235, 289], "expans": [278, 282, 283, 284, 289], "expect": [8, 14, 271, 289], "explain": [8, 11, 274, 275, 278], "explan": [8, 14, 16, 271], "explanatori": 16, "explicitli": [8, 21], "explod": 285, "explor": [16, 19, 20, 22, 168, 285], "export": 8, "express": [8, 16, 21], "extend": [15, 22, 230, 235, 244, 278, 287], "extens": [14, 19, 229, 265, 271, 283], "extern": [16, 275, 278], "extra": [8, 16, 24, 25, 31, 190, 191, 230, 262, 268, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "extra_import_nam": 241, "extra_raw": [24, 25], "extract": [20, 278, 281, 284], "f": [16, 235, 236, 237, 240, 247, 248, 275, 279, 281, 284, 285, 287], "f0": [282, 287], "f1": [282, 287], "f10": [282, 287], "f11": [282, 287], "f12": [282, 287], "f13": [282, 287], "f14": [282, 287], "f15": [282, 287], "f16": [282, 287], "f17": [282, 287], "f18": [282, 287], "f19": [282, 287], "f2": [282, 287], "f20": [282, 287], "f21": [282, 287], "f22": [282, 287], "f23": [282, 287], "f24": [282, 287], "f25": [282, 287], "f26": [282, 287], "f27": [282, 287], "f28": [282, 287], "f29": [282, 287], "f3": [282, 287], "f30": [282, 287], "f31": [282, 287], "f4": [282, 287], "f5": [282, 287], "f6": [282, 287], "f7": [282, 287], "f8": [282, 287], "f9": [282, 287], "facad": 168, "face": 278, "facil": [19, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "facilit": [8, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "fact": 19, "factor": [8, 286], "fadd": [16, 287], "fadd_v0": 16, "fadds_v0": 16, "faddsx_v0": 16, "faddx_v0": 16, "fail": [8, 16, 155, 276, 280, 281, 285], "failur": [21, 287], "fall": 275, "fallback": 235, "fals": [16, 22, 24, 25, 33, 35, 39, 93, 95, 96, 118, 131, 133, 140, 142, 143, 146, 149, 157, 160, 163, 164, 170, 171, 173, 174, 178, 180, 182, 184, 185, 197, 210, 211, 212, 218, 219, 221, 222, 224, 226, 227, 228, 229, 230, 235, 241, 244, 248, 251, 252, 287], "faq": [18, 270], "fashion": [8, 16, 19, 25, 278, 282, 284, 286, 289], "fasten": 268, "fault": [278, 280, 281, 282], "favorit": [16, 289], "favourit": [12, 264], "fclass": 287, "fclose": 282, "fcrd": 287, "fcreg": 287, "fcvt": 287, "fdiv": 287, "fe079ae3": 284, "featur": [8, 11, 13, 18, 224, 226, 266, 271, 278, 282, 283, 284, 288, 289], "fee": 21, "feel": [7, 272, 273], "fenc": 287, "fence_v0": 287, "feq": 287, "few": 16, "ff2": 287, "ff2rm": 287, "ffname": 16, "field": [8, 14, 21, 41, 184, 187, 188, 190, 191, 271, 286, 289], "fieldnam": [41, 287], "fifo": 248, "fifti": 21, "figur": [266, 278], "file": [8, 9, 10, 11, 14, 16, 21, 22, 167, 228, 232, 235, 246, 250, 251, 252, 260, 262, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290], "file_foot": [24, 289], "file_head": [24, 289], "file_with": 229, "filenam": [16, 24, 25, 162, 167, 183, 186, 189, 192, 203, 206, 217, 220, 228, 230, 235, 244, 254, 255, 256, 259, 283], "fill": 16, "filter": 16, "final": [8, 12, 16, 24, 25, 33, 35, 262, 264, 278, 285, 286], "finalize_model": 87, "find": [7, 14, 16, 19, 266, 269, 271, 273, 282, 285, 287], "find_env_definit": 169, "find_isa_definit": [16, 172], "find_microarchitecture_definit": 209, "find_subclass": 241, "findfil": 244, "fine": 266, "fini": [33, 35], "finish": 8, "fio": 187, "first": [2, 8, 11, 14, 16, 73, 190, 191, 232, 236, 237, 247, 271, 275, 278, 285, 289], "fit": [21, 281], "fix": [8, 11, 13, 14, 16, 18, 19, 264, 268, 271, 275, 278, 284, 285, 289], "fix_32bit_address": 281, "fix_rel": 40, "fix_start_address": 281, "fix_vartyp": 275, "fixindirectbranchpass": 94, "fixing_funct": 41, "fixmemoryreferencespass": 139, "fixregisterspass": 147, "fl": 20, "flag": [16, 43, 187, 190, 191, 195, 199, 214, 216, 230, 262, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 290], "flag_regist": [173, 174], "flatten": [280, 281], "fld": [282, 287], "fld_v0": 287, "fldsp": 287, "fldsp_v0": 287, "fle": 287, "flexibl": [19, 274], "flip": [190, 191], "flip_field": [190, 191], "float": [16, 18, 29, 39, 149, 155, 193, 196, 197, 198, 200, 201, 202, 207, 240, 244, 275, 287], "float_rang": 229, "float_regist": [173, 174], "float_to_nnp_data_type_1": 240, "float_typ": [16, 229], "float_val": 240, "floating_point": [198, 201], "flow": [2, 12, 18, 23, 33, 35, 37, 264], "flt": 287, "flw": 287, "flw_v0": 287, "fmadd": 287, "fmax": 287, "fmin": 287, "fmsub": 287, "fmt": [226, 227, 229], "fmul": [16, 287], "fmul_v0": 16, "fmuls_v0": 16, "fmulsx_v0": 16, "fmulx_v0": 16, "fmv": 287, "fname": [16, 187, 190, 191, 275], "fname1": [190, 191], "fname2": [190, 191], "fnmadd": 287, "fnmsub": 287, "foat": 287, "focu": 13, "fold": 278, "follow": [7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 166, 224, 226, 235, 236, 237, 247, 248, 262, 264, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "footer": [24, 50, 281, 289], "fopen": 282, "foperand": 187, "forbid_read": 150, "forbid_writ": 150, "forbidden": 193, "forbiddend": 42, "forc": [16, 93, 95, 96, 118, 131, 164, 170, 171, 184, 185, 210, 211, 212, 218, 219, 221, 222, 241, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "force_absolut": [39, 173, 174], "force_cod": 118, "force_config_fil": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "force_control": 118, "force_error": 232, "force_rel": [173, 174], "force_valu": 118, "form": [14, 21, 166, 266, 271, 275, 284, 286], "format": [16, 18, 21, 22, 24, 25, 50, 184, 185, 190, 191, 235, 244, 262, 274, 276, 277, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290], "format_exc": 16, "format_help": [232, 233], "format_usag": 232, "formatt": 8, "formula": 194, "forward": 286, "found": [14, 16, 17, 31, 39, 168, 176, 235, 236, 237, 247, 248, 268, 271], "foundat": [10, 278], "four": [16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "fp": [235, 278, 282, 284, 287, 289], "fp_valu": [16, 119], "fpr": 16, "fpscr": 16, "fr2": 287, "fr2rm": 287, "framework": [0, 2, 8, 11, 13, 16, 18, 19, 20, 22, 23, 53, 262, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "francisco": [10, 20], "frd": 287, "fread": 282, "free": [7, 21, 272, 273], "freg": 287, "freqhz": 125, "from": [0, 8, 11, 14, 16, 21, 25, 31, 33, 34, 35, 39, 40, 155, 224, 226, 228, 230, 232, 235, 236, 237, 238, 245, 247, 248, 262, 269, 271, 275, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289], "from_address": 284, "fromkei": [236, 237, 247, 248], "frs1": 287, "frs2": 287, "frs3": 287, "fsd": [282, 287], "fsd_v0": 287, "fsdsp": 287, "fsdsp_v0": 287, "fsgnj": 287, "fsgnjn": 287, "fsgnjx": 287, "fshow": 187, "fsize": 187, "fsqrt": 287, "fsub": 287, "fsw": 287, "fsw_v0": 287, "fulfil": [16, 18, 19, 33, 35], "full": [0, 16, 190, 191, 230, 244, 262], "full_nam": [218, 219], "full_report": [16, 168, 170, 171, 173, 174, 184, 185, 190, 191, 194, 195, 210, 211, 212], "fulli": 287, "fun": 12, "func": 8, "func_unit": 16, "func_unit_nam": 16, "funct10": 287, "funct2": 287, "funct25": 287, "funct3": 287, "funct4": 287, "funct5": 287, "funct6": 287, "function": [8, 9, 16, 19, 34, 59, 61, 73, 74, 230, 264, 268, 278, 280, 281, 284], "function_cal": [170, 171], "function_return": [170, 171], "functional_unit": 16, "functional_unit_nam": 16, "further": [2, 11, 16, 22, 23, 262, 264, 271, 274, 280, 281, 282, 285, 288], "fuse": 287, "futur": [8, 16, 19, 264, 288, 290], "fvalu": 182, "fxu": 16, "fxu0_core0_scm_processor": 16, "g": [8, 16, 39, 166, 207, 235, 265, 266, 268, 275, 278, 282, 283, 284, 285, 286, 288, 289], "ga": 16, "ga_param": 16, "ga_sol_param": 16, "garch": 16, "gather": 283, "gcc": [16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "gdb": 278, "gener": [0, 2, 8, 9, 11, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 43, 74, 166, 168, 173, 176, 184, 187, 190, 193, 195, 196, 197, 198, 200, 201, 202, 204, 210, 221, 236, 262, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291], "generate_genet": 16, "generate_plain_profil": 238, "generate_weighted_profil": 238, "generated_cod": 16, "genericcodestructurepass": 153, "genericcpumicroarchitectur": 209, "genericdynamicaddresstransl": 177, "genericenviron": 169, "genericinstructionfield": 186, "genericinstructionformat": 189, "genericinstructiontyp": 183, "genericisa": 172, "genericmemorymodelpass": [16, 139], "genericmemorystreamspass": 139, "genericmicroarchitectur": [209, 210], "genericmicroarchitectureel": 217, "genericmicroarchitectureelementtyp": 220, "genericmodel": [84, 86, 87, 88], "genericoldmemorymodelpass": 139, "genericregist": 203, "genericregistertyp": 206, "genet": 16, "gerard": 20, "get": [16, 18, 39, 50, 230, 235, 236, 237, 247, 248, 262, 265, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "get_address": 44, "get_all_subclass": 241, "get_asm": 44, "get_attr_from_modul": 241, "get_bbl": 37, "get_closest_address_valu": 39, "get_closest_valu": 39, "get_com": 44, "get_context": [173, 174], "get_dat": [173, 174], "get_data_hierarchy_from_el": [16, 215], "get_decor": 44, "get_default": 232, "get_dict_from_modul": 241, "get_direct_init": 50, "get_field": [190, 191], "get_field_prop": [190, 191], "get_findex": [190, 191], "get_instruction_by_dist": 31, "get_instruction_hierarchy_from_el": 215, "get_instruction_index": 31, "get_instruction_typ": 44, "get_label": 44, "get_logg": [16, 243], "get_memory_valu": 39, "get_object_from_modul": 241, "get_operand": [44, 190, 191], "get_register_closest_valu": 39, "get_register_for_address_arithmet": [173, 174], "get_register_for_float_arithmet": [173, 174], "get_register_valu": 39, "get_registername_valu": 39, "get_wrapp": [16, 23], "getattr": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "getboolean": 235, "getfloat": 235, "getint": 235, "getnextf": 244, "giga": [18, 19], "git": [8, 10, 11, 12, 262, 263, 267, 271, 282], "github": [9, 11, 12, 264], "give": [16, 21], "given": [16, 30, 31, 33, 35, 37, 39, 40, 73, 74, 155, 166, 172, 176, 209, 216, 228, 230, 235, 236, 237, 247, 248, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "global": [24, 33, 35, 275, 278], "gm": 285, "gmail": 272, "gnu": [277, 278, 282, 283, 284, 289], "go": [8, 11, 14, 16, 168, 262, 271, 275, 278, 280, 281, 282, 285, 286, 289], "goal": [8, 274], "goe": [14, 271], "gonzalez": [18, 20], "good": [14, 271], "goodwil": 21, "govern": [8, 16, 21], "gpr": 16, "gpr1": 16, "gr0": [278, 282, 284, 289], "gr1": [278, 282, 284, 289], "gr2": [278, 282, 284, 289], "gr31": 289, "grain": 266, "grant": 21, "granular": 266, "graph": [23, 33, 35, 37], "greater": 287, "grep": 281, "grossli": 21, "ground": 8, "group": [230, 233, 272, 285, 288], "group1": 285, "group2": 285, "group_max": 285, "group_min": 285, "growth": [18, 19], "guid": [8, 18, 261, 265, 268], "guidelin": [14, 271, 278], "gupta": [18, 20], "gz": 283, "h": [16, 20, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "ha": [0, 2, 14, 16, 21, 235, 236, 237, 247, 248, 268, 271, 275, 278, 280, 281, 282, 286, 287, 289], "half": 287, "handl": [16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "happen": [8, 14, 271], "harden": [18, 19], "hardwar": [14, 20, 271], "harmless": 21, "has_opt": 235, "has_sect": 235, "hash": 230, "have": [8, 9, 10, 12, 14, 15, 16, 19, 21, 24, 25, 168, 230, 235, 262, 264, 268, 269, 271, 275, 278, 280, 281, 282, 285, 286, 289], "hazard": 151, "he": 16, "head": 233, "header": [8, 16, 24, 25, 50, 230, 235, 281, 289], "held": 235, "help": [8, 16, 18, 19, 230, 233, 262, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "helper": [8, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 176, 231, 235, 245], "helper_instr": 176, "helpformatt": [229, 233], "here": [8, 17, 165, 267, 275, 278, 284, 288], "herebi": 21, "herein": 21, "hex": [16, 22, 226, 227, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "hex_address": 22, "hex_al": 22, "hex_non": 22, "hexadecim": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "hhi": 275, "hhu": 275, "hi": 275, "hierarchi": [16, 18, 19, 53, 210, 215, 287], "high": [8, 20, 278, 287], "higher": 16, "highest": 33, "highlight": 8, "hit": [16, 275], "hold": [18, 19, 21], "home": 235, "hook_after_reset_instruct": [170, 171], "hook_after_test_instruct": [170, 171], "hook_before_test_instruct": [170, 171], "hook_test_end_instruct": [170, 171], "hook_test_init_instruct": [170, 171], "hopefulli": [12, 264], "host": [275, 278], "host_c_compil": 278, "host_c_compiler_flag": 278, "host_cxx_compil": 278, "host_cxx_compiler_flag": 278, "host_displac": 278, "hour": 266, "how": [8, 14, 15, 16, 21, 24, 25, 265, 267, 271, 275, 285, 286], "howev": [8, 18, 19, 21, 273, 274, 281, 289], "hpca": 20, "hr0011": 1, "http": [8, 12, 14, 16, 21, 264, 271], "hu": 275, "huge": 273, "human": [0, 288], "hyper": 16, "hypervisor": 16, "i": [0, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 39, 40, 43, 46, 47, 48, 49, 50, 59, 73, 74, 166, 167, 168, 176, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 207, 224, 226, 230, 232, 235, 236, 237, 245, 247, 248, 262, 264, 265, 266, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "i_imm12": 287, "i_imm6": 287, "i_imm7": 287, "i_shamt5": 287, "i_shamt6": 287, "i_v0": 287, "ibm": [1, 8, 12, 13, 14, 16, 20, 264, 271, 272, 282], "iccd": 20, "ideal": [279, 285], "identif": 21, "identifi": [21, 207], "idescr": 184, "idx": [24, 25, 33, 35], "ie": [279, 286], "ieee": [18, 20], "ieee_float_to_int64": 240, "ifield": 189, "ifip": 20, "ifndef": 275, "iformat": 184, "ifval": [126, 131], "ig": 285, "ignor": [39, 235, 279, 280, 281, 282, 283, 285, 286], "ii": 21, "iii": 21, "iiswc": 20, "illeg": 16, "illustr": [285, 286], "ilp": [16, 18, 279, 286], "im": 285, "imag": 278, "imm11": 287, "imm12": 287, "imm20": 287, "imm20_clui": 287, "imm4": 287, "imm5": 287, "imm6": 287, "imm7_w": 287, "imm8_d": 287, "imm8_w": 287, "imm9_d": 287, "immedi": [16, 24, 25, 193, 196, 197, 198, 200, 201, 202, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "imp": 18, "impl": 251, "implement": [8, 9, 11, 13, 15, 16, 19, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 168, 184, 224, 226, 231, 245, 264, 268, 271, 278, 280, 281, 282, 283, 284, 289, 290], "impli": [8, 16, 21, 280, 281, 282], "implicit": [230, 286, 287], "implicit_operand": [184, 185], "implicitli": 8, "import": [8, 16, 21, 22, 166, 172, 209, 241, 262, 275, 278, 282, 287], "import_classes_from": [175, 181], "import_cls_definit": 241, "import_definit": [16, 166, 183, 186, 189, 192, 203, 206, 217, 220, 241], "import_env_definit": 169, "import_isa_definit": [16, 172], "import_microarchitecture_definit": 209, "import_operand_definit": 241, "import_properti": 162, "improv": [2, 13, 14, 21, 264, 271, 273], "inabl": 21, "inam": 184, "incident": 21, "includ": [8, 10, 14, 16, 19, 21, 174, 235, 268, 271, 275, 278, 282, 284, 288, 289], "inclus": 21, "incorpor": [21, 232, 281], "increas": [16, 19, 20, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "incur": 21, "indefinit": 10, "indemn": 21, "indemnifi": 21, "indent": 289, "indent_incr": 233, "independ": 176, "index": [0, 16, 31, 37, 123, 158, 190, 191, 193, 196, 197, 198, 200, 201, 202, 266, 275, 286], "indic": [10, 16, 18, 21, 39, 50, 184, 190, 191, 235, 246, 283, 287], "indirect": [21, 98, 280, 281, 282, 283], "individu": 21, "infer": 289, "infinit": [16, 50], "info": [16, 18, 22, 33, 34, 35, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "inform": [10, 14, 16, 19, 21, 25, 33, 34, 35, 166, 262, 268, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "infring": 21, "inherit": [34, 192, 245], "ini": [235, 288], "init": [16, 33, 35, 279], "init_from_first": 93, "init_global_var": 50, "init_loop_pad": 50, "init_main_pad": 50, "init_valu": [258, 275, 278, 282, 284, 289], "initi": [16, 18, 24, 25, 33, 35, 50, 271, 275, 278, 279, 280, 281, 282, 283, 284, 289], "initialization_cod": 16, "initialize_model": 87, "initializebranchdecor": 94, "initializebranchdecoratorpass": 98, "initializedatpass": 102, "initializememorydecimalpass": [16, 105], "initializememorydecor": 139, "initializememorydecoratorpass": 144, "initializememoryfloatpass": [16, 107], "initializeregisterpass": [16, 113], "initializeregisterspass": [16, 113, 282], "inject": 287, "inlin": 282, "inline_comment_prefix": 235, "input": [8, 16, 43, 184, 185, 187, 190, 191, 199, 262, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "input_bin_fil": [276, 277], "input_c_fil": 278, "input_in": 40, "input_list": 244, "input_objdump_fil": 284, "ins": [16, 18, 23, 173, 214, 216, 262, 279, 285, 287], "ins1": 285, "ins2": 285, "ins3": 285, "ins4": 285, "ins_typ": 40, "insert": [31, 236, 237, 247, 248], "insert_instr": 31, "insertinstructionsequencepass": 122, "inspect": [11, 271], "inspector": 278, "instal": [11, 12, 16, 18, 261, 267, 271], "installdirectori": [12, 262, 264, 265, 269], "instanc": [8, 9, 16, 23, 24, 25, 31, 40, 50, 74, 167, 168, 176, 184, 185, 187, 204, 205, 214, 216, 221, 222, 278, 282, 284, 285], "instanti": [16, 24], "instead": [235, 275, 280, 281, 282], "institut": 21, "instr": [16, 31, 33, 35, 37, 40, 50, 116, 117, 124, 127, 129, 136, 137, 224, 286, 287], "instr1": [31, 101, 128, 286], "instr2": [31, 101, 128, 286], "instr_nam": [16, 176, 182], "instr_reset": 50, "instrs1": 125, "instrs2": 125, "instrtyp": 41, "instrucion": 16, "instruct": [8, 14, 16, 18, 19, 22, 23, 28, 31, 33, 35, 37, 40, 42, 43, 50, 155, 157, 166, 168, 173, 174, 176, 187, 188, 190, 191, 193, 194, 196, 210, 211, 212, 214, 216, 224, 226, 250, 251, 252, 262, 263, 265, 267, 268, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "instructin": 16, "instruction_check": [184, 185], "instruction_count": [250, 251, 252, 289], "instruction_factori": 40, "instruction_field": 18, "instruction_format": 18, "instruction_from_definit": 40, "instruction_group": 285, "instruction_map": 285, "instruction_nam": 16, "instruction_properties_def": [210, 211], "instruction_sequ": 286, "instruction_set_def_properti": 40, "instruction_slot": 285, "instruction_to_asm_definit": 224, "instruction_to_definit": 40, "instruction_typ": 44, "instruction_type_from_bin": 183, "instructionaddress": [26, 41], "instructionaddressrelativeoperand": [192, 287], "instructionfield": [186, 187, 190, 191], "instructionformat": [184, 189, 190], "instructionmemoryoperandvalu": 40, "instructionoperandvalu": [40, 42], "instructions_from_asm": 40, "instructiontyp": [8, 16, 40, 41, 44, 168, 173, 174, 183, 184], "instructon": 41, "insturct": 281, "int": [16, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 42, 46, 47, 48, 50, 73, 74, 87, 88, 112, 149, 155, 171, 176, 184, 187, 188, 193, 195, 196, 197, 198, 200, 201, 202, 207, 208, 214, 216, 244, 246, 250, 251, 252, 275, 278, 282, 284, 289], "int16_t": 275, "int32_t": 275, "int64_t": [275, 278, 282], "int8_t": [275, 282], "int_fast16_t": 275, "int_fast32_t": 275, "int_fast64_t": 275, "int_fast8_t": 275, "int_least16_t": 275, "int_least32_t": 275, "int_least64_t": 275, "int_least8_t": 275, "int_rang": 229, "int_to_twoc": 244, "int_typ": [16, 229], "intal": 267, "integ": [16, 22, 244, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "integr": [7, 8, 18, 19], "intention": 21, "interact": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "interchang": [190, 191], "interest": [8, 250, 251, 252, 289], "interfac": [16, 21, 23, 168, 176, 230, 245, 271, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287], "intermedi": 278, "intern": [16, 18, 19, 20, 224, 226, 229, 271, 274], "internet": [12, 264], "interpol": 235, "interpret": [224, 226, 282, 284, 286], "interpret_asm": 224, "interpret_bin": 226, "intersocieti": 20, "intim": [18, 19], "intr": 16, "introduc": [15, 16], "intruct": [40, 184, 283], "inttyp": 275, "invalid": 290, "invalidregistertypeerror": 8, "invok": [184, 185], "involv": [10, 14, 271], "io": [12, 195, 264, 275, 278], "ioperand": 184, "ipc": 16, "ipc1": 125, "ipc2": 125, "ireg": 287, "irrevoc": 21, "is_agen": 195, "is_branch_target": 195, "is_input": [43, 199], "is_load": [16, 195], "is_output": [43, 199], "is_prefetch": 195, "is_stor": [16, 195], "isa": [8, 16, 18, 19, 20, 22, 166, 168, 169, 170, 171, 279, 282, 285, 287, 290], "isadef": [16, 241], "isanam": 16, "isdir": 16, "isfil": 16, "isscc": 20, "issu": [7, 8, 11, 12, 16, 18, 21, 264, 268, 271, 275, 278, 280, 281, 282, 285, 286], "item": [10, 16, 235, 236, 237, 238, 239, 247, 248], "iter": [8, 234, 235, 236, 237, 244, 247, 248, 279, 280, 281, 285, 286], "iter_flatten": 244, "itherm": 20, "itr": 244, "its": [8, 10, 12, 16, 21, 39, 40, 207, 264, 275, 278, 286, 289], "itself": [14, 271, 278, 284], "j": [20, 272, 275, 287], "j_v0": 287, "jacobson": 20, "jal": [278, 282, 287], "jal_v0": 287, "jalr": [282, 284, 287], "jalr_v0": 287, "jan": 20, "januari": 21, "jenkin": 9, "jenkinsfil": 9, "job": 16, "join": [16, 272], "journal": 20, "jr": [278, 287], "jr_v0": 287, "jrd": 20, "jssc": 20, "juli": 20, "jump": [281, 287], "just": [8, 11, 12, 14, 264, 269, 271, 275, 278, 286, 289], "k": [16, 20, 235, 236, 237, 247, 248, 275], "karthik": 272, "keep": 16, "kei": [8, 16, 18, 41, 50, 235, 236, 237, 241, 247, 248], "keyerror": [235, 236, 237, 247, 248], "keyword": [278, 282, 284, 289], "kilobyt": [214, 216], "kind": [8, 14, 16, 21, 166, 271], "knob": 16, "know": [15, 18, 20, 24, 265, 268, 269, 271, 275, 283, 285], "knowledg": [10, 18, 19], "known": [280, 281, 282, 288], "kudva": 20, "kvswamin": 272, "kwarg": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 103, 119, 171, 173, 174, 179, 180, 230, 231, 232, 235, 236, 247, 248], "l": [16, 286, 287], "l1": 16, "l1d": 16, "l1l2": 16, "l1l3": 16, "l2": [16, 286, 287], "l2l3": 16, "l3": 16, "l_v0": 287, "l_v1": 287, "la": 20, "label": [14, 33, 35, 39, 40, 41, 44, 158, 224, 225, 226, 271, 278, 280, 281, 282, 283, 284, 289], "label1": 289, "label2": 289, "label3": 289, "label_displ": 40, "lack": [235, 236, 237, 247, 248], "languag": [8, 16, 21, 50], "larger": 287, "larl": 289, "last": [9, 16, 37, 235, 236, 237, 247, 248, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "last_bbl": 37, "lastdict": 238, "lat": 16, "late": [11, 271], "latenc": 16, "latest": 269, "law": [8, 16, 21], "lawsuit": 21, "layout": [24, 281], "lazi": 232, "lazyargumentpars": 229, "lb": 287, "lb_v0": 287, "lbu": 287, "lbu_v0": 287, "lbz_v0": 285, "lcount": [275, 278], "ld": [16, 278, 281, 282, 283, 284, 287], "ld_v0": [285, 287], "ld_v1": 16, "ldsp": 287, "ldsp_v0": 287, "ldx_v0": 285, "le": 290, "learn": [14, 18, 20, 271, 274], "least": [21, 280, 281, 282, 285], "left": 287, "legal": 21, "len": 16, "length": [29, 39, 42, 146, 173, 174, 190, 227, 253, 285, 286, 287, 289], "length_formula": 194, "length_operand": 194, "length_valu": 42, "less": [14, 271, 274, 287], "let": [15, 16, 18, 20, 265, 268, 275, 285, 286], "letterman": 10, "level": [8, 16, 18, 19, 22, 33, 214, 216, 243, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "leverag": 13, "lf": [275, 287], "lghi": 289, "lh": 287, "lh_v0": 287, "lhu": 287, "lhu_v0": 287, "li": [275, 287], "li_v0": 287, "liabil": 21, "liabl": 21, "librari": [275, 278], "licens": [8, 10, 16, 18, 282], "licensor": 21, "lifo": [236, 237, 247, 248], "like": [10, 14, 19, 24, 235, 236, 237, 247, 248, 262, 268, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "limit": [8, 16, 21, 281], "line": [8, 10, 16, 18, 214, 216, 230, 235, 262, 268, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291], "line_s": [214, 216], "liner": [8, 165], "link": [21, 263, 265, 275, 282, 284, 287], "linkag": 284, "linkbbl": 94, "linkedlist": [275, 278, 282, 284], "linker": 282, "linux": [10, 263, 265, 268, 278, 282, 287, 290], "liquid": 20, "list": [8, 16, 18, 20, 21, 22, 24, 25, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 138, 168, 169, 172, 174, 176, 181, 184, 185, 186, 190, 191, 193, 196, 197, 198, 200, 201, 202, 203, 209, 216, 220, 224, 226, 230, 231, 235, 250, 251, 252, 262, 265, 266, 269, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "list_properti": [164, 170, 171, 184, 185, 210, 211, 212, 218, 219, 221, 222], "list_property_fil": 162, "listdir": 16, "litig": 21, "littl": 280, "little_endian": [170, 171, 226, 227], "littleriscv": 284, "ll": [18, 20, 266], "lli": 275, "lma": 16, "lmv": 16, "lmw_v0": 16, "load": [8, 16, 173, 174, 193, 195, 278, 280, 281, 282, 285, 286, 287, 289], "load_float": [173, 174], "load_sourc": 241, "load_var_address": 8, "loadsonli": [142, 143], "loc1": 286, "loc2": 286, "local": [8, 9, 16, 238, 275, 278, 286], "local_instr": 97, "locat": [12, 16, 167, 235, 280, 281, 282, 289], "locdef": 238, "lock": 268, "log": [16, 224, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "logger": [16, 18, 22], "logic": [287, 289], "long": [8, 16, 39, 168, 275, 281, 284], "long_jump": [170, 171], "longest_common_substr": 244, "look": [8, 16, 23, 37, 39, 166, 235, 265], "lookuperror": 70, "loop": [16, 34, 50, 279, 280, 281, 282, 283, 285, 286], "loop1": 289, "lose": [11, 271], "loss": 21, "lot": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "low": [19, 20, 287], "lower": [278, 284, 287], "lower_bound": 193, "lpswe": 289, "lr": 287, "lsu": 16, "lsu0_core0_scm_processor": 16, "lsu_core0_scm_processor": 16, "lswi_v0": 16, "lswx_v0": 16, "lu": [275, 287], "lu_v0": 287, "lu_v1": 287, "lui": [278, 282, 284, 287], "lui_v0": 287, "lvxl_v0": 286, "lw": 287, "lw_v0": 287, "lwa_v0": 286, "lwsp": 287, "lwsp_v0": 287, "lwu": 287, "lwu_v0": 287, "lwz_v1": 16, "lxvw4x_v0": 286, "m": [20, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "m64": 278, "ma": [20, 283], "machin": [16, 18, 19, 20, 185, 194, 196, 284, 285], "macro": [275, 278], "made": 21, "magic": 8, "mai": [0, 8, 10, 14, 16, 18, 19, 21, 235, 268, 271, 278, 281, 284], "mail": 21, "main": [8, 13, 16, 22, 23, 166, 224, 226, 230, 263, 265, 271, 272, 275, 278, 281, 282, 286], "main_setup": 16, "mainfram": 20, "mainli": 13, "maintain": [10, 281, 282], "major": [266, 268], "make": [10, 11, 12, 16, 19, 21, 24, 238, 264, 271, 275, 280, 281, 282], "malfunct": 21, "manag": [12, 20, 21, 265, 268, 269, 272], "mandatori": [19, 275, 278, 289], "mani": [271, 285, 286], "manner": [8, 235], "manual": [8, 18, 19, 268, 280, 281, 282, 289], "map": [7, 8, 16, 18, 168, 173, 174, 179, 180, 230, 234, 235, 250, 251, 252, 285, 289], "mapping_address": 289, "mappingproxi": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "marc": [18, 20], "mark": [18, 19, 21], "marker": 8, "mask": [16, 173, 174, 178, 179, 180, 184, 285, 287, 289], "master": [11, 19, 271], "mata": 275, "matb": 275, "matc": 275, "match": [176, 184, 285, 289], "matrix": 275, "max": [200, 283, 285, 286], "max_address": 42, "max_elem": 229, "max_help_posit": 233, "max_memori": 286, "max_regset": 286, "max_siz": 132, "max_trace_s": 283, "max_val": 229, "max_valu": 229, "maxcount": 244, "maxdep": 112, "maxdispl": 193, "maxim": [16, 19, 285, 286, 287, 288], "maximum": [16, 193, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "maxin": 25, "maxlat": 133, "maxmin": 244, "maxvalu": [135, 200, 238], "mcomp": 16, "mcpu": 16, "me": [10, 286], "mean": [21, 279, 284, 285, 286], "meanwhil": 271, "mechan": [21, 289], "media": 21, "medium": 21, "meet": 21, "meeta": [18, 20], "mem": 16, "mem_valu": 39, "memcpi": 282, "memmodel": 16, "memori": [16, 18, 19, 29, 39, 41, 42, 50, 174, 194, 195, 250, 251, 252, 279, 280, 281, 282, 283, 286, 287, 289], "memory_model": 16, "memory_operand": 41, "memory_operand_descriptor": [16, 42, 184, 185], "memory_stream": 286, "memoryoperand": [41, 192], "memoryoperanddescriptor": 192, "memoryvalu": [26, 39], "memref": 283, "mention": 290, "merchant": 21, "mere": 21, "messag": [16, 22, 33, 34, 35, 230, 232, 246, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "meta": 266, "metadata": 284, "metavar": [16, 230], "method": [11, 16, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 50, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 221, 222, 225, 227, 230, 232, 233, 235, 236, 237, 239, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 271], "methodologi": 9, "micrarchitectur": [214, 216], "micro": [18, 20, 282], "microarchitectur": [16, 18, 19, 20, 22, 166, 167, 168, 209, 210, 211, 214, 216, 221, 222, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "microarchitecture_path": [22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "microarchitectureel": [214, 215, 216, 217, 218], "microarchitectureelementtyp": [220, 221], "microbenchmark": [0, 16, 18, 19, 20, 22, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291], "microprob": [0, 2, 7, 8, 9, 11, 13, 14, 15, 16, 20, 261, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "microprobe_al": [265, 266, 267, 269], "microprobe_cor": 266, "microprobe_doc": 266, "microprobe_rc": [16, 22], "microprobe_stack": [278, 282, 284], "microprobe_stack_pcrel_1": 278, "microprobe_target_pow": [16, 266], "microprobe_target_power_priv": 266, "microprobe_target_priv": 266, "microprobe_target_riscv": 266, "microprobe_target_z": 266, "microprobearchitecturedefinitionerror": 56, "microprobeasmerror": 224, "microprobeasmhexfmt": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "microprobeasminstructiondefinit": 224, "microprobebinaryerror": 226, "microprobebininstructionstream": 226, "microprobecodegenerationerror": [31, 59, 63, 73, 74], "microprobeconfigur": [234, 237], "microprobedata": 22, "microprobedebug": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "microprobedebugpass": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "microprobedefaultconfigur": [22, 234], "microprobeerror": [16, 54, 55, 57, 58, 60, 62, 64, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 83], "microprobeexcept": [16, 66, 82], "microprobeinstructiondefinit": [40, 224, 226, 250, 251, 252], "microproberc": 22, "microprobetargetdefinitionerror": [16, 166, 168], "microprobetempl": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "microprobetest": [278, 280, 281, 282, 283, 284], "microprobetestdefinit": [249, 251], "microprobetestdefinitiondefault": [249, 252], "microprobetestdefinitionv0x5": 249, "microprobetestmemoryaccessdefinit": 249, "microprobetestpars": [249, 255], "microprobetestparserdefault": [249, 256], "microprobetestparserv0x5": 249, "microprobetestregisterdefinit": [249, 250, 251, 252], "microprobetestvariabledefinit": [249, 250, 251, 252], "microprobevalueerror": [65, 196, 197, 198, 201, 202], "microprobewarn": 80, "microprobewrapp": 22, "microprocessor": [18, 19, 20], "microprovevalueerror": 81, "might": [12, 16, 166, 264, 273, 275, 278, 280, 281, 282, 285, 286, 289, 290], "min": [197, 200, 202, 285, 286], "min_address": 42, "min_elem": 229, "min_memori": 286, "min_val": 229, "min_valu": 229, "mind": [18, 19], "mindispl": 193, "minim": [19, 149, 168, 280, 281, 282], "minimum": [193, 275, 278, 279, 285, 286, 287], "minimum_chunk": 88, "minimum_displac": 88, "minlat": 133, "minor": 266, "minut": [16, 266], "minvalu": [135, 200, 238], "misc": [16, 18, 40, 166, 203], "miss": 8, "mitig": 20, "mix": 8, "mm": 286, "mmodel": 16, "mnemon": [173, 174, 184, 185, 287], "mno": 282, "mod": [8, 117], "mode": [16, 22, 244, 246, 262, 269, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "model": [16, 18, 19, 20, 22, 141, 142, 143, 154, 283, 286], "modelnam": 16, "modelobj": 16, "modern": 20, "modif": [8, 10, 11, 21, 271, 280, 281, 282], "modifi": [8, 10, 11, 12, 18, 19, 21, 90, 264, 271, 275, 278, 280, 281, 282, 284, 286, 291], "modul": [0, 14, 16, 22, 23, 26, 30, 32, 36, 38, 40, 45, 49, 52, 53, 86, 91, 94, 102, 105, 107, 109, 113, 122, 139, 147, 153, 156, 159, 162, 165, 166, 168, 169, 175, 177, 181, 183, 186, 189, 192, 203, 206, 213, 217, 220, 224, 226, 228, 229, 234, 238, 240, 241, 242, 243, 244, 249, 259, 260, 262, 266, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "modular": 176, "module_str": 241, "month": 266, "moper": 16, "moperand": 184, "more": [2, 8, 12, 16, 18, 19, 21, 155, 230, 245, 262, 267, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291], "moreto": 20, "most": [8, 285, 290], "move": [248, 286, 287], "move_fil": 244, "move_to_end": 248, "mozilla": [14, 271], "mp": [16, 283], "mp_bin2asm": [18, 274, 277], "mp_bin2objdump": [18, 274], "mp_bin2trac": 283, "mp_c2mpt": [18, 274], "mp_epi": [18, 274], "mp_mpt2bin": [18, 274], "mp_mpt2elf": [18, 274], "mp_mpt2test": [18, 274], "mp_mpt2trace": [18, 274], "mp_objdump2mpt": [18, 274, 278], "mp_seq": [18, 274, 286], "mp_seqtun": [18, 274], "mp_target": [18, 262, 274, 290], "mpt": [18, 274, 275, 278, 280, 281, 282, 283, 284], "mpt2trace_test001": 283, "mpt2trace_test001_address": 283, "mpt_base_address": 275, "mpt_config": [254, 255, 256], "mpt_configuration_factori": 249, "mpt_definition_fil": [280, 281, 282, 283], "mpt_dump_funct": 275, "mpt_function": [275, 278], "mpt_output_fil": [278, 280, 282, 283, 284], "mpt_parser_factori": 249, "mpt_shift": 249, "mpt_version": [278, 282, 284, 288, 289], "mr": 286, "mrm": 287, "msg": [232, 246], "msr": 16, "mto": 1, "mtune": 16, "mtype": [199, 218], "much": 19, "mul": [16, 287], "mul_fxu0_core0_scm_processor": 16, "mul_v0": 287, "mulh": 287, "mulh_v0": 287, "mulhsu": 287, "mulhsu_v0": 287, "mulhu": 287, "mulhu_v0": 287, "mult": 16, "multi": [18, 19, 20], "multipl": [8, 16, 24, 235, 286, 287], "multipli": [275, 287], "multiprocess": 16, "multithreadedbenchmark": 32, "mulw": 287, "mulw_v0": 287, "musag": 101, "must": [10, 16, 19, 21, 235], "mutablemap": 234, "mutual": 22, "mv": [284, 287], "mv_v0": 287, "my": [10, 16], "my_dict": 244, "my_subroutin": [275, 278, 282, 283, 284], "myalign": 289, "mydump": 284, "myloop": 289, "myvar": [275, 278], "n": [20, 59, 73, 74, 231, 235, 275, 278, 282, 283, 285, 286], "name": [1, 8, 10, 16, 21, 23, 24, 25, 39, 41, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 163, 167, 168, 170, 171, 173, 174, 176, 184, 185, 187, 188, 190, 191, 193, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 216, 218, 219, 221, 222, 228, 230, 231, 232, 235, 241, 243, 246, 250, 251, 252, 257, 258, 262, 266, 269, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "namespac": 232, "narg": [16, 230], "natural_sort": 244, "naur": [11, 271], "nb": [285, 286], "nc": 20, "necessari": [14, 16, 268, 271, 278, 284], "necessarili": 21, "need": [8, 11, 12, 14, 16, 18, 19, 39, 90, 176, 190, 191, 224, 228, 245, 262, 264, 265, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "neg": 31, "negat": 287, "negate_regist": [173, 174], "neglig": 21, "nelem": [275, 278, 282, 284, 289], "nest": [279, 285], "network": 20, "never": 235, "new": [8, 9, 14, 15, 19, 24, 25, 31, 33, 35, 37, 40, 90, 98, 133, 144, 155, 176, 230, 235, 236, 237, 247, 248, 250, 251, 252, 264, 268, 271, 288, 289], "new_fil": [11, 229, 271], "new_file_ext": 229, "new_instr": 31, "new_instruct": [173, 174], "new_typ": [43, 199], "newer": 268, "next": [14, 16, 265, 271, 275, 278, 280, 281, 282, 286, 288], "nicer": 233, "nin": 16, "nnp_data_type_1": 240, "no_field_0": 287, "no_scratch": [24, 25], "node": [275, 278], "node_t": [275, 278], "nohazardsallocationpass": [16, 147], "noinit": 93, "noinlin": 275, "nois": 20, "nolsu": 16, "non": [21, 24, 25, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "none": [8, 16, 22, 24, 25, 27, 28, 30, 31, 33, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 88, 95, 96, 98, 101, 114, 115, 116, 118, 119, 123, 126, 127, 131, 132, 133, 135, 136, 137, 144, 146, 148, 149, 150, 157, 168, 169, 170, 171, 172, 173, 174, 176, 182, 184, 185, 209, 224, 226, 227, 228, 230, 232, 233, 235, 236, 237, 238, 241, 244, 247, 248, 249, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "none_imm12": 287, "nonspacecr": 235, "nop": [173, 174, 287], "nop_v0": 287, "nor": 0, "normal": 21, "normalize_asm": [173, 174], "normalizebranchtargetspass": 94, "note": [0, 8, 16, 278, 282, 284, 286, 289], "notfail": [280, 281, 282, 283], "noth": 21, "notic": [8, 21, 278, 285, 289], "notimplementederror": 8, "nottaken": 286, "notwithstand": 21, "novalu": 200, "now": 12, "nternat": 20, "null": [275, 278], "num": [285, 286], "num_batch": [285, 286], "num_el": 258, "num_job": 16, "num_thread": [35, 170, 171], "number": [16, 31, 47, 193, 216, 235, 244, 278, 279, 282, 284, 285, 286, 289], "nv": 20, "nvar": 275, "nz_imm10": 287, "nz_imm8": 287, "nz_u": 287, "nzreg": 287, "nzreg_ab": 287, "nzspreg": 287, "o": [16, 268, 278, 279, 280, 281, 282, 283, 284, 287], "o0": 16, "o3": 278, "ob": [276, 277], "objdump": [277, 278], "objdump_fil": [277, 278, 284], "object": [8, 16, 18, 19, 21, 23, 24, 25, 27, 29, 31, 34, 37, 39, 40, 44, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 98, 133, 144, 155, 162, 163, 164, 166, 167, 168, 173, 174, 176, 178, 190, 191, 193, 194, 195, 199, 214, 215, 216, 224, 225, 226, 227, 230, 231, 232, 235, 236, 237, 239, 245, 246, 247, 248, 250, 253, 254, 257, 258, 278, 284], "oblig": 21, "obtain": [8, 16, 18, 19, 21, 262, 263, 278, 281, 287], "occur": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "ochoa": 20, "oct": 20, "octob": 20, "od": [248, 276, 277], "od_bin": [276, 277], "off": [10, 235, 289], "offer": [14, 21, 271], "offset": 216, "offset_bit": 216, "ok": 16, "olddict": 244, "older": 268, "onc": [11, 16, 176, 265, 271], "one": [8, 9, 16, 21, 23, 33, 35, 37, 165, 235, 262, 266, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 289, 290], "ones": [8, 14, 271, 284], "onli": [8, 11, 12, 16, 21, 22, 264, 265, 269, 271, 275, 278, 279, 280, 281, 282, 284, 285, 286, 289], "onlyraw": 157, "opc": 287, "opcod": [126, 131, 145, 176, 184, 185, 287], "opcode_compress": 287, "open": [10, 14, 16, 20, 235, 271], "open_generic_fd": 244, "oper": [16, 25, 176, 282, 286, 287, 290], "operand": [16, 18, 41, 42, 43, 44, 116, 117, 127, 173, 174, 176, 184, 185, 186, 187, 188, 190, 191, 224, 226, 287], "operand_by_field": 41, "operand_descriptor": [43, 184, 185], "operand_field": 41, "operand_po": [126, 131, 145], "operand_valu": 42, "operandconst": [192, 287], "operandconstreg": [192, 287], "operanddescriptor": [42, 43, 192], "operandimmrang": [192, 287], "operandreg": [192, 287], "operandvalueset": [192, 287], "opportun": 20, "opt_typ": [16, 230], "optcr": 235, "optcre_nv": 235, "optim": [16, 20, 282], "option": [8, 16, 230, 235, 236, 237, 262, 267, 269, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "option_str": 232, "optionstr": 235, "optionxform": 235, "or_v0": 287, "ordcer": 287, "order": [8, 9, 16, 22, 24, 166, 168, 235, 236, 237, 247, 248, 262, 265, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "ordereddict": [244, 248], "org": [8, 16, 21], "organ": [2, 18, 230, 261, 265, 269], "ori": [283, 287], "ori_v0": [285, 287], "origin": [2, 10, 11, 21, 74, 269, 271], "orlando": 20, "other": [10, 12, 13, 21, 166, 168, 264, 271, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "otherexcept": 8, "otherwis": [8, 11, 12, 21, 24, 40, 176, 235, 236, 237, 247, 248, 262, 264, 265, 271, 278, 282, 284, 287, 289], "otyp": 195, "ouput": 287, "our": [8, 13, 273, 285], "out": [7, 8, 12, 21, 236, 237, 246, 247, 264, 266, 272, 273, 278], "output": [8, 16, 22, 24, 25, 43, 61, 151, 187, 190, 191, 199, 233, 246, 262, 279, 280, 281, 285, 286, 289], "output_config_fil": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "output_dir": [16, 279, 285, 286], "output_in": 40, "output_mpt_fil": [278, 284], "output_path": 16, "output_prefix": 16, "outputdir": [279, 285, 286], "outputnam": 50, "outsid": 281, "outstand": 21, "over": 289, "overrid": [22, 232, 235], "overview": [2, 8, 18], "overwrite_first": 235, "own": [8, 12, 16, 21, 264, 268, 274, 286, 289], "owner": 21, "ownership": 21, "p": [16, 20, 235, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "packag": [16, 18, 22, 23, 51, 84, 89, 166, 169, 172, 209, 223, 261, 262, 263, 268, 269, 274, 282, 284], "pad": [24, 25, 127, 278, 280, 281, 282, 283], "page": [0, 21, 280, 281, 282, 283], "pair": [39, 236, 237, 247, 248], "paper": [18, 20], "paragraph": 8, "paragraphformatterml": 229, "parallel": [16, 224, 279, 285, 286], "parallel_job": 16, "param": [8, 59, 73, 74], "paramet": [8, 16, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 46, 47, 48, 50, 59, 73, 74, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 232, 238, 239, 240, 241, 243, 244, 246, 259, 260, 275, 279, 283, 285, 286], "paratemet": 286, "parent": [218, 219], "parenthes": 8, "parida": 20, "pars": [230, 232, 235, 268, 278, 284, 288], "parse_arg": 232, "parse_cod": [255, 256], "parse_cont": [254, 255, 256], "parse_filenam": [254, 255, 256], "parse_instruct": [254, 255, 256], "parse_instruction_list": 229, "parse_intermixed_arg": 232, "parse_known_arg": 232, "parse_known_intermixed_arg": 232, "parse_regist": [254, 255, 256], "parse_vari": [254, 255, 256], "parser": [230, 232, 235, 254, 255, 289], "part": [1, 8, 10, 21, 174, 273, 275, 284], "parti": [8, 16, 21], "particular": [16, 18, 19, 21, 274, 279, 283, 285, 286], "pass": [16, 18, 19, 22, 23, 24, 25, 33, 34, 35, 39, 235, 262, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "pass_info": [33, 34, 35], "past": 275, "patch": [7, 8, 9, 10, 14, 18, 270], "patent": 21, "patern": 286, "path": [16, 20, 22, 74, 166, 169, 172, 173, 174, 209, 241, 244, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "path_to_state_fil": 289, "path_to_trace_fil": 289, "pattern": [16, 168, 283, 286], "pbose": 272, "pc": 287, "pcrel_hi": [278, 282, 284], "pcrel_lo": [278, 282, 284], "pdb": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "pdf": [12, 264], "pedant": 278, "per": [16, 216, 279, 283, 285], "percent": 21, "percentag": [87, 88, 280, 281], "perform": [16, 18, 19, 20, 21, 73, 176, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289], "perman": 278, "permiss": [8, 16, 21, 235], "permit": 10, "perpetu": 21, "person": [10, 11, 271], "pertain": 21, "phase": [19, 20, 278], "phenomena": 20, "pick": [16, 285], "pickabl": [40, 41, 42, 43, 166, 168, 203, 204, 244], "pickl": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231, 245], "pip": [9, 11, 263, 267, 268, 271], "pipelin": [18, 19], "place": [21, 167, 176, 275, 278, 282, 283, 284, 285, 287, 289], "plai": 16, "plan": 267, "plana": 20, "platform": [14, 16, 40, 268, 271, 275], "pleas": [0, 2, 8, 14, 18, 20, 271], "plenti": 16, "plu": [8, 9, 16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "plumb": 275, "point": [8, 16, 28, 207, 244, 275, 278, 281, 284, 285, 287, 289], "pointer": [275, 278, 283, 284, 287], "polici": [16, 18, 19, 278, 280, 281, 282, 283, 284, 291], "pool": 16, "pop": [235, 236, 237, 247, 248], "popitem": [235, 236, 237, 247, 248], "popul": [24, 238], "port": [20, 272], "portabl": 288, "portland": 20, "posit": [8, 190, 191, 285, 286], "possibl": [8, 21, 42, 151, 176, 193, 196, 197, 198, 200, 201, 202, 263, 265, 278, 282, 283, 284, 286, 289, 290], "possible_address": 42, "possible_length": 42, "post": [18, 19], "post_var": [24, 50], "potenti": 235, "power": [15, 18, 20, 21, 266, 285, 286, 290], "power10": 290, "power7": [16, 290], "power8": 290, "power9": [283, 285, 286, 290], "power_v206": [16, 290], "power_v206_fu_stress": 16, "power_v206_profil": 16, "power_v207": 290, "power_v300": [283, 285, 286, 290], "power_v310": 290, "powerpc": [16, 266, 290], "powerpc64_linux_gcc": 290, "pp": 20, "ppc": 268, "ppc64": 268, "ppc64_linux_gcc": [16, 283, 285, 286, 290], "ppc64le_linux_gcc": 290, "practic": [14, 271], "pradip": [18, 20, 272], "pre": [18, 19, 235, 265, 267, 268, 269], "precis": 287, "pred": 287, "predefin": [280, 281, 282], "prefech": 195, "prefer": [16, 21, 264, 269, 289], "prefetch": 287, "prefix": [16, 233, 246], "prepar": 21, "prepend": [33, 35, 136, 230, 251, 252], "present": [20, 235, 236, 237, 247, 248], "preserv": 235, "previou": [10, 16, 278], "previous": [24, 25], "pridfast16": 275, "pridfast32": 275, "pridfast64": 275, "pridfast8": 275, "pridleast16": 275, "pridleast32": 275, "pridleast64": 275, "pridleast8": 275, "prime": 244, "print": [16, 21, 232, 282], "print_error": [16, 229], "print_funct": 16, "print_help": 232, "print_info": [16, 216, 229], "print_usag": 232, "print_warn": [16, 229], "printf": [275, 282], "prioriti": 273, "priu64": 275, "priufast16": 275, "priufast64": 275, "priufast8": 275, "priuleast16": 275, "priuleast32": 275, "priuleast64": 275, "priuleast8": 275, "priv": 16, "privat": 266, "priviledg": [16, 287], "privileg": [16, 287], "privileged_opt": 16, "prix64": 275, "probabl": [238, 286], "problem": [14, 16, 271], "procedur": [11, 12, 262, 264, 271], "proceed": [18, 20], "process": [8, 9, 12, 16, 19, 23, 24, 262, 264, 268, 269, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "process_paramet": 282, "processor": [18, 19, 20], "produc": [18, 20, 278, 284], "product": [8, 13, 16, 18, 19, 21, 286], "profil": [16, 18, 133, 134, 238, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "profile_output": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "prog": 233, "program": [16, 174, 244, 278, 281, 284, 287, 289], "progrem": 289, "progress": [244, 273], "project": [7, 8, 10, 14, 267, 271], "prolog": 16, "promin": 21, "prompt": [12, 264, 265], "prop": [164, 170, 171, 184, 185, 210, 211, 212, 218, 219, 221, 222, 250, 251, 252], "prop_nam": 168, "proper": 281, "properit": 207, "properti": [16, 18, 19, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 85, 87, 88, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 227, 230, 235, 250, 251, 252, 287, 288], "property_isa_map": 168, "propertyhold": [162, 169, 170, 183, 185, 209, 212, 217, 219, 220, 222], "propos": [8, 14, 19, 271], "prototyp": [8, 16], "provid": [8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 39, 40, 155, 166, 168, 176, 184, 232, 235, 236, 237, 247, 248, 262, 263, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "pstat": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "pstdev": 238, "psum": 16, "ptlb": 289, "public": [2, 8, 9, 10, 12, 13, 264, 266, 290], "publicli": 21, "publish": [18, 20], "pull": [9, 10, 11, 269, 271], "purpos": [8, 16, 21, 39, 285, 286, 287], "push": [12, 264], "put": [8, 285], "py": [262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "pyaml": 268, "pyevolv": 16, "pypa": [12, 264], "pypi": [9, 266], "python": [8, 11, 12, 16, 230, 245, 262, 264, 265, 266, 268, 269, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "pyyaml": 268, "qt": 283, "qtrace": 283, "quadrupl": 287, "qualiti": 13, "queri": [16, 166, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "question": [18, 19], "queue": 224, "quick": [18, 261, 264], "quickli": [19, 264], "quiet": 22, "quotient": 287, "r": [20, 279, 282, 285, 286, 287, 289], "r0": 289, "r1": 289, "r2": 289, "r4": 287, "r5": 289, "raid": 232, "rais": [8, 31, 33, 35, 59, 73, 74, 166, 168, 196, 197, 198, 201, 202, 224, 226, 232, 235, 236, 237, 247, 248], "raleigh": 20, "ramon": [1, 16, 18, 20, 272, 282], "rand": [16, 112, 138, 148, 149, 152, 193, 196, 197, 198, 200, 201, 202], "randint": 16, "random": [16, 24, 25, 112, 138, 146, 148, 149, 152, 193, 196, 197, 198, 200, 201, 202, 238, 244, 278, 279, 282, 284, 286, 289], "random_valu": [193, 196, 197, 198, 200, 201, 202], "randomallocationpass": 147, "randomdependencydistancepass": 109, "randomess": 286, "randomize_regist": [173, 174], "randomizebytypepass": 94, "randomli": 16, "randrang": 16, "rang": [16, 18, 19, 42, 193, 200, 278, 283, 286], "range_to_sequ": 244, "range_to_sequence_float": 244, "rate": [16, 195], "ratio": [16, 155], "raw": [24, 25, 151, 235, 250, 251, 252, 276, 277, 281, 282], "raw_decor": [179, 180], "raw_pars": [179, 180], "raw_str": [179, 180], "rawconfigpars": [234, 235], "rbertra": [1, 16, 272, 282], "rcodi": 204, "rd": 287, "rdc": 287, "rdescr": 207, "re": [8, 14, 235, 271, 273, 286], "reach": 286, "read": [0, 12, 148, 151, 228, 235, 260, 262, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "read_cache_data": 228, "read_default_cache_data": 228, "read_dict": 235, "read_fil": 235, "read_profil": 259, "read_str": 235, "read_yaml": 260, "readabl": [8, 21, 288, 289], "reader": 16, "readfp": 235, "readi": [19, 262], "readlin": 235, "reagion": 286, "real": [18, 19], "reason": [19, 21], "receiv": [14, 21, 271], "recipi": 21, "recommend": [8, 16, 21, 265], "record": [10, 190, 191], "recurs": [12, 264, 269], "redistribut": [10, 21], "reduc": [16, 285], "redund": [18, 19], "refer": [50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 168, 231, 265, 278, 280, 281, 282, 283, 284, 289], "referen": 282, "referenc": [8, 278, 282, 283, 284, 289], "reg": [41, 173, 174, 176, 198, 201, 238, 241, 286, 287, 289], "rega": 287, "regard": [7, 18, 19, 21], "regexp": 244, "region": [39, 250, 251, 252, 278, 280, 281, 282, 284, 286, 289], "regist": [8, 16, 18, 23, 24, 25, 33, 35, 39, 40, 41, 42, 43, 50, 73, 166, 168, 170, 171, 173, 174, 176, 184, 185, 192, 193, 196, 197, 198, 200, 201, 202, 207, 208, 232, 250, 251, 252, 275, 278, 279, 280, 281, 282, 284, 285, 286, 287], "register_context_callback": 41, "register_dat_map": [250, 251, 252], "register_dat_properti": [250, 251, 252], "register_direct_init": 50, "register_has_valu": 39, "register_instruction_definit": [250, 251, 252], "register_mem_operand_callback": 42, "register_nam": [39, 118, 120, 121, 170, 171], "register_operand_callback": 43, "register_properti": [164, 170, 171, 184, 185, 210, 211, 212, 218, 219, 221, 222], "register_raw_definit": [250, 251, 252], "register_register_definit": [250, 251, 252], "register_typ": 18, "register_valu": 39, "register_value_compar": [173, 174, 176], "register_var": [33, 35], "register_vari": [275, 278], "register_variable_definit": [250, 251, 252], "registered_architectur": 8, "registered_global_var": [33, 35], "registers_get_valu": 39, "registertyp": [204, 205, 206, 207], "registry_nam": 232, "regset": 286, "regtyp": 203, "regular": [264, 275], "regular_prob": 238, "regular_seq": 238, "rejectingdict": 244, "rejectingordereddict": 244, "rel": [16, 193, 196, 197, 198, 200, 201, 202, 277, 287, 289], "relat": [12, 14, 16, 18, 19, 168, 174, 262, 264, 266, 268, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "relax": [8, 149, 282], "releas": [13, 14, 19, 268, 271, 273, 290], "reli": 278, "reliabl": 20, "reloc": [16, 284], "relocat": 284, "rem": 287, "rem_v0": 287, "remain": [8, 16, 21], "remaind": 287, "rememb": [262, 275, 278], "remov": [16, 31, 33, 35, 39, 190, 191, 228, 235, 236, 237, 247, 248, 278, 281, 288], "remove_instructions_from": 31, "remove_opt": 235, "remove_reserved_regist": 39, "remove_sect": 235, "remu": 287, "remu_v0": 287, "remuw": 287, "remuw_v0": 287, "remw": 287, "remw_v0": 287, "rep": 202, "repeat": [279, 285, 286], "replac": [21, 31, 280, 281, 282, 286, 289], "replace_everi": 286, "replaceinstructionbytypepass": 122, "replaceloadinstructionspass": 122, "replic": [31, 289], "replicate_bbl": 30, "report": [7, 8, 12, 16, 18, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 231, 232, 264, 270], "repositori": [7, 8, 9, 11, 14, 18, 262, 264, 266, 268, 269, 271], "repr": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "repres": [8, 16, 20, 21, 27, 28, 29, 31, 33, 34, 37, 39, 41, 42, 43, 50, 85, 90, 163, 164, 167, 168, 173, 174, 185, 188, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 214, 215, 216, 221, 222, 224, 226, 250, 251, 252, 254, 255, 256], "represen": [224, 226], "represent": [16, 19, 22, 24, 41, 43, 184, 185, 193, 196, 197, 198, 200, 201, 202, 204, 205, 224, 235], "reproduc": [14, 21, 271, 275, 278, 280, 281, 282, 283, 284, 288], "reproducesequencepass": [122, 282], "reproduct": 21, "reput": 271, "request": [9, 10, 11, 16, 176, 262, 271], "requir": [8, 11, 16, 18, 19, 21, 24, 25, 33, 34, 35, 42, 50, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 166, 176, 224, 226, 230, 261, 271, 275, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289], "required_global_var": 50, "required_memory_valu": [179, 180], "required_register_valu": [179, 180], "research": [13, 18, 20, 271, 272], "reserv": [8, 16, 39, 118, 168, 278, 284, 286, 287], "reserved_regist": [39, 50, 168], "reserveregisterspass": 113, "reset": [31, 50, 101, 190, 191, 235, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "reset_instruct": 31, "reset_regist": 140, "resili": 272, "resolv": [278, 280, 281, 282, 284], "resolvesymbolicreferencespass": 156, "resourc": [12, 264], "respect": [22, 23, 278, 282, 283, 284, 286, 289], "respons": [21, 278, 282, 283, 284, 289], "rest": [0, 2, 12, 18, 264, 279, 285, 286, 288], "restrict": [275, 278, 285], "result": [16, 21, 176, 224, 226, 268, 286, 287, 290], "ret": 284, "retain": [21, 287], "return": [8, 16, 23, 24, 25, 27, 28, 30, 31, 33, 35, 37, 39, 40, 41, 42, 43, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 98, 133, 144, 155, 166, 167, 168, 176, 184, 185, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 214, 216, 221, 222, 224, 226, 228, 231, 232, 235, 236, 237, 238, 244, 247, 248, 260, 275, 282, 284, 287], "return_address_reg": [170, 171], "returncod": 61, "rev": [178, 180], "review": [0, 14, 271], "revis": [21, 282], "rf2": 287, "rf2rm": 287, "rff": 287, "rich": [14, 20, 271], "richer": 273, "rick": 20, "right": [10, 11, 12, 14, 16, 21, 33, 35, 232, 264, 271, 283, 287], "risc": [20, 272, 282, 287, 290], "riscv": [15, 18, 266, 290], "riscv64_eprocessor_sim": 290, "riscv64_linux_gcc": [282, 284, 287, 290], "riscv64_riscy_sim": 290, "riscv64_sargantana_sim": 290, "riscv64_spike_sim": 290, "riscv64_test_p": 290, "riscv_eprocessor_sim": 290, "riscv_gener": [282, 284, 287, 290], "riscv_linux_gcc": 290, "riscv_riscy_sim": 290, "riscv_sargantana_sim": 290, "riscv_spike_sim": 290, "riscv_test_p": 290, "riscv_v22": [282, 284, 287, 290], "riscv_v22_context_var": 282, "riscv_v22_context_var_pcrel_1": 282, "riscv_v22_context_var_pcrel_2": 282, "riscv_v22_scratch_var": 282, "riscvmicroarchitectureel": 287, "riscvmicroarchitectureelementtyp": 287, "risk": 21, "rizzolo": 20, "rl": 287, "rldicr": 283, "rm": 287, "rm_cache_data": 228, "rm_decor": 41, "rm_default_cache_data": 228, "rm_init": [33, 35], "rmn": 287, "rnd": [16, 286], "rndfp": [244, 278, 282, 284, 289], "rndint": [16, 244, 278, 282, 284, 289], "road": [7, 18], "robin": [16, 278, 282, 284, 286, 289], "robust": 20, "roi": 289, "roi_cyc": [250, 251, 252], "roi_end_cycl": 289, "roi_end_instruct": 289, "roi_in": [250, 251, 252], "roi_memory_access_trac": [250, 251, 252, 289], "roi_start_cycl": 289, "roi_start_instruct": 289, "root": 287, "round": [16, 278, 282, 284, 286, 287, 289], "routin": [275, 278], "royalti": 21, "rreg": [8, 39], "rrepr": 204, "rs1": 287, "rs1c": 287, "rs2": 287, "rs2_jr": 287, "rs2c": 287, "rs3": 287, "rsize": 207, "rst": 8, "rtype": [8, 204, 207], "rule": [8, 16], "run": [8, 16, 18, 19, 262, 268, 278, 280, 281, 282, 290], "runtim": 16, "rv32": 287, "rv64": 287, "rw": 253, "rxjson": 268, "s_": 16, "s_dep_": 16, "s_imm12": 287, "s_imm5": 287, "s_imm7": 287, "s_lat_": 16, "s_v0": 287, "s_v1": 287, "safe": [226, 275, 276, 278, 280, 281, 282, 283], "sai": 285, "said": 265, "salem": 20, "same": [8, 10, 21, 235, 278, 280, 281, 282, 284, 285, 286, 289], "sameweight": 286, "san": [10, 20], "saniti": [16, 278, 282, 283, 284, 289], "save": [11, 14, 16, 24, 25, 230, 271, 278, 287], "sb": [286, 287], "sb_imm12": 287, "sb_imm5": 287, "sb_imm7": 287, "sb_v0": 287, "sbimm9": 287, "sc": 287, "scalar": [16, 235], "scale": 287, "scenario": [274, 285, 286], "schema": [18, 22, 260, 268], "schema_fil": 260, "scheme": [18, 262, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "schuyler": [20, 272], "score": 16, "scratch": [24, 25], "scratch_regist": [173, 174], "scratch_var": [173, 174], "script": [8, 9, 16, 230, 274], "sd": [278, 282, 284, 287], "sd_v0": 287, "sdsp": 287, "sdsp_v0": 287, "sean": 20, "search": [0, 12, 14, 16, 19, 22, 166, 262, 264, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "search_path": [16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "second": [8, 16, 73, 190, 191, 235, 266], "sectcr": 235, "section": [8, 11, 12, 14, 15, 16, 21, 235, 250, 251, 252, 271, 272, 273, 274, 275, 278, 282, 283, 284, 285, 286], "section_nam": [235, 288], "section_proxi": 235, "see": [8, 12, 14, 16, 21, 24, 166, 230, 262, 264, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "seed": [16, 173, 174], "seen": [262, 289], "segment": [39, 278, 280, 281, 282], "select": [14, 16, 271, 285], "self": [8, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231, 275, 278, 289], "sell": 21, "semant": [18, 19, 207, 278, 284], "semi": 288, "sens": 24, "sensit": [278, 282, 283, 284, 288, 289], "sensor": 20, "sent": 21, "sentenc": 8, "sep": 229, "separ": [21, 22, 262, 279, 283, 284, 285, 286, 287, 289], "sept": 20, "septemb": 20, "seq": [130, 285, 286], "seq_output_dir": [285, 286], "seqtun": 286, "sequenc": [16, 132, 229, 278, 282, 283, 285, 286, 289], "sequenti": [16, 280, 281, 282, 286], "serial": 245, "server": [12, 264], "servic": 21, "set": [8, 15, 16, 19, 22, 23, 24, 25, 28, 31, 33, 35, 39, 40, 41, 42, 43, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 168, 173, 174, 176, 184, 185, 190, 191, 196, 202, 216, 231, 235, 236, 237, 247, 248, 250, 251, 252, 262, 268, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "set_absolut": 39, "set_address": [31, 41, 42, 44, 46, 47, 48], "set_align": 42, "set_arch_typ": [16, 41], "set_asm": 44, "set_benchmark": 50, "set_cfg": [33, 35], "set_code_seg": 39, "set_com": 44, "set_context": [33, 35, 173, 174], "set_current_thread": [24, 25, 33, 35], "set_cycle_count": [250, 251, 252], "set_dat": 39, "set_data_seg": 39, "set_decor": 44, "set_default": 232, "set_default_code_address": [250, 251, 252], "set_default_data_address": [250, 251, 252], "set_descriptor": 43, "set_displac": 31, "set_env": 168, "set_field": [190, 191], "set_forbidden_address_rang": 42, "set_funct": 43, "set_instruction_count": [250, 251, 252], "set_instruction_definit": [251, 252], "set_instruction_typ": 44, "set_isa": 168, "set_label": [41, 44], "set_length": 42, "set_log_level": [16, 243], "set_memory_valu": 39, "set_operand": [41, 44], "set_parent_el": [218, 219], "set_possible_address": 42, "set_possible_length": 42, "set_regist": [173, 174], "set_register_bit": [173, 174], "set_register_to_address": [173, 174], "set_register_valu": 39, "set_roi_cyc": [250, 251, 252], "set_roi_in": [250, 251, 252], "set_roi_memory_access_trac": [250, 251, 252], "set_stat": [250, 251, 252], "set_subel": [218, 219], "set_symbol": 39, "set_target": [50, 170, 171, 173, 174, 210, 211, 212], "set_target_instruct": 28, "set_thread": [170, 171], "set_typ": [43, 199], "set_uarch": 168, "set_valid_valu": [193, 196, 197, 198, 200, 201, 202], "set_valu": [43, 163], "set_var_displac": [33, 35], "set_variables_definit": [251, 252], "set_ways_bit": 216, "set_wrapp": 168, "setassociativecach": [16, 87, 88, 213], "setattr": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "setdefault": [235, 236, 237, 247, 248], "setinitaddresspass": 91, "setinstructionlabelbyindexpass": 156, "setinstructionoperandsbyopcodepass": 122, "setinstructiontypebyalternatingsequencespass": 122, "setinstructiontypebyelementpass": [16, 122], "setinstructiontypebyprofilepass": [16, 122], "setinstructiontypebypropertypass": 122, "setinstructiontypebysequencepass": [16, 122, 135], "setinstructiontypepass": 122, "setmemoryoperandbyopcodepass": 139, "setrandominstructiontypepass": [16, 122], "setswai": 216, "setup": 268, "sever": [8, 16, 266, 273, 279, 285, 289], "severo": 20, "sh": [8, 9, 12, 264, 287], "sh5": 287, "sh6": 287, "sh_v0": 287, "shall": 21, "shallow": [236, 237, 247, 248], "share": [14, 21, 264, 271], "sheet": [12, 264], "shell": [12, 262, 264, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "shift": [173, 174, 193, 197, 200, 202, 244, 249, 281, 287], "shift_stream": 142, "shift_with_sign": 244, "shite": 287, "short": [8, 14, 230, 271, 275, 285, 286, 289], "shortnam": [285, 286], "shoud": [281, 282], "should": [8, 11, 12, 14, 16, 19, 21, 22, 24, 25, 31, 34, 168, 232, 235, 262, 264, 267, 268, 271, 275, 278, 281, 282, 283, 284, 285, 288, 289], "show": [8, 16, 187, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "show_progress": 224, "show_trac": 25, "shown": [16, 230, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "shuffl": 238, "shy": 271, "sign": [10, 244, 275, 287], "signatur": [8, 275, 278], "silent": [235, 278, 284], "silicon": [18, 19], "similar": [8, 25, 277, 278, 282, 283, 284, 289], "similarli": 285, "simm6": 287, "simpl": [16, 18, 23, 266, 288, 291], "simplebuildingblockpass": [16, 153, 282], "simul": [18, 19, 50, 289, 290], "sinc": [2, 11, 13, 16, 271, 275, 286], "singl": [16, 155, 226, 230, 235, 278, 282, 284, 286, 287, 289], "singlememorystreampass": [16, 139], "situat": 289, "size": [16, 31, 33, 35, 37, 46, 47, 48, 125, 146, 148, 155, 187, 188, 207, 208, 214, 216, 234, 275, 278, 279, 283, 284, 285, 286, 287, 289], "sizeof": [275, 278, 282], "skip": [16, 227, 230, 278, 279, 284, 285, 286], "skip_al": 227, "slegel": 20, "slist": 238, "sll": 287, "sll_v0": 287, "slli": [278, 282, 284, 287], "slli_v0": 287, "slliw": 287, "slliw_v0": 287, "sllw": 287, "sllw_v0": 287, "slot": 285, "slow": 8, "slt": 287, "slt_v0": 287, "slti": 287, "slti_v0": 287, "sltiu": 287, "sltiu_v0": 287, "sltu": 287, "sltu_v0": 287, "smaller": 287, "smart_copy_dict": 244, "smt": [18, 20], "sn": [285, 286], "snippet": [8, 24, 280, 281, 282, 283, 289], "so": [8, 9, 11, 13, 14, 15, 16, 19, 176, 235, 265, 266, 268, 271, 275, 278, 280, 281, 282, 284, 285, 286, 287, 288], "societi": [18, 20], "soft": 20, "softwar": [8, 14, 16, 21, 168, 271, 282], "sole": 21, "solid": 20, "solut": [14, 16, 19, 271], "some": [8, 10, 12, 14, 15, 16, 17, 24, 264, 268, 269, 271, 274, 276, 277, 278, 282, 283, 284, 285, 286, 289, 290], "someth": [8, 166, 224, 226, 262], "sometim": [8, 278, 281], "sort": [8, 16, 289], "sort_by_dist": 238, "sort_by_usag": 238, "sourc": [0, 7, 8, 10, 11, 16, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 269, 271, 278, 282, 287, 289], "source_bench": 16, "sp": [284, 287], "space": [8, 16, 19, 22, 168, 235, 281, 284, 285, 286, 289], "specfi": 286, "specfic": 286, "special": [8, 16, 18, 19, 21, 235, 273, 275, 278, 282, 284, 287, 289], "specif": [8, 14, 16, 19, 21, 33, 35, 50, 168, 262, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "specifi": [8, 16, 24, 25, 30, 31, 33, 35, 37, 39, 235, 236, 237, 247, 248, 262, 265, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "sphinx": 8, "spicifi": 40, "split": [8, 15, 16, 266, 285, 286], "spr": [16, 287], "spr32": 16, "spreg": 287, "squar": 287, "sra": 287, "sra_v0": 287, "srai": 287, "srai_v0": 287, "sraiw": 287, "sraiw_v0": 287, "sraw": 287, "sraw_v0": 287, "srl": 287, "srl_v0": 287, "srli": 287, "srli_v0": 287, "srliw": 287, "srliw_v0": 287, "srlw": 287, "srlw_v0": 287, "st": 16, "stabl": [12, 13, 264, 266, 273], "stack": [171, 230, 275, 278, 284, 287], "stack_address": [171, 278, 284], "stack_align": 171, "stack_direct": [170, 171], "stack_nam": [171, 278, 284], "stack_pcrel_1": 284, "stack_point": [170, 171], "stack_siz": [170, 171, 278, 284], "stage": [18, 19, 20], "stamp": 266, "standard": [8, 11, 12, 16, 238, 265, 271, 284], "start": [8, 11, 12, 16, 18, 39, 74, 244, 249, 262, 264, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "start_addr": 25, "start_address": 277, "start_loop": [24, 50], "start_main": [24, 50], "start_sect": 233, "start_symbol": [170, 171, 284], "startswith": 16, "starttim": 16, "state": [8, 16, 20, 21, 235, 250, 251, 252, 280, 281, 282], "statement": [8, 16, 21, 224, 282, 289], "static": [19, 97, 278, 281], "statu": [16, 39, 232, 236, 282], "std": [16, 278, 283], "stderr": [232, 246], "stdint": [275, 282], "stdio": [16, 275, 282], "stdlib": [275, 282], "step": [11, 14, 16, 193, 200, 265, 271, 282, 285, 286, 287], "still": [262, 280, 281, 282], "stop": 232, "stoppag": 21, "storag": [16, 280, 281, 282, 287], "store": [8, 195, 278, 280, 281, 282, 286, 287, 289], "store_decim": [173, 174], "store_float": [173, 174], "store_integ": [173, 174], "storesonli": [142, 143], "str": [8, 16, 22, 23, 24, 25, 27, 28, 33, 34, 35, 39, 41, 46, 47, 48, 50, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 166, 167, 168, 169, 171, 172, 173, 174, 176, 181, 184, 186, 187, 188, 190, 191, 193, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 219, 220, 221, 222, 224, 226, 230, 231, 246, 250, 251, 252], "str1": 244, "str2": 244, "strach": 20, "straighforward": 266, "strategi": 19, "strcasecmp": 275, "strcpy": 275, "stream": [16, 226, 286, 287], "stress": [8, 16, 18, 19], "stress_map": 8, "stressmark": [20, 279, 285, 286], "strict": [8, 142, 143, 157, 235, 277, 278, 284], "strid": 283, "stride": [16, 146, 283, 286], "string": [0, 8, 16, 22, 24, 25, 59, 166, 173, 174, 184, 185, 196, 224, 226, 229, 230, 232, 235, 240, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "string_with_char": 229, "string_with_field": 229, "strongli": [265, 280, 281, 282], "struct": [275, 278], "structur": [8, 16, 18, 24, 25], "stswx_v0": 16, "studi": 285, "stuff": [280, 281, 282, 283], "stw_v1": 16, "style": [7, 18], "sub": [22, 23, 24, 287], "sub_v0": 287, "subclass": [16, 232], "subel": [218, 219], "subfic_v0": 286, "subject": 21, "sublicens": 21, "submiss": 21, "submit": [7, 10, 14, 18, 21, 270], "submodul": [12, 16, 264, 269], "subpackag": 166, "subroutin": [275, 278], "subsect": 7, "subsequ": 21, "substitut": 235, "subtract": 287, "subw": 287, "subw_v0": 287, "succ": 287, "success": 287, "successfulli": 235, "suggest": [8, 14, 16, 265, 271, 280, 281, 282], "suit": 10, "suitabl": [73, 74], "summar": [16, 265, 278, 280, 281, 282], "summari": 8, "supercomput": 20, "supersed": 21, "supplement": 20, "suppli": 20, "support": [1, 13, 14, 16, 18, 19, 21, 24, 25, 50, 59, 166, 233, 262, 271, 278, 284, 285, 289, 290], "sure": [12, 14, 16, 264, 271, 278, 280, 281, 282], "svc": 289, "sw": [284, 287], "sw_v0": 287, "swaminathan": [20, 272], "swap": 287, "switch": [16, 285, 286, 287], "switch_stor": 142, "swsp": 287, "swsp_v0": 287, "sy": [16, 287], "symbol": [8, 18, 33, 35, 39, 91, 224, 278, 280, 281, 282, 284, 286], "symposium": [18, 20], "synchron": 287, "syntax": [21, 230, 235], "synth": 16, "synth_pass": [24, 25], "synthes": [16, 19, 23, 25, 282], "syscal": 16, "system": [12, 18, 19, 20, 21, 167, 235, 236, 262, 263, 264, 265, 267, 268, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290], "system_freq_mhz": 125, "systemat": [18, 19, 20, 271], "t": [20, 21, 235, 262, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "t6": 284, "tab": [164, 170, 171, 184, 185, 190, 191, 194, 195, 210, 211, 212, 218, 219, 221, 222, 235], "tabl": [8, 18, 280, 281, 282, 290], "tag": 266, "tailor": 274, "tak": 271, "take": [8, 16, 230, 265, 268, 280, 281, 282, 287, 289], "taken": [14, 235, 271, 283, 286], "tame": 20, "target": [2, 8, 11, 15, 16, 18, 19, 22, 24, 25, 28, 40, 50, 74, 106, 118, 119, 133, 141, 146, 154, 224, 226, 227, 229, 244, 262, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "target_c_compil": 278, "target_c_compiler_flag": 278, "target_check": [184, 185], "target_cxx_compil": 278, "target_cxx_compiler_flag": 278, "target_instruct": 28, "target_ipc": 16, "target_objdump": 278, "target_opt": 16, "targetvalu": [135, 238], "task": [19, 266, 271, 275, 280, 281, 282, 288], "tb": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "tbd": [3, 4, 5, 6, 292, 293, 294, 295], "te": [90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161], "team": [12, 13, 264], "techniqu": 20, "tediou": [8, 18, 19, 266, 280, 281, 282], "tell": 278, "temp": 278, "templat": [16, 22, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "template_path": 22, "tempor": 286, "temporar": 286, "ten": [14, 271], "term": [11, 21], "termin": 21, "test": [8, 9, 11, 18, 250, 251, 252, 254, 255, 256, 268, 271, 273, 274, 276, 277, 280, 281, 282, 283, 284, 285, 286, 289, 290], "test_001_end2end_tool": 9, "test_002_end2end_exampl": 9, "test_003_end2end_target": 9, "test_004_unittest": 9, "test_deploy_001_instal": 9, "testcas": 289, "text": [11, 14, 21, 230, 233, 271, 274, 275, 284, 289], "textiowrapp": 246, "than": [8, 14, 16, 155, 262, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "thei": [8, 16, 25, 176, 207, 275, 278, 279, 281, 282, 285, 286, 289], "them": [7, 8, 12, 16, 19, 224, 226, 232, 264, 265, 266, 268, 275, 278, 284, 286], "theori": 21, "therefor": [8, 12, 18, 19, 168, 278, 284, 290], "thereof": 21, "thermal": 20, "thermomechan": 20, "thesi": 20, "thi": [0, 1, 8, 10, 11, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 28, 31, 34, 49, 53, 90, 155, 166, 168, 176, 184, 185, 194, 196, 204, 205, 224, 226, 230, 232, 235, 236, 237, 245, 247, 248, 262, 264, 265, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "thing": [8, 263, 265], "think": [14, 271], "third": [8, 16, 21, 190, 191], "thoma": 20, "those": [21, 280, 281, 282], "thousand": 16, "thread": [18, 19, 24, 25, 32, 170, 171, 268, 287], "thread_idx": [24, 25], "three": [166, 167, 190, 191, 278], "threshold": [155, 238, 280, 281], "through": [16, 21, 168, 280, 281, 282], "throughout": [12, 264], "time": [14, 16, 24, 235, 262, 266, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "timedelta": 16, "timothi": 20, "titl": [14, 21, 271], "tmp": [282, 290], "tmpl_path": [173, 174], "to_address": 284, "to_gener": 289, "to_str": 253, "todai": [18, 19], "togeth": [281, 282], "tool": [8, 16, 18, 19, 262, 265, 266, 268, 273, 291], "top": [8, 278], "tort": 21, "total": [16, 246], "touch": [280, 281, 282], "toward": [13, 18, 19, 273], "trace": [25, 230, 250, 251, 252], "trace_output_fil": 283, "traceback": [16, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "tracesynthes": 23, "track": [21, 263, 265], "trade": 21, "trademark": 21, "trail": 8, "trans_map": 289, "transfer": 21, "transform": [16, 21, 22, 24, 90, 273, 286], "translat": [16, 21, 24, 39, 179, 180, 184, 224, 226, 286, 289], "translateaddresspass": 102, "trap": 16, "travi": 9, "treat": [8, 289], "tri": 286, "trigger": [8, 278], "true": [16, 22, 39, 40, 41, 43, 44, 50, 142, 143, 151, 190, 191, 224, 228, 230, 235, 238, 248, 287], "try": [12, 16, 264, 278, 283], "tttttttttttttn": 283, "tune": [279, 285, 286], "tuner": 286, "tupl": [8, 16, 166, 190, 191, 193, 235, 236, 237, 247, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "tutori": [18, 274], "two": [8, 16, 20, 244, 275, 278, 282, 284, 285, 289], "twoc": 244, "twocs_to_int": 244, "tx": 20, "txt": 283, "type": [8, 16, 21, 23, 24, 25, 40, 41, 42, 43, 44, 46, 47, 48, 73, 74, 85, 90, 98, 133, 144, 155, 166, 167, 168, 184, 185, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 214, 216, 218, 219, 221, 222, 224, 226, 230, 235, 266, 269, 275, 278, 282, 284, 286, 287, 289], "type1": 275, "type2": 275, "type3": 275, "typedef": [275, 278], "typeerror": 79, "typeguard_decor": 16, "typeguard_testsuit": 16, "typic": [19, 24, 268, 284, 289], "typo": [14, 271], "u": [1, 15, 16, 18, 20, 265, 267, 268, 269, 272, 273, 275, 282, 287, 288], "u4aa": 207, "u4fa": 207, "u4va": 207, "u_imm12": 287, "u_imm20": 287, "uarch": [16, 18, 166, 168, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "uarch_nam": 166, "uint16_t": 275, "uint32_t": 275, "uint64_t": 275, "uint8_t": [275, 278, 282, 284], "uint_fast16_t": 275, "uint_fast32_t": 275, "uint_fast64_t": 275, "uint_fast8_t": 275, "uint_least16_t": 275, "uint_least32_t": 275, "uint_least64_t": 275, "uint_least8_t": 275, "uj": 287, "uj_imm20": 287, "ultipl": 16, "un": 39, "unabl": [16, 281], "uncondit": [280, 281, 282], "undefin": 16, "under": [1, 8, 10, 16, 21], "underli": [18, 19], "understand": [9, 10, 16, 18, 19, 265, 274, 275, 280, 281, 282], "unimp": 284, "union": 21, "uniqu": [285, 286], "unistd": 282, "unit": [16, 166, 273], "unknown": [19, 276, 280, 281, 282], "unless": [8, 10, 16, 21, 235], "unpars": [278, 284], "unpredict": 290, "unrecogn": [280, 281, 282, 283], "unregister_properti": [164, 170, 171, 184, 185, 210, 211, 212, 218, 219, 221, 222], "unreserveregisterspass": 113, "unset": [39, 41, 42, 43], "unset_address": [41, 42], "unset_forbidden_address_rang": 42, "unset_funct": 43, "unset_length": 42, "unset_memori": 39, "unset_possible_address": 42, "unset_possible_length": 42, "unset_regist": 39, "unset_valu": 43, "unsign": [275, 287], "unsupport": [16, 287], "until": [230, 286], "unwant": 8, "unwind": 284, "up": [16, 235, 262, 269, 278, 281, 283, 284, 285, 286, 289, 290], "updat": [8, 11, 14, 16, 18, 20, 228, 235, 236, 237, 247, 248, 250, 251, 252, 263, 266, 268, 269, 271, 280, 281, 282, 287], "update_address": 42, "update_address_from_operand": 42, "update_cache_need": 228, "update_dat": [179, 180], "update_register_definit": [250, 251, 252], "updateinstructionaddressespass": [16, 91], "updatevariableaddressespass": 159, "upgrad": [18, 261, 267], "upon": 10, "upper": 287, "upper_bound": 193, "urandom": 282, "us": [11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 39, 40, 41, 42, 43, 53, 74, 166, 168, 176, 184, 185, 193, 207, 224, 226, 230, 235, 262, 266, 267, 268, 269, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290], "usa": [18, 20], "usag": [16, 232, 233, 262, 273], "used_for_address_arithmet": [207, 208], "used_for_float_arithmet": [207, 208], "used_for_vector_arithmet": [207, 208], "useddict": 238, "useless": 278, "user": [11, 13, 14, 15, 16, 18, 19, 24, 230, 235, 262, 265, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "usr": 16, "usual": [50, 176, 268, 278, 284, 286], "utf": 246, "util": [8, 16, 18, 22, 40, 166, 203, 276, 277, 278], "v": [16, 20, 235, 236, 237, 247, 248, 262, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290], "v0": [252, 256, 288], "v2": [16, 282, 289, 290], "v206": 16, "v2_06": 290, "v2_07": 290, "v2_2": 290, "v3_00": 290, "v3_10": 290, "v_valu": [16, 119], "val": [163, 244], "val1": [73, 173, 174], "val2": [73, 173, 174], "valid": [9, 16, 22, 196, 197, 198, 201, 202, 224, 226, 230, 235, 268, 273, 277, 278, 279, 280, 281, 282, 287, 288, 290], "valid_unit": 16, "valu": [8, 16, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96, 106, 108, 118, 119, 126, 127, 131, 135, 143, 145, 146, 148, 149, 155, 163, 168, 169, 173, 174, 176, 182, 184, 190, 191, 193, 196, 197, 198, 200, 201, 202, 216, 228, 230, 231, 232, 235, 236, 237, 238, 241, 244, 247, 248, 250, 251, 252, 257, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "valueerror": 81, "var": [8, 18, 23, 33, 35, 50, 235, 275, 278, 282, 284, 289], "var_array_fp_1": 289, "var_array_fp_rnd": 289, "var_array_int24": 289, "var_nam": [278, 282, 284, 289], "var_sngl_int_1": 289, "var_typ": 258, "variabl": [16, 18, 23, 24, 25, 27, 28, 33, 35, 42, 45, 47, 48, 50, 173, 174, 236, 249, 250, 251, 252, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "variable_length": 42, "variable_to_test_definit": 249, "variablearrai": 45, "variablesingl": 45, "variant": [16, 287, 289], "variat": 286, "varieti": [18, 19], "variou": [14, 271, 284, 285, 286], "varnam": [124, 275], "vartyp": [47, 48, 275], "vector": [16, 193, 196, 197, 198, 200, 201, 202, 282, 285], "vega": 20, "verbal": 21, "verbatim": 10, "verbos": [16, 22, 235, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "veri": [8, 14, 19, 20, 39, 235, 271, 278, 280, 281, 282, 285], "verifi": 8, "version": [8, 10, 14, 16, 21, 249, 251, 252, 255, 256, 262, 268, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "vezyrtzi": 20, "vfa": 289, "vi": 235, "via": [14, 18, 20, 262, 263, 266, 267, 268, 271, 279, 283, 285], "video": 20, "view": [235, 236, 237, 247, 248, 284, 287], "virtual": [12, 262, 264, 265, 268, 269], "virtualenv": [12, 264, 265, 268], "visit": [22, 23], "vl": 289, "vlv": 20, "vmhaddshs_v0": 286, "void": [275, 278, 282], "vol": 20, "volatile_regist": [170, 171], "voltag": 20, "volum": 20, "vr": 16, "vscr": 16, "vsr": 16, "vst": 289, "vsu": 16, "vsu0_core0_scm_processor": 16, "vsx": 16, "w": [246, 287, 289], "w_v0": 287, "w_v1": 287, "wa": [1, 10, 21, 271, 280, 281], "wai": [18, 19, 216, 264, 285, 286], "wall": 278, "want": [11, 16, 268, 269, 271, 275, 285, 286], "war": 151, "warm": 289, "warmstor": [142, 146], "warn": [8, 16, 22, 33, 34, 35, 80, 82, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "warranti": [8, 16, 21], "washington": [18, 20], "watson": 272, "waw": 151, "we": [8, 9, 12, 15, 16, 18, 19, 20, 21, 263, 264, 265, 268, 269, 271, 272, 273, 275, 278, 280, 281, 282, 285, 286, 288, 290], "weak": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "web": 265, "webel": 20, "webpag": 284, "weight": [16, 238, 286], "weighted_choic": 238, "welcom": [14, 271], "well": [8, 14, 16, 24, 265, 268, 271, 279, 283, 288], "were": [14, 271], "werror": 278, "what": [8, 14, 16, 245, 271, 276, 277, 283], "wheel": [265, 266], "when": [8, 10, 11, 22, 24, 59, 73, 74, 184, 185, 230, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "whenev": [8, 176, 245, 289], "where": [19, 21, 24, 167, 176, 232, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290], "wherev": 21, "whether": [10, 14, 21, 176, 235, 271], "which": [8, 14, 15, 16, 21, 22, 23, 24, 28, 31, 33, 35, 40, 166, 176, 235, 244, 271, 275, 278, 280, 281, 282, 283, 284, 288], "while": [16, 21, 22, 176, 275, 278, 282, 283, 287], "white": 19, "who": [10, 14, 271], "whole": [10, 21], "whom": 21, "whose": 235, "why": [14, 271], "wide": [22, 235, 236, 262, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "width": [233, 275, 278], "wikipedia": 284, "wish": [14, 271], "with_traceback": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 231], "within": [8, 16, 19, 21, 23, 31, 176, 190, 191, 268, 269, 280, 281, 282, 286, 289], "without": [8, 11, 16, 21, 50, 271, 280, 281, 282, 285, 289], "word": [14, 271, 287], "word_length": [226, 227], "work": [1, 2, 10, 12, 16, 18, 19, 21, 176, 263, 264, 265, 268, 275, 286], "workflow": [11, 24, 271], "workload": 20, "workshop": 20, "worldwid": 21, "would": [14, 16, 18, 20, 24, 176, 268, 271, 283, 288], "wpedant": 278, "wrap": [236, 237, 275, 280, 281, 282, 285, 286], "wrap_endless_threshold": [280, 281], "wrap_in": 50, "wrapper": [16, 18, 22, 23, 24, 25, 168, 230, 282], "wrappers_path": 22, "write": [8, 14, 16, 21, 148, 151, 228, 235, 271, 274, 275, 287, 289], "write_cache_data": 228, "write_default_cache_data": 228, "write_default_cache_data_sil": 228, "write_empti": 235, "written": [8, 11, 21, 40, 268, 271], "wrong": [166, 224, 226, 262], "wt": 16, "wu": 287, "wu_v0": 287, "wu_v1": 287, "www": [8, 16, 21], "x": [16, 244, 275, 277, 278, 281, 284, 287], "x0": [278, 282, 284, 287], "x1": [278, 282, 284, 287], "x10": [278, 282, 284, 287], "x11": [282, 287], "x12": [278, 282, 284, 287], "x13": [278, 282, 284, 287], "x14": [278, 282, 284, 287], "x15": [278, 282, 284, 287], "x16": [282, 287], "x17": [282, 287], "x18": [282, 287], "x19": [282, 287], "x2": [278, 282, 284, 287], "x20": [282, 287], "x21": [282, 287], "x22": [282, 287], "x23": [282, 287], "x24": [282, 287], "x25": [282, 287], "x26": [282, 287], "x27": [282, 287], "x28": [282, 287], "x29": [282, 287], "x3": [282, 287], "x30": [282, 287], "x31": [282, 287], "x4": [282, 287], "x5": [282, 287], "x6": [282, 287], "x7": [282, 287], "x8": [282, 287], "x86": 268, "x86_64": 268, "x9": [282, 287], "x_v0": 287, "xor": 287, "xor_v0": 287, "xori": 287, "xori_v0": 287, "xvdivdp_v0": 285, "xvmaddadp_v0": 285, "xvmuldp_v0": 285, "y": [20, 244, 275], "yaml": [8, 11, 18, 241, 268, 269, 271, 290], "ye": 235, "year": [8, 266, 271], "yet": [16, 19], "yml": 9, "you": [7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 21, 230, 232, 235, 262, 264, 265, 266, 267, 268, 269, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "your": [8, 9, 10, 11, 12, 16, 18, 20, 21, 165, 262, 263, 264, 267, 268, 269, 271, 274, 275, 278, 280, 281, 282, 285, 289], "your_binary_fil": 284, "your_email": 8, "your_microprobe_packag": [265, 269], "your_nam": 8, "yyyi": 21, "z": [266, 268, 275, 276, 277, 284], "z13": [20, 276, 277, 290], "z14": [20, 278, 290], "z15": 290, "z64_linuc_gcc": 290, "z64_linux_gcc": [278, 290], "z64_mesa_st": [276, 277], "zero": [8, 16, 279, 280, 281, 282, 283, 284, 286, 287], "ziegler": 20}, "titles": ["API Documentation", "Copyright", "Design", "Code Organization", "Code generation work-flow", "Design overview", "Design target", "Development Corner", "Coding style", "Continuous integration", "Contributing to Microprobe", "Submitting patches", "Source code repository", "Development road-map", "Reporting issues and bugs", "Examples", "Examples on POWER", "Examples on RISCV", "Welcome to Microprobe Documentation", "Microprobe", "Publications", "License", "microprobe", "microprobe.code", "microprobe.code.Synthesizer", "microprobe.code.TraceSynthesizer", "microprobe.code.address", "microprobe.code.address.Address", "microprobe.code.address.InstructionAddress", "microprobe.code.address.MemoryValue", "microprobe.code.bbl", "microprobe.code.bbl.Bbl", "microprobe.code.benchmark", "microprobe.code.benchmark.Benchmark", "microprobe.code.benchmark.BuildingBlock", "microprobe.code.benchmark.MultiThreadedBenchmark", "microprobe.code.cfg", "microprobe.code.cfg.Cfg", "microprobe.code.context", "microprobe.code.context.Context", "microprobe.code.ins", "microprobe.code.ins.Instruction", "microprobe.code.ins.InstructionMemoryOperandValue", "microprobe.code.ins.InstructionOperandValue", "microprobe.code.ins.MicroprobeInstructionDefinition", "microprobe.code.var", "microprobe.code.var.Variable", "microprobe.code.var.VariableArray", "microprobe.code.var.VariableSingle", "microprobe.code.wrapper", "microprobe.code.wrapper.Wrapper", "microprobe.driver", "microprobe.driver.guided", "microprobe.exceptions", "microprobe.exceptions.MicroprobeAddressTranslationError", "microprobe.exceptions.MicroprobeArchitectureDefinitionError", "microprobe.exceptions.MicroprobeArchitectureFormatError", "microprobe.exceptions.MicroprobeAsmError", "microprobe.exceptions.MicroprobeBinaryError", "microprobe.exceptions.MicroprobeBranchConditionError", "microprobe.exceptions.MicroprobeCacheError", "microprobe.exceptions.MicroprobeCalledProcessError", "microprobe.exceptions.MicroprobeCodeGenerationError", "microprobe.exceptions.MicroprobeConstantRegisterError", "microprobe.exceptions.MicroprobeDMAFormatError", "microprobe.exceptions.MicroprobeDuplicatedValueError", "microprobe.exceptions.MicroprobeError", "microprobe.exceptions.MicroprobeException", "microprobe.exceptions.MicroprobeImportDefinitionError", "microprobe.exceptions.MicroprobeImportError", "microprobe.exceptions.MicroprobeLookupError", "microprobe.exceptions.MicroprobeMPTFormatError", "microprobe.exceptions.MicroprobeModelError", "microprobe.exceptions.MicroprobeNoComparatorError", "microprobe.exceptions.MicroprobeNoGenerationPathError", "microprobe.exceptions.MicroprobeObjdumpError", "microprobe.exceptions.MicroprobePolicyError", "microprobe.exceptions.MicroprobeRunCmdError", "microprobe.exceptions.MicroprobeTargetDefinitionError", "microprobe.exceptions.MicroprobeTypeError", "microprobe.exceptions.MicroprobeUncheckableEnvironmentWarning", "microprobe.exceptions.MicroprobeValueError", "microprobe.exceptions.MicroprobeWarning", "microprobe.exceptions.MicroprobeYamlFormatError", "microprobe.model", "microprobe.model.GenericModel", "microprobe.model.memory", "microprobe.model.memory.EndlessLoopDataMemoryModel", "microprobe.model.memory.EndlessLoopInstructionMemoryModel", "microprobe.passes", "microprobe.passes.Pass", "microprobe.passes.address", "microprobe.passes.address.SetInitAddressPass", "microprobe.passes.address.UpdateInstructionAddressesPass", "microprobe.passes.branch", "microprobe.passes.branch.BranchBraidNextPass", "microprobe.passes.branch.BranchNextPass", "microprobe.passes.branch.FixIndirectBranchPass", "microprobe.passes.branch.InitializeBranchDecorator", "microprobe.passes.branch.LinkBbls", "microprobe.passes.branch.NormalizeBranchTargetsPass", "microprobe.passes.branch.RandomizeByTypePass", "microprobe.passes.dat", "microprobe.passes.dat.InitializeDATPass", "microprobe.passes.dat.TranslateAddressPass", "microprobe.passes.decimal", "microprobe.passes.decimal.InitializeMemoryDecimalPass", "microprobe.passes.float", "microprobe.passes.float.InitializeMemoryFloatPass", "microprobe.passes.ilp", "microprobe.passes.ilp.AverageDependencyDistancePass", "microprobe.passes.ilp.ConstantDependencyDistancePass", "microprobe.passes.ilp.RandomDependencyDistancePass", "microprobe.passes.initialization", "microprobe.passes.initialization.AddFinalizationAssemblyPass", "microprobe.passes.initialization.AddInitializationAssemblyPass", "microprobe.passes.initialization.AddInitializationInstructionsPass", "microprobe.passes.initialization.AutoAlignPass", "microprobe.passes.initialization.InitializeRegisterPass", "microprobe.passes.initialization.InitializeRegistersPass", "microprobe.passes.initialization.ReserveRegistersPass", "microprobe.passes.initialization.UnReserveRegistersPass", "microprobe.passes.instruction", "microprobe.passes.instruction.AddAssemblyByIndexPass", "microprobe.passes.instruction.AddOnePass", "microprobe.passes.instruction.DIDTSimplePass", "microprobe.passes.instruction.DisableAsmByOpcodePass", "microprobe.passes.instruction.InsertInstructionSequencePass", "microprobe.passes.instruction.ReplaceInstructionByTypePass", "microprobe.passes.instruction.ReplaceLoadInstructionsPass", "microprobe.passes.instruction.ReproduceSequencePass", "microprobe.passes.instruction.SetInstructionOperandsByOpcodePass", "microprobe.passes.instruction.SetInstructionTypeByAlternatingSequencesPass", "microprobe.passes.instruction.SetInstructionTypeByElementPass", "microprobe.passes.instruction.SetInstructionTypeByProfilePass", "microprobe.passes.instruction.SetInstructionTypeByPropertyPass", "microprobe.passes.instruction.SetInstructionTypeBySequencePass", "microprobe.passes.instruction.SetInstructionTypePass", "microprobe.passes.instruction.SetRandomInstructionTypePass", "microprobe.passes.memory", "microprobe.passes.memory.FixMemoryReferencesPass", "microprobe.passes.memory.GenericMemoryModelPass", "microprobe.passes.memory.GenericMemoryStreamsPass", "microprobe.passes.memory.GenericOldMemoryModelPass", "microprobe.passes.memory.InitializeMemoryDecorator", "microprobe.passes.memory.SetMemoryOperandByOpcodePass", "microprobe.passes.memory.SingleMemoryStreamPass", "microprobe.passes.register", "microprobe.passes.register.CycleMinimalAllocationPass", "microprobe.passes.register.DefaultRegisterAllocationPass", "microprobe.passes.register.FixRegistersPass", "microprobe.passes.register.NoHazardsAllocationPass", "microprobe.passes.register.RandomAllocationPass", "microprobe.passes.structure", "microprobe.passes.structure.GenericCodeStructurePass", "microprobe.passes.structure.SimpleBuildingBlockPass", "microprobe.passes.symbol", "microprobe.passes.symbol.ResolveSymbolicReferencesPass", "microprobe.passes.symbol.SetInstructionLabelByIndexPass", "microprobe.passes.variable", "microprobe.passes.variable.DeclareVariablesPass", "microprobe.passes.variable.UpdateVariableAddressesPass", "microprobe.property", "microprobe.property.Property", "microprobe.property.PropertyHolder", "microprobe.schemas", "microprobe.target", "microprobe.target.Definition", "microprobe.target.Target", "microprobe.target.env", "microprobe.target.env.Environment", "microprobe.target.env.GenericEnvironment", "microprobe.target.isa", "microprobe.target.isa.GenericISA", "microprobe.target.isa.ISA", "microprobe.target.isa.comparator", "microprobe.target.isa.comparator.Comparator", "microprobe.target.isa.dat", "microprobe.target.isa.dat.DATmap", "microprobe.target.isa.dat.DynamicAddressTranslation", "microprobe.target.isa.dat.GenericDynamicAddressTranslation", "microprobe.target.isa.generator", "microprobe.target.isa.generator.Generator", "microprobe.target.isa.instruction", "microprobe.target.isa.instruction.GenericInstructionType", "microprobe.target.isa.instruction.InstructionType", "microprobe.target.isa.instruction_field", "microprobe.target.isa.instruction_field.GenericInstructionField", "microprobe.target.isa.instruction_field.InstructionField", "microprobe.target.isa.instruction_format", "microprobe.target.isa.instruction_format.GenericInstructionFormat", "microprobe.target.isa.instruction_format.InstructionFormat", "microprobe.target.isa.operand", "microprobe.target.isa.operand.InstructionAddressRelativeOperand", "microprobe.target.isa.operand.MemoryOperand", "microprobe.target.isa.operand.MemoryOperandDescriptor", "microprobe.target.isa.operand.Operand", "microprobe.target.isa.operand.OperandConst", "microprobe.target.isa.operand.OperandConstReg", "microprobe.target.isa.operand.OperandDescriptor", "microprobe.target.isa.operand.OperandImmRange", "microprobe.target.isa.operand.OperandReg", "microprobe.target.isa.operand.OperandValueSet", "microprobe.target.isa.register", "microprobe.target.isa.register.GenericRegister", "microprobe.target.isa.register.Register", "microprobe.target.isa.register_type", "microprobe.target.isa.register_type.GenericRegisterType", "microprobe.target.isa.register_type.RegisterType", "microprobe.target.uarch", "microprobe.target.uarch.GenericCPUMicroarchitecture", "microprobe.target.uarch.GenericMicroarchitecture", "microprobe.target.uarch.Microarchitecture", "microprobe.target.uarch.cache", "microprobe.target.uarch.cache.Cache", "microprobe.target.uarch.cache.CacheHierarchy", "microprobe.target.uarch.cache.SetAssociativeCache", "microprobe.target.uarch.element", "microprobe.target.uarch.element.GenericMicroarchitectureElement", "microprobe.target.uarch.element.MicroarchitectureElement", "microprobe.target.uarch.element_type", "microprobe.target.uarch.element_type.GenericMicroarchitectureElementType", "microprobe.target.uarch.element_type.MicroarchitectureElementType", "microprobe.utils", "microprobe.utils.asm", "microprobe.utils.asm.MicroprobeAsmInstructionDefinition", "microprobe.utils.bin", "microprobe.utils.bin.MicroprobeBinInstructionStream", "microprobe.utils.cache", "microprobe.utils.cmdline", "microprobe.utils.cmdline.CLI", "microprobe.utils.cmdline.LazyArgumentError", "microprobe.utils.cmdline.LazyArgumentParser", "microprobe.utils.cmdline.ParagraphFormatterML", "microprobe.utils.config", "microprobe.utils.config.DuplicateConfigParser", "microprobe.utils.config.MicroprobeConfiguration", "microprobe.utils.config.MicroprobeDefaultConfiguration", "microprobe.utils.distrib", "microprobe.utils.distrib.Choice", "microprobe.utils.ieee", "microprobe.utils.imp", "microprobe.utils.info", "microprobe.utils.logger", "microprobe.utils.misc", "microprobe.utils.misc.Pickable", "microprobe.utils.misc.Progress", "microprobe.utils.misc.RejectingDict", "microprobe.utils.misc.RejectingOrderedDict", "microprobe.utils.mpt", "microprobe.utils.mpt.MicroprobeTestDefinition", "microprobe.utils.mpt.MicroprobeTestDefinitionDefault", "microprobe.utils.mpt.MicroprobeTestDefinitionV0x5", "microprobe.utils.mpt.MicroprobeTestMemoryAccessDefinition", "microprobe.utils.mpt.MicroprobeTestParser", "microprobe.utils.mpt.MicroprobeTestParserDefault", "microprobe.utils.mpt.MicroprobeTestParserV0x5", "microprobe.utils.mpt.MicroprobeTestRegisterDefinition", "microprobe.utils.mpt.MicroprobeTestVariableDefinition", "microprobe.utils.profile", "microprobe.utils.yaml", "Getting started", "Checking Microprobe installation", "Installing Microprobe", "Installing Microprobe via GIT", "Installing Microprobe via PIP packages", "Microprobe package organization", "Quick start guide", "Requirements", "Upgrading Microprobe", "Support", "Report bugs &amp; Submit patches", "Contact", "Microprobe FAQ", "Command line tools", "C test format", "Tool: mp_bin2asm", "Tool: mp_bin2objdump", "Tool: mp_c2mpt", "Tool: mp_epi", "Tool: mp_mpt2bin", "Tool: mp_mpt2elf", "Tool: mp_mpt2test", "Tool: mp_mpt2trace", "Tool: mp_objdump2mpt", "Tool: mp_seq", "Tool: mp_seqtune", "Tool: mp_target", "Microprobe test (mpt) format", "MPT v0.5", "Command line target definition scheme", "Tutorials", "Tutorial: Adding/Modifying definitions", "Tutorial: A more complex microbenchmark generation policy", "Tutorial: Creating a command line tool (microbenchmark-generators)", "Tutorial: A simple microbenchmark generation policy"], "titleterms": {"5": 289, "A": [293, 295], "ad": 292, "addassemblybyindexpass": 123, "addfinalizationassemblypass": 114, "addinitializationassemblypass": 115, "addinitializationinstructionspass": 116, "addonepass": 124, "address": [26, 27, 28, 29, 91, 92, 93], "an": 284, "anf": 8, "api": 0, "applic": [278, 284], "asm": [224, 225], "auto": 8, "autoalignpass": 117, "averagedependencydistancepass": 110, "basic": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "bbl": [30, 31], "benchmark": [32, 33, 34, 35], "bin": [226, 227], "binari": [278, 284], "black": 8, "branch": [94, 95, 96, 97, 98, 99, 100, 101], "branchbraidnextpass": 95, "branchnextpass": 96, "bug": [14, 271], "buildingblock": 34, "c": [275, 278], "cach": [213, 214, 215, 216, 228], "cachehierarchi": 215, "can": 273, "case": [285, 286], "cfg": [36, 37], "check": 262, "checker": 8, "choic": 239, "class": 8, "cli": 230, "cmdline": [229, 230, 231, 232, 233], "code": [3, 4, 8, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 289], "collabor": 272, "command": [12, 264, 274, 290, 294], "comment": 8, "compar": [175, 176], "compil": 281, "complet": 289, "complex": 293, "config": [234, 235, 236, 237], "configur": 22, "constantdependencydistancepass": 111, "contact": 272, "content": 273, "context": [38, 39], "continu": 9, "contribut": [10, 273], "contributor": 272, "convent": 8, "copyright": 1, "corner": 7, "creat": 294, "current": 278, "custom": 278, "cycleminimalallocationpass": 148, "dat": [102, 103, 104, 177, 178, 179, 180, 289], "data": 289, "datmap": 178, "decim": [105, 106], "declar": 275, "declarevariablespass": 160, "defaultregisterallocationpass": 149, "definit": [167, 288, 290, 292], "design": [2, 5, 6], "detail": 275, "develop": [7, 12, 13, 272, 273], "didtsimplepass": 125, "direct": 272, "disableasmbyopcodepass": 126, "distrib": [238, 239], "do": 273, "docstr": 8, "document": [0, 8, 14, 18, 271], "driver": [51, 52], "duplicateconfigpars": 235, "dynamicaddresstransl": 179, "element": [217, 218, 219], "element_typ": [220, 221, 222], "endlessloopdatamemorymodel": 87, "endlessloopinstructionmemorymodel": 88, "ensur": 284, "env": [169, 170, 171], "environ": [22, 170], "exampl": [8, 15, 16, 17, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 289, 290], "except": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "faq": 273, "featur": [19, 273], "file": 284, "first": [12, 264, 273], "fix": [280, 281, 282], "fixindirectbranchpass": 97, "fixmemoryreferencespass": 140, "fixregisterspass": 150, "flag": [280, 281, 282], "float": [107, 108], "flow": [4, 278], "flynt": 8, "format": [8, 275, 278, 283, 288], "full": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "function": [23, 30, 32, 40, 162, 166, 169, 172, 175, 181, 183, 186, 189, 192, 203, 206, 209, 213, 217, 220, 224, 226, 228, 229, 238, 240, 241, 243, 244, 249, 259, 260, 275], "gener": [4, 181, 182, 290, 293, 294, 295], "genericcodestructurepass": 154, "genericcpumicroarchitectur": 210, "genericdynamicaddresstransl": 180, "genericenviron": 171, "genericinstructionfield": 187, "genericinstructionformat": 190, "genericinstructiontyp": 184, "genericisa": 173, "genericmemorymodelpass": 141, "genericmemorystreamspass": 142, "genericmicroarchitectur": 211, "genericmicroarchitectureel": 218, "genericmicroarchitectureelementtyp": 221, "genericmodel": 85, "genericoldmemorymodelpass": 143, "genericregist": 204, "genericregistertyp": 207, "get": [261, 273], "git": [264, 269], "github": [14, 271], "guid": [52, 267], "header": 288, "how": [273, 284], "i": 273, "ieee": 240, "ilp": [109, 110, 111, 112], "imp": 241, "implement": [273, 275], "indic": 0, "info": 242, "inform": 265, "initi": [113, 114, 115, 116, 117, 118, 119, 120, 121], "initializebranchdecor": 98, "initializedatpass": 103, "initializememorydecimalpass": 106, "initializememorydecor": 144, "initializememoryfloatpass": 108, "initializeregisterpass": 118, "initializeregisterspass": 119, "ins": [40, 41, 42, 43, 44], "insertinstructionsequencepass": 127, "instal": [262, 263, 264, 265, 268, 269], "instruct": [41, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 183, 184, 185], "instruction_field": [186, 187, 188], "instruction_format": [189, 190, 191], "instructionaddress": 28, "instructionaddressrelativeoperand": 193, "instructionfield": 188, "instructionformat": 191, "instructionmemoryoperandvalu": 42, "instructionoperandvalu": 43, "instructiontyp": 185, "integr": 9, "interfac": [278, 284], "isa": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "isa_power_v206_info": 16, "issu": 14, "kei": 19, "lazyargumenterror": 231, "lazyargumentpars": 232, "licens": 21, "limit": 278, "line": [274, 290, 294], "link": 8, "linkbbl": 99, "linker": 281, "logger": 243, "mandatori": 288, "map": 13, "memori": [86, 87, 88, 139, 140, 141, 142, 143, 144, 145, 146], "memoryoperand": 194, "memoryoperanddescriptor": 195, "memoryvalu": 29, "method": 8, "microarchitectur": 212, "microarchitectureel": 219, "microarchitectureelementtyp": 222, "microbenchmark": [293, 294, 295], "microprob": [10, 12, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 269, 273, 288], "microprobeaddresstranslationerror": 54, "microprobearchitecturedefinitionerror": 55, "microprobearchitectureformaterror": 56, "microprobeasmerror": 57, "microprobeasminstructiondefinit": 225, "microprobebinaryerror": 58, "microprobebininstructionstream": 227, "microprobebranchconditionerror": 59, "microprobecacheerror": 60, "microprobecalledprocesserror": 61, "microprobecodegenerationerror": 62, "microprobeconfigur": 236, "microprobeconstantregistererror": 63, "microprobedefaultconfigur": 237, "microprobedmaformaterror": 64, "microprobeduplicatedvalueerror": 65, "microprobeerror": 66, "microprobeexcept": 67, "microprobeimportdefinitionerror": 68, "microprobeimporterror": 69, "microprobeinstructiondefinit": 44, "microprobelookuperror": 70, "microprobemodelerror": 72, "microprobemptformaterror": 71, "microprobenocomparatorerror": 73, "microprobenogenerationpatherror": 74, "microprobeobjdumperror": 75, "microprobepolicyerror": 76, "microproberuncmderror": 77, "microprobetargetdefinitionerror": 78, "microprobetestdefinit": 250, "microprobetestdefinitiondefault": 251, "microprobetestdefinitionv0x5": 252, "microprobetestmemoryaccessdefinit": 253, "microprobetestpars": 254, "microprobetestparserdefault": 255, "microprobetestparserv0x5": 256, "microprobetestregisterdefinit": 257, "microprobetestvariabledefinit": 258, "microprobetypeerror": 79, "microprobeuncheckableenvironmentwarn": 80, "microprobevalueerror": 81, "microprobewarn": 82, "microprobeyamlformaterror": 83, "misc": [244, 245, 246, 247, 248], "model": [84, 85, 86, 87, 88], "modifi": 292, "modul": 8, "more": [265, 293], "mp_bin2asm": 276, "mp_bin2objdump": 277, "mp_c2mpt": 278, "mp_epi": 279, "mp_mpt2bin": 280, "mp_mpt2elf": 281, "mp_mpt2test": 282, "mp_mpt2trace": 283, "mp_objdump2mpt": 284, "mp_seq": 285, "mp_seqtun": 286, "mp_target": 287, "mpt": [249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 288, 289], "multithreadedbenchmark": 35, "my": 273, "new": 273, "nohazardsallocationpass": 151, "normalizebranchtargetspass": 100, "objdump": 284, "obtain": 284, "operand": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "operandconst": 197, "operandconstreg": 198, "operanddescriptor": 199, "operandimmrang": 200, "operandreg": 201, "operandvalueset": 202, "option": [22, 290], "organ": [3, 266], "other": 8, "output": [276, 277, 278, 282, 283, 284, 287, 290], "overview": [5, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "packag": [8, 265, 266], "paragraphformatterml": 233, "paramet": 278, "parti": 278, "pass": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161], "patch": [11, 271], "pickabl": 245, "pip": [265, 269], "polici": [293, 295], "power": 16, "power_v206_power7_ppc64_linux_gcc_custom": 16, "power_v206_power7_ppc64_linux_gcc_fu_stress": 16, "power_v206_power7_ppc64_linux_gcc_genet": 16, "power_v206_power7_ppc64_linux_gcc_memori": 16, "power_v206_power7_ppc64_linux_gcc_profil": 16, "power_v206_power7_ppc64_linux_gcc_random": 16, "pre": [12, 264], "privat": 8, "profil": 259, "progress": 246, "properti": [8, 162, 163, 164], "propertyhold": 164, "propos": 273, "public": [18, 20], "py": 16, "pycodestyl": 8, "pylint": 8, "quick": 267, "randomallocationpass": 152, "randomdependencydistancepass": 112, "randomizebytypepass": 101, "raw": 289, "refer": 8, "regist": [147, 148, 149, 150, 151, 152, 203, 204, 205, 289], "register_typ": [206, 207, 208], "registertyp": 208, "registr": 275, "rejectingdict": 247, "rejectingordereddict": 248, "releas": 266, "replaceinstructionbytypepass": 128, "replaceloadinstructionspass": 129, "report": [14, 271], "repositori": 12, "reproducesequencepass": 130, "requir": [12, 264, 268], "reserveregisterspass": 120, "resolvesymbolicreferencespass": 157, "riscv": 17, "road": 13, "run": 273, "runtim": 268, "schema": 165, "scheme": [266, 290], "script": 281, "section": [288, 289], "set": [12, 264], "setassociativecach": 216, "setinitaddresspass": 92, "setinstructionlabelbyindexpass": 158, "setinstructionoperandsbyopcodepass": 131, "setinstructiontypebyalternatingsequencespass": 132, "setinstructiontypebyelementpass": 133, "setinstructiontypebyprofilepass": 134, "setinstructiontypebypropertypass": 135, "setinstructiontypebysequencepass": 136, "setinstructiontypepass": 137, "setmemoryoperandbyopcodepass": 145, "setrandominstructiontypepass": 138, "simpl": 295, "simplebuildingblockpass": 155, "singlememorystreampass": 146, "sourc": 12, "start": [261, 267, 273], "state": 289, "structur": [153, 154, 155], "style": 8, "submit": [11, 271], "support": 270, "symbol": [156, 157, 158], "synthes": 24, "tabl": 0, "target": [6, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 290], "templat": [8, 275], "test": [275, 278, 288], "third": 278, "time": [12, 264], "todo": 8, "tool": [274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 294], "trace": [283, 289], "tracesynthes": 25, "translateaddresspass": 104, "tutori": [291, 292, 293, 294, 295], "uarch": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "unreserveregisterspass": 121, "up": [12, 264], "updateinstructionaddressespass": 93, "updatevariableaddressespass": 161, "upgrad": [268, 269], "us": [8, 14, 264, 265, 271, 285, 286], "usag": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "util": [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "v0": 289, "var": [45, 46, 47, 48], "variabl": [8, 22, 46, 159, 160, 161, 275], "variablearrai": 47, "variablesingl": 48, "version": 266, "via": [264, 265], "welcom": 18, "work": [4, 278], "wrapper": [49, 50], "yaml": 260}})