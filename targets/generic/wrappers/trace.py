# Copyright 2011-2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
This is the bin module documentation
"""
# Futures
from __future__ import absolute_import, print_function

# Built-in modules
import struct
from time import localtime, strftime

# This party modules
import six

# Own modules
import microprobe.code.wrapper
from microprobe.code.address import Address
from microprobe.code.context import Context
from microprobe.utils.cmdline import print_info
from microprobe.utils.logger import get_logger
from microprobe.utils.misc import RejectingDict


# Constants
LOG = get_logger(__name__)
__all__ = [
    "QTrace",
]
_INSTR_CACHE = RejectingDict()

# Functions


# Classes
class QTrace(microprobe.code.wrapper.Wrapper):
    """:class:`Wrapper` to generate QT files (.qt).

    """

    def __init__(
        self,
        init_code_address=0x01500000,
        init_data_address=0x01600000,
        reset=False,
    ):
        """Initialization abstract method.

        :param init_code_address:  (Default value = None)
        :param init_data_address:  (Default value = None)
        :param reset:  (Default value = False)

        """
        super(QTrace, self).__init__()

        self._init_code_address = init_code_address
        self._init_data_address = init_data_address
        self._start_address = None
        self._reset_state = reset

    def outputname(self, name):
        """

        :param name:

        """
        if (not name.endswith(".qt") and not name.endswith(
                ".qt.bz2") and not name.endswith("qt.gz")):
            return "%s.qt" % name

        return name

    def headers(self):
        """ """

        comment = "Trace generated by Microprobe on %s " % strftime(
            "%x %X %Z", localtime())

        header = []

        address = self._init_code_address

        header.append(struct.pack(">Q", 0x00010002))
        header.append(struct.pack(">H", 0xE002))
        header.append(struct.pack(">I", 0x0))
        header.append(struct.pack(">I", 0x01040700))
        header.append(struct.pack(">Q", address))
        header.append(struct.pack(">H", len(comment)))

        if six.PY3:
            comment = comment.encode()

        header.append(struct.pack(">%ss" % len(comment), comment))

        headerall = header[0]
        for elem in header[1:]:
            headerall += elem

        return headerall

    def post_var(self):
        """ """
        return ""

    def declare_global_var(self, dummy_var):
        """

        :param dummy_var:

        """
        return ""

    def init_global_var(self, dummy_var, dummy_value):
        """

        :param dummy_var:
        :param dummy_value:

        """
        return ""

    def required_global_vars(self):
        """ """
        return []

    def start_main(self):
        """ """
        return ""

    def start_loop(self, instr, instr_reset, dummy_aligned=True):
        """

        :param instr:
        :param instr_reset:
        :param dummy_aligned:  (Default value = True)

        """
        if self.reset:
            if self._start_address is None:
                self._start_address = instr_reset
        else:
            self._start_address = instr

        return ""

    def init_loop_pad(self):
        """ """
        return 0

    def wrap_ins(self, instr, next_instr=None, show=False):
        """

        :param instr:

        """

        if instr in _INSTR_CACHE and not show:
            return _INSTR_CACHE[instr]

        ins = []
        binary = instr.binary()

        if len(binary) == 64:
            prefix = binary[0:32]
            binary = binary[32:]
            ins.append(struct.pack(">I", int(prefix, 2)))
            ins.append(struct.pack(">H", 0))

        flags = 0
        next_address = None
        cacheable = True

        if instr.branch:
            cacheable = False
            flags |= 0x6000
            next_address = instr.address + \
                instr.architecture_type.format.length
            if next is not None:
                next_address = next_instr.address

            if next_address != \
                    instr.address + instr.architecture_type.format.length:
                flags |= 0x8040
                assert next_address.base_address == 'code'
                next_address = self._init_code_address + \
                    next_address.displacement
            else:
                next_address = None

        memory_address = None
        length = None

        if "MA" in instr.decorators:
            cacheable = False
            memory_address = instr.decorators['MA']['value']
            if not isinstance(memory_address, Address):
                memory_address = next(memory_address)

            init_data = 0
            if self._init_data_address is not None:
                init_data = self._init_data_address

            memory_address = init_data + \
                memory_address.displacement

            flags |= 0x0800

            for moperand in instr.memory_operands():
                if moperand.variable_length:
                    length = 8
                    flags |= 0x0100

        ins.append(struct.pack(">I", int(binary, 2)))
        ins.append(struct.pack(">H", flags))

        if instr.branch:
            ins.append(struct.pack(">B", 0))
            ins.append(struct.pack(">H", 0x80))

        if memory_address is not None:
            ins.append(struct.pack(">Q", memory_address))

        if length is not None:
            ins.append(struct.pack(">B", length))

        if next_address is not None:
            ins.append(struct.pack(">Q", next_address))

        if cacheable and not show:

            insall = ins[0]
            for elem in ins[1:]:
                insall += elem

            _INSTR_CACHE[instr] = insall

        if show:
            strfmt = "0x%016x: %-40s" % (self._init_code_address +
                                         instr.address.displacement,
                                         instr.assembly())
            if memory_address is not None:
                strfmt += " memref: 0x%016x" % memory_address

                if length is not None:
                    strfmt += " (length: %s bytes)" % length

            print_info(strfmt)

        insall = ins[0]
        for elem in ins[1:]:
            insall += elem

        return insall

    def end_loop(self, dummy_instr):
        """

        :param instr:

        """
        return ""

    def footer(self):
        """ """
        return ""

    def end_main(self):
        """ """
        return ""

    def infinite(self):
        """ """
        return False

    def reserved_registers(self, dummy_reserved, dummy_target):
        """

        :param dummy_reserved:
        :param dummy_target:

        """
        return []

    def context(self):
        """ """

        context = Context()
        context.set_code_segment(self._init_code_address)
        context.set_data_segment(self._init_data_address)
        context.set_symbolic(False)
        context.set_absolute(True)

        return context
