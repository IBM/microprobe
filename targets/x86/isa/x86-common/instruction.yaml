# Copyright 2022 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Generated on 2017-05-19 14:43:05.170000
# Generated from x86reference.xml
#
- Name: "ADD_V0"
  Mnemonic: "ADD"
  Opcode: "00"
  Description: "Add"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "ADD_V1"
  Mnemonic: "ADD"
  Opcode: "00"
  Description: "Add"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "ADD_V2"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "ADD_V3"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "ADD_V4"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "ADD_V5"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "ADD_V6"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "ADD_V7"
  Mnemonic: "ADD"
  Opcode: "01"
  Description: "Add"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "ADD_V8"
  Mnemonic: "ADD"
  Opcode: "02"
  Description: "Add"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "ADD_V9"
  Mnemonic: "ADD"
  Opcode: "02"
  Description: "Add"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "ADD_V10"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "ADD_V11"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "ADD_V12"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "ADD_V13"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "ADD_V14"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "ADD_V15"
  Mnemonic: "ADD"
  Opcode: "03"
  Description: "Add"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "OR_V0"
  Mnemonic: "OR"
  Opcode: "08"
  Description: "Logical Inclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "OR_V1"
  Mnemonic: "OR"
  Opcode: "08"
  Description: "Logical Inclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "OR_V2"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "OR_V3"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "OR_V4"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "OR_V5"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "OR_V6"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "OR_V7"
  Mnemonic: "OR"
  Opcode: "09"
  Description: "Logical Inclusive OR"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "OR_V8"
  Mnemonic: "OR"
  Opcode: "0A"
  Description: "Logical Inclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "OR_V9"
  Mnemonic: "OR"
  Opcode: "0A"
  Description: "Logical Inclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "OR_V10"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "OR_V11"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "OR_V12"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "OR_V13"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "OR_V14"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "OR_V15"
  Mnemonic: "OR"
  Opcode: "0B"
  Description: "Logical Inclusive OR"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "ADC_V0"
  Mnemonic: "ADC"
  Opcode: "10"
  Description: "Add with Carry"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "ADC_V1"
  Mnemonic: "ADC"
  Opcode: "10"
  Description: "Add with Carry"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "ADC_V2"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "ADC_V3"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "ADC_V4"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "ADC_V5"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "ADC_V6"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "ADC_V7"
  Mnemonic: "ADC"
  Opcode: "11"
  Description: "Add with Carry"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "ADC_V8"
  Mnemonic: "ADC"
  Opcode: "12"
  Description: "Add with Carry"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "ADC_V9"
  Mnemonic: "ADC"
  Opcode: "12"
  Description: "Add with Carry"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "ADC_V10"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "ADC_V11"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "ADC_V12"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "ADC_V13"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "ADC_V14"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "ADC_V15"
  Mnemonic: "ADC"
  Opcode: "13"
  Description: "Add with Carry"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "SBB_V0"
  Mnemonic: "SBB"
  Opcode: "18"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "SBB_V1"
  Mnemonic: "SBB"
  Opcode: "18"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "SBB_V2"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "SBB_V3"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "SBB_V4"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "SBB_V5"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "SBB_V6"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "SBB_V7"
  Mnemonic: "SBB"
  Opcode: "19"
  Description: "Integer Subtraction with Borrow"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "SBB_V8"
  Mnemonic: "SBB"
  Opcode: "1A"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "SBB_V9"
  Mnemonic: "SBB"
  Opcode: "1A"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "SBB_V10"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "SBB_V11"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "SBB_V12"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "SBB_V13"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "SBB_V14"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "SBB_V15"
  Mnemonic: "SBB"
  Opcode: "1B"
  Description: "Integer Subtraction with Borrow"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "AND_V0"
  Mnemonic: "AND"
  Opcode: "20"
  Description: "Logical AND"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "AND_V1"
  Mnemonic: "AND"
  Opcode: "20"
  Description: "Logical AND"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "AND_V2"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "AND_V3"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "AND_V4"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "AND_V5"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "AND_V6"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "AND_V7"
  Mnemonic: "AND"
  Opcode: "21"
  Description: "Logical AND"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "AND_V8"
  Mnemonic: "AND"
  Opcode: "22"
  Description: "Logical AND"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "AND_V9"
  Mnemonic: "AND"
  Opcode: "22"
  Description: "Logical AND"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "AND_V10"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "AND_V11"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "AND_V12"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "AND_V13"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "AND_V14"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "AND_V15"
  Mnemonic: "AND"
  Opcode: "23"
  Description: "Logical AND"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "SUB_V0"
  Mnemonic: "SUB"
  Opcode: "28"
  Description: "Subtract"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "SUB_V1"
  Mnemonic: "SUB"
  Opcode: "28"
  Description: "Subtract"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "SUB_V2"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "SUB_V3"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "SUB_V4"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "SUB_V5"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "SUB_V6"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "SUB_V7"
  Mnemonic: "SUB"
  Opcode: "29"
  Description: "Subtract"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "SUB_V8"
  Mnemonic: "SUB"
  Opcode: "2A"
  Description: "Subtract"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "SUB_V9"
  Mnemonic: "SUB"
  Opcode: "2A"
  Description: "Subtract"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "SUB_V10"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "SUB_V11"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "SUB_V12"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "SUB_V13"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "SUB_V14"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "SUB_V15"
  Mnemonic: "SUB"
  Opcode: "2B"
  Description: "Subtract"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "XOR_V0"
  Mnemonic: "XOR"
  Opcode: "30"
  Description: "Logical Exclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "XOR_V1"
  Mnemonic: "XOR"
  Opcode: "30"
  Description: "Logical Exclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "XOR_V2"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "XOR_V3"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "XOR_V4"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "XOR_V5"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "XOR_V6"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "XOR_V7"
  Mnemonic: "XOR"
  Opcode: "31"
  Description: "Logical Exclusive OR"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "XOR_V8"
  Mnemonic: "XOR"
  Opcode: "32"
  Description: "Logical Exclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "XOR_V9"
  Mnemonic: "XOR"
  Opcode: "32"
  Description: "Logical Exclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "XOR_V10"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "XOR_V11"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "XOR_V12"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "XOR_V13"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "XOR_V14"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "XOR_V15"
  Mnemonic: "XOR"
  Opcode: "33"
  Description: "Logical Exclusive OR"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMP_V0"
  Mnemonic: "CMP"
  Opcode: "38"
  Description: "Compare Two Operands"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "CMP_V1"
  Mnemonic: "CMP"
  Opcode: "38"
  Description: "Compare Two Operands"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "CMP_V2"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMP_V3"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMP_V4"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMP_V5"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMP_V6"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMP_V7"
  Mnemonic: "CMP"
  Opcode: "39"
  Description: "Compare Two Operands"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMP_V8"
  Mnemonic: "CMP"
  Opcode: "3A"
  Description: "Compare Two Operands"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "CMP_V9"
  Mnemonic: "CMP"
  Opcode: "3A"
  Description: "Compare Two Operands"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "CMP_V10"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMP_V11"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMP_V12"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMP_V13"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMP_V14"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMP_V15"
  Mnemonic: "CMP"
  Opcode: "3B"
  Description: "Compare Two Operands"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "ARPL_V0"
  Mnemonic: "ARPL"
  Opcode: "63"
  Description: "Adjust RPL Field of Segment Selector"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "ARPL_V1"
  Mnemonic: "ARPL"
  Opcode: "63"
  Description: "Adjust RPL Field of Segment Selector"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVSXD_V0"
  Mnemonic: "MOVSXD"
  Opcode: "63"
  Description: "Move with Sign-Extension"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVSXD_V1"
  Mnemonic: "MOVSXD"
  Opcode: "63"
  Description: "Move with Sign-Extension"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVSXD_V2"
  Mnemonic: "MOVSXD"
  Opcode: "63"
  Description: "Move with Sign-Extension"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVSXD_V3"
  Mnemonic: "MOVSXD"
  Opcode: "63"
  Description: "Move with Sign-Extension"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "TEST_V0"
  Mnemonic: "TEST"
  Opcode: "84"
  Description: "Logical Compare"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "TEST_V1"
  Mnemonic: "TEST"
  Opcode: "84"
  Description: "Logical Compare"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "TEST_V2"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "TEST_V3"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "TEST_V4"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "TEST_V5"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "TEST_V6"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "TEST_V7"
  Mnemonic: "TEST"
  Opcode: "85"
  Description: "Logical Compare"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "XCHG_V0"
  Mnemonic: "XCHG"
  Opcode: "86"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "XCHG_V1"
  Mnemonic: "XCHG"
  Opcode: "86"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "XCHG_V2"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "XCHG_V3"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "XCHG_V4"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "XCHG_V5"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "XCHG_V6"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "XCHG_V7"
  Mnemonic: "XCHG"
  Opcode: "87"
  Description: "Exchange Register/Memory with Register"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOV_V0"
  Mnemonic: "MOV"
  Opcode: "88"
  Description: "Move"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "MOV_V1"
  Mnemonic: "MOV"
  Opcode: "88"
  Description: "Move"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "MOV_V2"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "MOV_V3"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "O8MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "MOV_V4"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "REXO8MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "MOV_V5"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "MOV_V6"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "O8MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOV_V7"
  Mnemonic: "MOV"
  Opcode: "89"
  Description: "Move"
  Format: "REXO8MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOV_V8"
  Mnemonic: "MOV"
  Opcode: "8A"
  Description: "Move"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOV_V9"
  Mnemonic: "MOV"
  Opcode: "8A"
  Description: "Move"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOV_V10"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOV_V11"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOV_V12"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "O8RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOV_V13"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "O8RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOV_V14"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "REXO8RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "MOV_V15"
  Mnemonic: "MOV"
  Opcode: "8B"
  Description: "Move"
  Format: "REXO8RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "LAR_V0"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LAR_V1"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LAR_V2"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LAR_V3"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LAR_V4"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "LAR_V5"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LAR_V6"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "LAR_V7"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LAR_V8"
  Mnemonic: "LAR"
  Opcode: "0F02"
  Description: "Load Access Rights Byte"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "LSL_V0"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LSL_V1"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LSL_V2"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "LSL_V3"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LSL_V4"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "LSL_V5"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LSL_V6"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "LSL_V7"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "LSL_V8"
  Mnemonic: "LSL"
  Opcode: "0F03"
  Description: "Load Segment Limit"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVUPS_V0"
  Mnemonic: "MOVUPS"
  Opcode: "0F10"
  Description: "Move Unaligned Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVUPS_V1"
  Mnemonic: "MOVUPS"
  Opcode: "0F10"
  Description: "Move Unaligned Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVUPD_V0"
  Mnemonic: "MOVUPD"
  Opcode: "0F10"
  Description: "Move Unaligned Packed Double-FP Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVUPD_V1"
  Mnemonic: "MOVUPD"
  Opcode: "0F10"
  Description: "Move Unaligned Packed Double-FP Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVUPS_V2"
  Mnemonic: "MOVUPS"
  Opcode: "0F11"
  Description: "Move Unaligned Packed Single-FP Values"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVUPS_V3"
  Mnemonic: "MOVUPS"
  Opcode: "0F11"
  Description: "Move Unaligned Packed Single-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "MOVUPD_V2"
  Mnemonic: "MOVUPD"
  Opcode: "0F11"
  Description: "Move Unaligned Packed Double-FP Values"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVUPD_V3"
  Mnemonic: "MOVUPD"
  Opcode: "0F11"
  Description: "Move Unaligned Packed Double-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "MOVLPS_V0"
  Mnemonic: "MOVLPS"
  Opcode: "0F12"
  Description: "Move Low Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVLPD_V0"
  Mnemonic: "MOVLPD"
  Opcode: "0F12"
  Description: "Move Low Packed Double-FP Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVDDUP_V0"
  Mnemonic: "MOVDDUP"
  Opcode: "0F12"
  Description: "Move One Double-FP and Duplicate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVDDUP_V1"
  Mnemonic: "MOVDDUP"
  Opcode: "0F12"
  Description: "Move One Double-FP and Duplicate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVSLDUP_V0"
  Mnemonic: "MOVSLDUP"
  Opcode: "0F12"
  Description: "Move Packed Single-FP Low and Duplicate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVSLDUP_V1"
  Mnemonic: "MOVSLDUP"
  Opcode: "0F12"
  Description: "Move Packed Single-FP Low and Duplicate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVLPS_V1"
  Mnemonic: "MOVLPS"
  Opcode: "0F13"
  Description: "Move Low Packed Single-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVLPD_V1"
  Mnemonic: "MOVLPD"
  Opcode: "0F13"
  Description: "Move Low Packed Double-FP Value"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "UNPCKLPS_V0"
  Mnemonic: "UNPCKLPS"
  Opcode: "0F14"
  Description: "Unpack and Interleave Low Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "UNPCKLPS_V1"
  Mnemonic: "UNPCKLPS"
  Opcode: "0F14"
  Description: "Unpack and Interleave Low Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "UNPCKLPD_V0"
  Mnemonic: "UNPCKLPD"
  Opcode: "0F14"
  Description: "Unpack and Interleave Low Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "UNPCKLPD_V1"
  Mnemonic: "UNPCKLPD"
  Opcode: "0F14"
  Description: "Unpack and Interleave Low Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "UNPCKHPS_V0"
  Mnemonic: "UNPCKHPS"
  Opcode: "0F15"
  Description: "Unpack and Interleave High Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "UNPCKHPS_V1"
  Mnemonic: "UNPCKHPS"
  Opcode: "0F15"
  Description: "Unpack and Interleave High Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "UNPCKHPD_V0"
  Mnemonic: "UNPCKHPD"
  Opcode: "0F15"
  Description: "Unpack and Interleave High Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "UNPCKHPD_V1"
  Mnemonic: "UNPCKHPD"
  Opcode: "0F15"
  Description: "Unpack and Interleave High Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVHPS_V0"
  Mnemonic: "MOVHPS"
  Opcode: "0F16"
  Description: "Move High Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVHPD_V0"
  Mnemonic: "MOVHPD"
  Opcode: "0F16"
  Description: "Move High Packed Double-FP Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVSHDUP_V0"
  Mnemonic: "MOVSHDUP"
  Opcode: "0F16"
  Description: "Move Packed Single-FP High and Duplicate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVSHDUP_V1"
  Mnemonic: "MOVSHDUP"
  Opcode: "0F16"
  Description: "Move Packed Single-FP High and Duplicate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVHPS_V1"
  Mnemonic: "MOVHPS"
  Opcode: "0F17"
  Description: "Move High Packed Single-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVHPD_V1"
  Mnemonic: "MOVHPD"
  Opcode: "0F17"
  Description: "Move High Packed Double-FP Value"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVAPS_V0"
  Mnemonic: "MOVAPS"
  Opcode: "0F28"
  Description: "Move Aligned Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVAPS_V1"
  Mnemonic: "MOVAPS"
  Opcode: "0F28"
  Description: "Move Aligned Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVAPD_V0"
  Mnemonic: "MOVAPD"
  Opcode: "0F28"
  Description: "Move Aligned Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVAPD_V1"
  Mnemonic: "MOVAPD"
  Opcode: "0F28"
  Description: "Move Aligned Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVAPS_V2"
  Mnemonic: "MOVAPS"
  Opcode: "0F29"
  Description: "Move Aligned Packed Single-FP Values"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVAPS_V3"
  Mnemonic: "MOVAPS"
  Opcode: "0F29"
  Description: "Move Aligned Packed Single-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "MOVAPD_V2"
  Mnemonic: "MOVAPD"
  Opcode: "0F29"
  Description: "Move Aligned Packed Double-FP Values"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVAPD_V3"
  Mnemonic: "MOVAPD"
  Opcode: "0F29"
  Description: "Move Aligned Packed Double-FP Values"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "CVTPI2PS_V0"
  Mnemonic: "CVTPI2PS"
  Opcode: "0F2A"
  Description: "Convert Packed DW Integers to Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "CVTPI2PS_V1"
  Mnemonic: "CVTPI2PS"
  Opcode: "0F2A"
  Description: "Convert Packed DW Integers to Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CVTPI2PD_V0"
  Mnemonic: "CVTPI2PD"
  Opcode: "0F2A"
  Description: "Convert Packed DW Integers to Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "CVTPI2PD_V1"
  Mnemonic: "CVTPI2PD"
  Opcode: "0F2A"
  Description: "Convert Packed DW Integers to Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVNTPS_V0"
  Mnemonic: "MOVNTPS"
  Opcode: "0F2B"
  Description: "Store Packed Single-FP Values Using Non-Temporal Hint"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "MOVNTPD_V0"
  Mnemonic: "MOVNTPD"
  Opcode: "0F2B"
  Description: "Store Packed Double-FP Values Using Non-Temporal Hint"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "CVTTPS2PI_V0"
  Mnemonic: "CVTTPS2PI"
  Opcode: "0F2C"
  Description: "Convert with Trunc. Packed Single-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTTPS2PI_V1"
  Mnemonic: "CVTTPS2PI"
  Opcode: "0F2C"
  Description: "Convert with Trunc. Packed Single-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CVTTPD2PI_V0"
  Mnemonic: "CVTTPD2PI"
  Opcode: "0F2C"
  Description: "Convert with Trunc. Packed Double-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTTPD2PI_V1"
  Mnemonic: "CVTTPD2PI"
  Opcode: "0F2C"
  Description: "Convert with Trunc. Packed Double-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTPS2PI_V0"
  Mnemonic: "CVTPS2PI"
  Opcode: "0F2D"
  Description: "Convert Packed Single-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPS2PI_V1"
  Mnemonic: "CVTPS2PI"
  Opcode: "0F2D"
  Description: "Convert Packed Single-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CVTPD2PI_V0"
  Mnemonic: "CVTPD2PI"
  Opcode: "0F2D"
  Description: "Convert Packed Double-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPD2PI_V1"
  Mnemonic: "CVTPD2PI"
  Opcode: "0F2D"
  Description: "Convert Packed Double-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSHUFB_V0"
  Mnemonic: "PSHUFB"
  Opcode: "0F38"
  Description: "Packed Shuffle Bytes"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSHUFB_V1"
  Mnemonic: "PSHUFB"
  Opcode: "0F38"
  Description: "Packed Shuffle Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSHUFB_V2"
  Mnemonic: "PSHUFB"
  Opcode: "0F38"
  Description: "Packed Shuffle Bytes"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSHUFB_V3"
  Mnemonic: "PSHUFB"
  Opcode: "0F38"
  Description: "Packed Shuffle Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHADDW_V0"
  Mnemonic: "PHADDW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHADDW_V1"
  Mnemonic: "PHADDW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHADDW_V2"
  Mnemonic: "PHADDW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHADDW_V3"
  Mnemonic: "PHADDW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHADDD_V0"
  Mnemonic: "PHADDD"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHADDD_V1"
  Mnemonic: "PHADDD"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHADDD_V2"
  Mnemonic: "PHADDD"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHADDD_V3"
  Mnemonic: "PHADDD"
  Opcode: "0F38"
  Description: "Packed Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHADDSW_V0"
  Mnemonic: "PHADDSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add and Saturate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHADDSW_V1"
  Mnemonic: "PHADDSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add and Saturate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHADDSW_V2"
  Mnemonic: "PHADDSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add and Saturate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHADDSW_V3"
  Mnemonic: "PHADDSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Add and Saturate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMADDUBSW_V0"
  Mnemonic: "PMADDUBSW"
  Opcode: "0F38"
  Description: "Multiply and Add Packed Signed and Unsigned Bytes"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMADDUBSW_V1"
  Mnemonic: "PMADDUBSW"
  Opcode: "0F38"
  Description: "Multiply and Add Packed Signed and Unsigned Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMADDUBSW_V2"
  Mnemonic: "PMADDUBSW"
  Opcode: "0F38"
  Description: "Multiply and Add Packed Signed and Unsigned Bytes"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMADDUBSW_V3"
  Mnemonic: "PMADDUBSW"
  Opcode: "0F38"
  Description: "Multiply and Add Packed Signed and Unsigned Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHSUBW_V0"
  Mnemonic: "PHSUBW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHSUBW_V1"
  Mnemonic: "PHSUBW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHSUBW_V2"
  Mnemonic: "PHSUBW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHSUBW_V3"
  Mnemonic: "PHSUBW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHSUBD_V0"
  Mnemonic: "PHSUBD"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHSUBD_V1"
  Mnemonic: "PHSUBD"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHSUBD_V2"
  Mnemonic: "PHSUBD"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHSUBD_V3"
  Mnemonic: "PHSUBD"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHSUBSW_V0"
  Mnemonic: "PHSUBSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract and Saturate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PHSUBSW_V1"
  Mnemonic: "PHSUBSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract and Saturate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PHSUBSW_V2"
  Mnemonic: "PHSUBSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract and Saturate"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHSUBSW_V3"
  Mnemonic: "PHSUBSW"
  Opcode: "0F38"
  Description: "Packed Horizontal Subtract and Saturate"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSIGNB_V0"
  Mnemonic: "PSIGNB"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSIGNB_V1"
  Mnemonic: "PSIGNB"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSIGNB_V2"
  Mnemonic: "PSIGNB"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSIGNB_V3"
  Mnemonic: "PSIGNB"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSIGNW_V0"
  Mnemonic: "PSIGNW"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSIGNW_V1"
  Mnemonic: "PSIGNW"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSIGNW_V2"
  Mnemonic: "PSIGNW"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSIGNW_V3"
  Mnemonic: "PSIGNW"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSIGND_V0"
  Mnemonic: "PSIGND"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSIGND_V1"
  Mnemonic: "PSIGND"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSIGND_V2"
  Mnemonic: "PSIGND"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSIGND_V3"
  Mnemonic: "PSIGND"
  Opcode: "0F38"
  Description: "Packed SIGN"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULHRSW_V0"
  Mnemonic: "PMULHRSW"
  Opcode: "0F38"
  Description: "Packed Multiply High with Round and Scale"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMULHRSW_V1"
  Mnemonic: "PMULHRSW"
  Opcode: "0F38"
  Description: "Packed Multiply High with Round and Scale"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULHRSW_V2"
  Mnemonic: "PMULHRSW"
  Opcode: "0F38"
  Description: "Packed Multiply High with Round and Scale"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULHRSW_V3"
  Mnemonic: "PMULHRSW"
  Opcode: "0F38"
  Description: "Packed Multiply High with Round and Scale"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PTEST_V0"
  Mnemonic: "PTEST"
  Opcode: "0F38"
  Description: "Logical Compare"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PTEST_V1"
  Mnemonic: "PTEST"
  Opcode: "0F38"
  Description: "Logical Compare"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PABSB_V0"
  Mnemonic: "PABSB"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PABSB_V1"
  Mnemonic: "PABSB"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PABSB_V2"
  Mnemonic: "PABSB"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PABSB_V3"
  Mnemonic: "PABSB"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PABSW_V0"
  Mnemonic: "PABSW"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PABSW_V1"
  Mnemonic: "PABSW"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PABSW_V2"
  Mnemonic: "PABSW"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PABSW_V3"
  Mnemonic: "PABSW"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PABSD_V0"
  Mnemonic: "PABSD"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PABSD_V1"
  Mnemonic: "PABSD"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PABSD_V2"
  Mnemonic: "PABSD"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PABSD_V3"
  Mnemonic: "PABSD"
  Opcode: "0F38"
  Description: "Packed Absolute Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMOVSXBW_V0"
  Mnemonic: "PMOVSXBW"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMOVSXBD_V0"
  Mnemonic: "PMOVSXBD"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PMOVSXBQ_V0"
  Mnemonic: "PMOVSXBQ"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "PMOVSXWD_V0"
  Mnemonic: "PMOVSXWD"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMOVSXWQ_V0"
  Mnemonic: "PMOVSXWQ"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PMOVSXDQ_V0"
  Mnemonic: "PMOVSXDQ"
  Opcode: "0F38"
  Description: "Packed Move with Sign Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULDQ_V0"
  Mnemonic: "PMULDQ"
  Opcode: "0F38"
  Description: "Multiply Packed Signed Dword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULDQ_V1"
  Mnemonic: "PMULDQ"
  Opcode: "0F38"
  Description: "Multiply Packed Signed Dword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPEQQ_V0"
  Mnemonic: "PCMPEQQ"
  Opcode: "0F38"
  Description: "Compare Packed Qword Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQQ_V1"
  Mnemonic: "PCMPEQQ"
  Opcode: "0F38"
  Description: "Compare Packed Qword Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVNTDQA_V0"
  Mnemonic: "MOVNTDQA"
  Opcode: "0F38"
  Description: "Load Double Quadword Non-Temporal Aligned Hint"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PACKUSDW_V0"
  Mnemonic: "PACKUSDW"
  Opcode: "0F38"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PACKUSDW_V1"
  Mnemonic: "PACKUSDW"
  Opcode: "0F38"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMOVZXBW_V0"
  Mnemonic: "PMOVZXBW"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMOVZXBD_V0"
  Mnemonic: "PMOVZXBD"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PMOVZXBQ_V0"
  Mnemonic: "PMOVZXBQ"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "PMOVZXWD_V0"
  Mnemonic: "PMOVZXWD"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMOVZXWQ_V0"
  Mnemonic: "PMOVZXWQ"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PMOVZXDQ_V0"
  Mnemonic: "PMOVZXDQ"
  Opcode: "0F38"
  Description: "Packed Move with Zero Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PCMPGTQ_V0"
  Mnemonic: "PCMPGTQ"
  Opcode: "0F38"
  Description: "Compare Packed Qword Data for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTQ_V1"
  Mnemonic: "PCMPGTQ"
  Opcode: "0F38"
  Description: "Compare Packed Qword Data for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINSB_V0"
  Mnemonic: "PMINSB"
  Opcode: "0F38"
  Description: "Minimum of Packed Signed Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINSB_V1"
  Mnemonic: "PMINSB"
  Opcode: "0F38"
  Description: "Minimum of Packed Signed Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINSD_V0"
  Mnemonic: "PMINSD"
  Opcode: "0F38"
  Description: "Minimum of Packed Signed Dword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINSD_V1"
  Mnemonic: "PMINSD"
  Opcode: "0F38"
  Description: "Minimum of Packed Signed Dword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINUW_V0"
  Mnemonic: "PMINUW"
  Opcode: "0F38"
  Description: "Minimum of Packed Unsigned Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINUW_V1"
  Mnemonic: "PMINUW"
  Opcode: "0F38"
  Description: "Minimum of Packed Unsigned Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINUD_V0"
  Mnemonic: "PMINUD"
  Opcode: "0F38"
  Description: "Minimum of Packed Unsigned Dword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINUD_V1"
  Mnemonic: "PMINUD"
  Opcode: "0F38"
  Description: "Minimum of Packed Unsigned Dword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXSB_V0"
  Mnemonic: "PMAXSB"
  Opcode: "0F38"
  Description: "Maximum of Packed Signed Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXSB_V1"
  Mnemonic: "PMAXSB"
  Opcode: "0F38"
  Description: "Maximum of Packed Signed Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXSD_V0"
  Mnemonic: "PMAXSD"
  Opcode: "0F38"
  Description: "Maximum of Packed Signed Dword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXSD_V1"
  Mnemonic: "PMAXSD"
  Opcode: "0F38"
  Description: "Maximum of Packed Signed Dword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXUW_V0"
  Mnemonic: "PMAXUW"
  Opcode: "0F38"
  Description: "Maximum of Packed Unsigned Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXUW_V1"
  Mnemonic: "PMAXUW"
  Opcode: "0F38"
  Description: "Maximum of Packed Unsigned Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXUD_V0"
  Mnemonic: "PMAXUD"
  Opcode: "0F38"
  Description: "Maximum of Packed Unsigned Dword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXUD_V1"
  Mnemonic: "PMAXUD"
  Opcode: "0F38"
  Description: "Maximum of Packed Unsigned Dword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULLD_V0"
  Mnemonic: "PMULLD"
  Opcode: "0F38"
  Description: "Multiply Packed Signed Dword Integers and Store Low Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULLD_V1"
  Mnemonic: "PMULLD"
  Opcode: "0F38"
  Description: "Multiply Packed Signed Dword Integers and Store Low Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PHMINPOSUW_V0"
  Mnemonic: "PHMINPOSUW"
  Opcode: "0F38"
  Description: "Packed Horizontal Word Minimum"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PHMINPOSUW_V1"
  Mnemonic: "PHMINPOSUW"
  Opcode: "0F38"
  Description: "Packed Horizontal Word Minimum"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "INVEPT_V0"
  Mnemonic: "INVEPT"
  Opcode: "0F38"
  Description: "Invalidate Translations Derived from EPT"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "INVEPT_V1"
  Mnemonic: "INVEPT"
  Opcode: "0F38"
  Description: "Invalidate Translations Derived from EPT"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "INVVPID_V0"
  Mnemonic: "INVVPID"
  Opcode: "0F38"
  Description: "Invalidate Translations Based on VPID"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "INVVPID_V1"
  Mnemonic: "INVVPID"
  Opcode: "0F38"
  Description: "Invalidate Translations Based on VPID"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVBE_V0"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVBE_V1"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVBE_V2"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CRC32_V0"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "CRC32_V1"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "CRC32_V2"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "CRC32_V3"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVBE_V3"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "MOVBE_V4"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVBE_V5"
  Mnemonic: "MOVBE"
  Opcode: "0F38"
  Description: "Move Data After Swapping Bytes"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "CRC32_V4"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CRC32_V5"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CRC32_V6"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CRC32_V7"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CRC32_V8"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CRC32_V9"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CRC32_V10"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CRC32_V11"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CRC32_V12"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CRC32_V13"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CRC32_V14"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CRC32_V15"
  Mnemonic: "CRC32"
  Opcode: "0F38"
  Description: "Accumulate CRC32 Value"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PALIGNR_V0"
  Mnemonic: "PALIGNR"
  Opcode: "0F3A"
  Description: "Packed Align Right"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PALIGNR_V1"
  Mnemonic: "PALIGNR"
  Opcode: "0F3A"
  Description: "Packed Align Right"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PALIGNR_V2"
  Mnemonic: "PALIGNR"
  Opcode: "0F3A"
  Description: "Packed Align Right"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PALIGNR_V3"
  Mnemonic: "PALIGNR"
  Opcode: "0F3A"
  Description: "Packed Align Right"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "DPPS_V0"
  Mnemonic: "DPPS"
  Opcode: "0F3A"
  Description: "Dot Product of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "DPPS_V1"
  Mnemonic: "DPPS"
  Opcode: "0F3A"
  Description: "Dot Product of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "DPPD_V0"
  Mnemonic: "DPPD"
  Opcode: "0F3A"
  Description: "Dot Product of Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "DPPD_V1"
  Mnemonic: "DPPD"
  Opcode: "0F3A"
  Description: "Dot Product of Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CMOVO_V0"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVO_V1"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVO_V2"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVO_V3"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVO_V4"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVO_V5"
  Mnemonic: "CMOVO"
  Opcode: "0F40"
  Description: "Conditional Move - overflow (OF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNO_V0"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNO_V1"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNO_V2"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNO_V3"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNO_V4"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNO_V5"
  Mnemonic: "CMOVNO"
  Opcode: "0F41"
  Description: "Conditional Move - not overflow (OF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVB_V0"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVB_V1"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVB_V2"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVB_V3"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVB_V4"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVB_V5"
  Mnemonic: "CMOVB"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNAE_V0"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNAE_V1"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNAE_V2"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNAE_V3"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNAE_V4"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNAE_V5"
  Mnemonic: "CMOVNAE"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVC_V0"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVC_V1"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVC_V2"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVC_V3"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVC_V4"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVC_V5"
  Mnemonic: "CMOVC"
  Opcode: "0F42"
  Description: "Conditional Move - below/not above or equal/carry (CF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNB_V0"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNB_V1"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNB_V2"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNB_V3"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNB_V4"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNB_V5"
  Mnemonic: "CMOVNB"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVAE_V0"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVAE_V1"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVAE_V2"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVAE_V3"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVAE_V4"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVAE_V5"
  Mnemonic: "CMOVAE"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNC_V0"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNC_V1"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNC_V2"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNC_V3"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNC_V4"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNC_V5"
  Mnemonic: "CMOVNC"
  Opcode: "0F43"
  Description: "Conditional Move - not below/above or equal/not carry (CF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVZ_V0"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVZ_V1"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVZ_V2"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVZ_V3"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVZ_V4"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVZ_V5"
  Mnemonic: "CMOVZ"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVE_V0"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVE_V1"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVE_V2"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVE_V3"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVE_V4"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVE_V5"
  Mnemonic: "CMOVE"
  Opcode: "0F44"
  Description: "Conditional Move - zero/equal (ZF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNZ_V0"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNZ_V1"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNZ_V2"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNZ_V3"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNZ_V4"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNZ_V5"
  Mnemonic: "CMOVNZ"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNE_V0"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNE_V1"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNE_V2"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNE_V3"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNE_V4"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNE_V5"
  Mnemonic: "CMOVNE"
  Opcode: "0F45"
  Description: "Conditional Move - not zero/not equal (ZF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVBE_V0"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVBE_V1"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVBE_V2"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVBE_V3"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVBE_V4"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVBE_V5"
  Mnemonic: "CMOVBE"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNA_V0"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNA_V1"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNA_V2"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNA_V3"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNA_V4"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNA_V5"
  Mnemonic: "CMOVNA"
  Opcode: "0F46"
  Description: "Conditional Move - below or equal/not above (CF=1 AND ZF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNBE_V0"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNBE_V1"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNBE_V2"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNBE_V3"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNBE_V4"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNBE_V5"
  Mnemonic: "CMOVNBE"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVA_V0"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVA_V1"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVA_V2"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVA_V3"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVA_V4"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVA_V5"
  Mnemonic: "CMOVA"
  Opcode: "0F47"
  Description: "Conditional Move - not below or equal/above (CF=0 AND ZF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVS_V0"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVS_V1"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVS_V2"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVS_V3"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVS_V4"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVS_V5"
  Mnemonic: "CMOVS"
  Opcode: "0F48"
  Description: "Conditional Move - sign (SF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNS_V0"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNS_V1"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNS_V2"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNS_V3"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNS_V4"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNS_V5"
  Mnemonic: "CMOVNS"
  Opcode: "0F49"
  Description: "Conditional Move - not sign (SF=0)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVP_V0"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVP_V1"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVP_V2"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVP_V3"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVP_V4"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVP_V5"
  Mnemonic: "CMOVP"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVPE_V0"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVPE_V1"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVPE_V2"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVPE_V3"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVPE_V4"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVPE_V5"
  Mnemonic: "CMOVPE"
  Opcode: "0F4A"
  Description: "Conditional Move - parity/parity even (PF=1)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNP_V0"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNP_V1"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNP_V2"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNP_V3"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNP_V4"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNP_V5"
  Mnemonic: "CMOVNP"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVPO_V0"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVPO_V1"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVPO_V2"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVPO_V3"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVPO_V4"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVPO_V5"
  Mnemonic: "CMOVPO"
  Opcode: "0F4B"
  Description: "Conditional Move - not parity/parity odd"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVL_V0"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVL_V1"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVL_V2"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVL_V3"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVL_V4"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVL_V5"
  Mnemonic: "CMOVL"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNGE_V0"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNGE_V1"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNGE_V2"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNGE_V3"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNGE_V4"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNGE_V5"
  Mnemonic: "CMOVNGE"
  Opcode: "0F4C"
  Description: "Conditional Move - less/not greater (SF!=OF)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNL_V0"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNL_V1"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNL_V2"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNL_V3"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNL_V4"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNL_V5"
  Mnemonic: "CMOVNL"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVGE_V0"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVGE_V1"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVGE_V2"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVGE_V3"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVGE_V4"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVGE_V5"
  Mnemonic: "CMOVGE"
  Opcode: "0F4D"
  Description: "Conditional Move - not less/greater or equal (SF=OF)"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVLE_V0"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVLE_V1"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVLE_V2"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVLE_V3"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVLE_V4"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVLE_V5"
  Mnemonic: "CMOVLE"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNG_V0"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNG_V1"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNG_V2"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNG_V3"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNG_V4"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNG_V5"
  Mnemonic: "CMOVNG"
  Opcode: "0F4E"
  Description: "Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVNLE_V0"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVNLE_V1"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVNLE_V2"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVNLE_V3"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVNLE_V4"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVNLE_V5"
  Mnemonic: "CMOVNLE"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "CMOVG_V0"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "CMOVG_V1"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "CMOVG_V2"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "CMOVG_V3"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "CMOVG_V4"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "CMOVG_V5"
  Mnemonic: "CMOVG"
  Opcode: "0F4F"
  Description: "Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "SQRTPS_V0"
  Mnemonic: "SQRTPS"
  Opcode: "0F51"
  Description: "Compute Square Roots of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "SQRTPS_V1"
  Mnemonic: "SQRTPS"
  Opcode: "0F51"
  Description: "Compute Square Roots of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "SQRTPD_V0"
  Mnemonic: "SQRTPD"
  Opcode: "0F51"
  Description: "Compute Square Roots of Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "SQRTPD_V1"
  Mnemonic: "SQRTPD"
  Opcode: "0F51"
  Description: "Compute Square Roots of Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "RSQRTPS_V0"
  Mnemonic: "RSQRTPS"
  Opcode: "0F52"
  Description: "Compute Recipr. of Square Roots of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "RSQRTPS_V1"
  Mnemonic: "RSQRTPS"
  Opcode: "0F52"
  Description: "Compute Recipr. of Square Roots of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "RCPPS_V0"
  Mnemonic: "RCPPS"
  Opcode: "0F53"
  Description: "Compute Reciprocals of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "RCPPS_V1"
  Mnemonic: "RCPPS"
  Opcode: "0F53"
  Description: "Compute Reciprocals of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ANDPS_V0"
  Mnemonic: "ANDPS"
  Opcode: "0F54"
  Description: "Bitwise Logical AND of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ANDPS_V1"
  Mnemonic: "ANDPS"
  Opcode: "0F54"
  Description: "Bitwise Logical AND of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ANDPD_V0"
  Mnemonic: "ANDPD"
  Opcode: "0F54"
  Description: "Bitwise Logical AND of Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ANDPD_V1"
  Mnemonic: "ANDPD"
  Opcode: "0F54"
  Description: "Bitwise Logical AND of Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ANDNPS_V0"
  Mnemonic: "ANDNPS"
  Opcode: "0F55"
  Description: "Bitwise Logical AND NOT of Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ANDNPS_V1"
  Mnemonic: "ANDNPS"
  Opcode: "0F55"
  Description: "Bitwise Logical AND NOT of Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ANDNPD_V0"
  Mnemonic: "ANDNPD"
  Opcode: "0F55"
  Description: "Bitwise Logical AND NOT of Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ANDNPD_V1"
  Mnemonic: "ANDNPD"
  Opcode: "0F55"
  Description: "Bitwise Logical AND NOT of Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ORPS_V0"
  Mnemonic: "ORPS"
  Opcode: "0F56"
  Description: "Bitwise Logical OR of Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ORPS_V1"
  Mnemonic: "ORPS"
  Opcode: "0F56"
  Description: "Bitwise Logical OR of Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ORPD_V0"
  Mnemonic: "ORPD"
  Opcode: "0F56"
  Description: "Bitwise Logical OR of Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ORPD_V1"
  Mnemonic: "ORPD"
  Opcode: "0F56"
  Description: "Bitwise Logical OR of Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "XORPS_V0"
  Mnemonic: "XORPS"
  Opcode: "0F57"
  Description: "Bitwise Logical XOR for Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "XORPS_V1"
  Mnemonic: "XORPS"
  Opcode: "0F57"
  Description: "Bitwise Logical XOR for Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "XORPD_V0"
  Mnemonic: "XORPD"
  Opcode: "0F57"
  Description: "Bitwise Logical XOR for Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "XORPD_V1"
  Mnemonic: "XORPD"
  Opcode: "0F57"
  Description: "Bitwise Logical XOR for Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ADDPS_V0"
  Mnemonic: "ADDPS"
  Opcode: "0F58"
  Description: "Add Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ADDPS_V1"
  Mnemonic: "ADDPS"
  Opcode: "0F58"
  Description: "Add Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ADDPD_V0"
  Mnemonic: "ADDPD"
  Opcode: "0F58"
  Description: "Add Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ADDPD_V1"
  Mnemonic: "ADDPD"
  Opcode: "0F58"
  Description: "Add Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MULPS_V0"
  Mnemonic: "MULPS"
  Opcode: "0F59"
  Description: "Multiply Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MULPS_V1"
  Mnemonic: "MULPS"
  Opcode: "0F59"
  Description: "Multiply Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MULPD_V0"
  Mnemonic: "MULPD"
  Opcode: "0F59"
  Description: "Multiply Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MULPD_V1"
  Mnemonic: "MULPD"
  Opcode: "0F59"
  Description: "Multiply Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTPS2PD_V0"
  Mnemonic: "CVTPS2PD"
  Opcode: "0F5A"
  Description: "Convert Packed Single-FP Values to Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPS2PD_V1"
  Mnemonic: "CVTPS2PD"
  Opcode: "0F5A"
  Description: "Convert Packed Single-FP Values to Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTPD2PS_V0"
  Mnemonic: "CVTPD2PS"
  Opcode: "0F5A"
  Description: "Convert Packed Double-FP Values to Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPD2PS_V1"
  Mnemonic: "CVTPD2PS"
  Opcode: "0F5A"
  Description: "Convert Packed Double-FP Values to Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTDQ2PS_V0"
  Mnemonic: "CVTDQ2PS"
  Opcode: "0F5B"
  Description: "Convert Packed DW Integers to Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTDQ2PS_V1"
  Mnemonic: "CVTDQ2PS"
  Opcode: "0F5B"
  Description: "Convert Packed DW Integers to Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTPS2DQ_V0"
  Mnemonic: "CVTPS2DQ"
  Opcode: "0F5B"
  Description: "Convert Packed Single-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPS2DQ_V1"
  Mnemonic: "CVTPS2DQ"
  Opcode: "0F5B"
  Description: "Convert Packed Single-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTTPS2DQ_V0"
  Mnemonic: "CVTTPS2DQ"
  Opcode: "0F5B"
  Description: "Convert with Trunc. Packed Single-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTTPS2DQ_V1"
  Mnemonic: "CVTTPS2DQ"
  Opcode: "0F5B"
  Description: "Convert with Trunc. Packed Single-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "SUBPS_V0"
  Mnemonic: "SUBPS"
  Opcode: "0F5C"
  Description: "Subtract Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "SUBPS_V1"
  Mnemonic: "SUBPS"
  Opcode: "0F5C"
  Description: "Subtract Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "SUBPD_V0"
  Mnemonic: "SUBPD"
  Opcode: "0F5C"
  Description: "Subtract Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "SUBPD_V1"
  Mnemonic: "SUBPD"
  Opcode: "0F5C"
  Description: "Subtract Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MINPS_V0"
  Mnemonic: "MINPS"
  Opcode: "0F5D"
  Description: "Return Minimum Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MINPS_V1"
  Mnemonic: "MINPS"
  Opcode: "0F5D"
  Description: "Return Minimum Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MINPD_V0"
  Mnemonic: "MINPD"
  Opcode: "0F5D"
  Description: "Return Minimum Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MINPD_V1"
  Mnemonic: "MINPD"
  Opcode: "0F5D"
  Description: "Return Minimum Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "DIVPS_V0"
  Mnemonic: "DIVPS"
  Opcode: "0F5E"
  Description: "Divide Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "DIVPS_V1"
  Mnemonic: "DIVPS"
  Opcode: "0F5E"
  Description: "Divide Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "DIVPD_V0"
  Mnemonic: "DIVPD"
  Opcode: "0F5E"
  Description: "Divide Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "DIVPD_V1"
  Mnemonic: "DIVPD"
  Opcode: "0F5E"
  Description: "Divide Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MAXPS_V0"
  Mnemonic: "MAXPS"
  Opcode: "0F5F"
  Description: "Return Maximum Packed Single-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MAXPS_V1"
  Mnemonic: "MAXPS"
  Opcode: "0F5F"
  Description: "Return Maximum Packed Single-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MAXPD_V0"
  Mnemonic: "MAXPD"
  Opcode: "0F5F"
  Description: "Return Maximum Packed Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MAXPD_V1"
  Mnemonic: "MAXPD"
  Opcode: "0F5F"
  Description: "Return Maximum Packed Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKLBW_V0"
  Mnemonic: "PUNPCKLBW"
  Opcode: "0F60"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLBW_V1"
  Mnemonic: "PUNPCKLBW"
  Opcode: "0F60"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PUNPCKLBW_V2"
  Mnemonic: "PUNPCKLBW"
  Opcode: "0F60"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLBW_V3"
  Mnemonic: "PUNPCKLBW"
  Opcode: "0F60"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKLWD_V0"
  Mnemonic: "PUNPCKLWD"
  Opcode: "0F61"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLWD_V1"
  Mnemonic: "PUNPCKLWD"
  Opcode: "0F61"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PUNPCKLWD_V2"
  Mnemonic: "PUNPCKLWD"
  Opcode: "0F61"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLWD_V3"
  Mnemonic: "PUNPCKLWD"
  Opcode: "0F61"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKLDQ_V0"
  Mnemonic: "PUNPCKLDQ"
  Opcode: "0F62"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLDQ_V1"
  Mnemonic: "PUNPCKLDQ"
  Opcode: "0F62"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PUNPCKLDQ_V2"
  Mnemonic: "PUNPCKLDQ"
  Opcode: "0F62"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLDQ_V3"
  Mnemonic: "PUNPCKLDQ"
  Opcode: "0F62"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PACKSSWB_V0"
  Mnemonic: "PACKSSWB"
  Opcode: "0F63"
  Description: "Pack with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PACKSSWB_V1"
  Mnemonic: "PACKSSWB"
  Opcode: "0F63"
  Description: "Pack with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PACKSSWB_V2"
  Mnemonic: "PACKSSWB"
  Opcode: "0F63"
  Description: "Pack with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PACKSSWB_V3"
  Mnemonic: "PACKSSWB"
  Opcode: "0F63"
  Description: "Pack with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPGTB_V0"
  Mnemonic: "PCMPGTB"
  Opcode: "0F64"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTB_V1"
  Mnemonic: "PCMPGTB"
  Opcode: "0F64"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PCMPGTB_V2"
  Mnemonic: "PCMPGTB"
  Opcode: "0F64"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTB_V3"
  Mnemonic: "PCMPGTB"
  Opcode: "0F64"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPGTW_V0"
  Mnemonic: "PCMPGTW"
  Opcode: "0F65"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTW_V1"
  Mnemonic: "PCMPGTW"
  Opcode: "0F65"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PCMPGTW_V2"
  Mnemonic: "PCMPGTW"
  Opcode: "0F65"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTW_V3"
  Mnemonic: "PCMPGTW"
  Opcode: "0F65"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPGTD_V0"
  Mnemonic: "PCMPGTD"
  Opcode: "0F66"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTD_V1"
  Mnemonic: "PCMPGTD"
  Opcode: "0F66"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PCMPGTD_V2"
  Mnemonic: "PCMPGTD"
  Opcode: "0F66"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPGTD_V3"
  Mnemonic: "PCMPGTD"
  Opcode: "0F66"
  Description: "Compare Packed Signed Integers for Greater Than"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PACKUSWB_V0"
  Mnemonic: "PACKUSWB"
  Opcode: "0F67"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PACKUSWB_V1"
  Mnemonic: "PACKUSWB"
  Opcode: "0F67"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PACKUSWB_V2"
  Mnemonic: "PACKUSWB"
  Opcode: "0F67"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PACKUSWB_V3"
  Mnemonic: "PACKUSWB"
  Opcode: "0F67"
  Description: "Pack with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKHBW_V0"
  Mnemonic: "PUNPCKHBW"
  Opcode: "0F68"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHBW_V1"
  Mnemonic: "PUNPCKHBW"
  Opcode: "0F68"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PUNPCKHBW_V2"
  Mnemonic: "PUNPCKHBW"
  Opcode: "0F68"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHBW_V3"
  Mnemonic: "PUNPCKHBW"
  Opcode: "0F68"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKHWD_V0"
  Mnemonic: "PUNPCKHWD"
  Opcode: "0F69"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHWD_V1"
  Mnemonic: "PUNPCKHWD"
  Opcode: "0F69"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PUNPCKHWD_V2"
  Mnemonic: "PUNPCKHWD"
  Opcode: "0F69"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHWD_V3"
  Mnemonic: "PUNPCKHWD"
  Opcode: "0F69"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKHDQ_V0"
  Mnemonic: "PUNPCKHDQ"
  Opcode: "0F6A"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHDQ_V1"
  Mnemonic: "PUNPCKHDQ"
  Opcode: "0F6A"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PUNPCKHDQ_V2"
  Mnemonic: "PUNPCKHDQ"
  Opcode: "0F6A"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHDQ_V3"
  Mnemonic: "PUNPCKHDQ"
  Opcode: "0F6A"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PACKSSDW_V0"
  Mnemonic: "PACKSSDW"
  Opcode: "0F6B"
  Description: "Pack with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PACKSSDW_V1"
  Mnemonic: "PACKSSDW"
  Opcode: "0F6B"
  Description: "Pack with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PACKSSDW_V2"
  Mnemonic: "PACKSSDW"
  Opcode: "0F6B"
  Description: "Pack with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PACKSSDW_V3"
  Mnemonic: "PACKSSDW"
  Opcode: "0F6B"
  Description: "Pack with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKLQDQ_V0"
  Mnemonic: "PUNPCKLQDQ"
  Opcode: "0F6C"
  Description: "Unpack Low Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKLQDQ_V1"
  Mnemonic: "PUNPCKLQDQ"
  Opcode: "0F6C"
  Description: "Unpack Low Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PUNPCKHQDQ_V0"
  Mnemonic: "PUNPCKHQDQ"
  Opcode: "0F6D"
  Description: "Unpack High Data"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PUNPCKHQDQ_V1"
  Mnemonic: "PUNPCKHQDQ"
  Opcode: "0F6D"
  Description: "Unpack High Data"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVD_V0"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVD_V1"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVD_V2"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVD_V3"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVQ_V0"
  Mnemonic: "MOVQ"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "MOVQ_V1"
  Mnemonic: "MOVQ"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVD_V4"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVD_V5"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVD_V6"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "MOVD_V7"
  Mnemonic: "MOVD"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "MOVQ_V2"
  Mnemonic: "MOVQ"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "MOVQ_V3"
  Mnemonic: "MOVQ"
  Opcode: "0F6E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVQ_V4"
  Mnemonic: "MOVQ"
  Opcode: "0F6F"
  Description: "Move Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "MOVQ_V5"
  Mnemonic: "MOVQ"
  Opcode: "0F6F"
  Description: "Move Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVDQA_V0"
  Mnemonic: "MOVDQA"
  Opcode: "0F6F"
  Description: "Move Aligned Double Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVDQA_V1"
  Mnemonic: "MOVDQA"
  Opcode: "0F6F"
  Description: "Move Aligned Double Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVDQU_V0"
  Mnemonic: "MOVDQU"
  Opcode: "0F6F"
  Description: "Move Unaligned Double Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVDQU_V1"
  Mnemonic: "MOVDQU"
  Opcode: "0F6F"
  Description: "Move Unaligned Double Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPEQB_V0"
  Mnemonic: "PCMPEQB"
  Opcode: "0F74"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQB_V1"
  Mnemonic: "PCMPEQB"
  Opcode: "0F74"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PCMPEQB_V2"
  Mnemonic: "PCMPEQB"
  Opcode: "0F74"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQB_V3"
  Mnemonic: "PCMPEQB"
  Opcode: "0F74"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPEQW_V0"
  Mnemonic: "PCMPEQW"
  Opcode: "0F75"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQW_V1"
  Mnemonic: "PCMPEQW"
  Opcode: "0F75"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PCMPEQW_V2"
  Mnemonic: "PCMPEQW"
  Opcode: "0F75"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQW_V3"
  Mnemonic: "PCMPEQW"
  Opcode: "0F75"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PCMPEQD_V0"
  Mnemonic: "PCMPEQD"
  Opcode: "0F76"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQD_V1"
  Mnemonic: "PCMPEQD"
  Opcode: "0F76"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PCMPEQD_V2"
  Mnemonic: "PCMPEQD"
  Opcode: "0F76"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PCMPEQD_V3"
  Mnemonic: "PCMPEQD"
  Opcode: "0F76"
  Description: "Compare Packed Data for Equal"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "VMREAD_V0"
  Mnemonic: "VMREAD"
  Opcode: "0F78"
  Description: "Read Field from Virtual-Machine Control Structure"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "VMREAD_V1"
  Mnemonic: "VMREAD"
  Opcode: "0F78"
  Description: "Read Field from Virtual-Machine Control Structure"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "VMREAD_V2"
  Mnemonic: "VMREAD"
  Opcode: "0F78"
  Description: "Read Field from Virtual-Machine Control Structure"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64',    'ModRM_RM','IO' ]
- Name: "VMREAD_V3"
  Mnemonic: "VMREAD"
  Opcode: "0F78"
  Description: "Read Field from Virtual-Machine Control Structure"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "VMWRITE_V0"
  Mnemonic: "VMWRITE"
  Opcode: "0F79"
  Description: "Write Field to Virtual-Machine Control Structure"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "VMWRITE_V1"
  Mnemonic: "VMWRITE"
  Opcode: "0F79"
  Description: "Write Field to Virtual-Machine Control Structure"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "VMWRITE_V2"
  Mnemonic: "VMWRITE"
  Opcode: "0F79"
  Description: "Write Field to Virtual-Machine Control Structure"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64',    'ModRM_RM', 'I' ]
- Name: "VMWRITE_V3"
  Mnemonic: "VMWRITE"
  Opcode: "0F79"
  Description: "Write Field to Virtual-Machine Control Structure"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "HADDPD_V0"
  Mnemonic: "HADDPD"
  Opcode: "0F7C"
  Description: "Packed Double-FP Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "HADDPD_V1"
  Mnemonic: "HADDPD"
  Opcode: "0F7C"
  Description: "Packed Double-FP Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "HADDPS_V0"
  Mnemonic: "HADDPS"
  Opcode: "0F7C"
  Description: "Packed Single-FP Horizontal Add"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "HADDPS_V1"
  Mnemonic: "HADDPS"
  Opcode: "0F7C"
  Description: "Packed Single-FP Horizontal Add"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "HSUBPD_V0"
  Mnemonic: "HSUBPD"
  Opcode: "0F7D"
  Description: "Packed Double-FP Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "HSUBPD_V1"
  Mnemonic: "HSUBPD"
  Opcode: "0F7D"
  Description: "Packed Double-FP Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "HSUBPS_V0"
  Mnemonic: "HSUBPS"
  Opcode: "0F7D"
  Description: "Packed Single-FP Horizontal Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "HSUBPS_V1"
  Mnemonic: "HSUBPS"
  Opcode: "0F7D"
  Description: "Packed Single-FP Horizontal Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVD_V8"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "MOVD_V9"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVD_V10"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "MOVD_V11"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVQ_V6"
  Mnemonic: "MOVQ"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "MOVQ_V7"
  Mnemonic: "MOVQ"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVD_V12"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "MOVD_V13"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVD_V14"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "MOVD_V15"
  Mnemonic: "MOVD"
  Opcode: "0F7E"
  Description: "Move Doubleword/Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVQ_V8"
  Mnemonic: "MOVQ"
  Opcode: "0F7E"
  Description: "Move Quadword"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "MOVQ_V9"
  Mnemonic: "MOVQ"
  Opcode: "0F7E"
  Description: "Move Quadword"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVQ_V10"
  Mnemonic: "MOVQ"
  Opcode: "0F7F"
  Description: "Move Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['MM',    'ModRM_RM','IO' ]
- Name: "MOVQ_V11"
  Mnemonic: "MOVQ"
  Opcode: "0F7F"
  Description: "Move Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVDQA_V2"
  Mnemonic: "MOVDQA"
  Opcode: "0F7F"
  Description: "Move Aligned Double Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVDQA_V3"
  Mnemonic: "MOVDQA"
  Opcode: "0F7F"
  Description: "Move Aligned Double Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "MOVDQU_V2"
  Mnemonic: "MOVDQU"
  Opcode: "0F7F"
  Description: "Move Unaligned Double Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVDQU_V3"
  Mnemonic: "MOVDQU"
  Opcode: "0F7F"
  Description: "Move Unaligned Double Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "BT_V0"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "BT_V1"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "BT_V2"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "BT_V3"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "BT_V4"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "BT_V5"
  Mnemonic: "BT"
  Opcode: "0FA3"
  Description: "Bit Test"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "BTS_V0"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "BTS_V1"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "BTS_V2"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "BTS_V3"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "BTS_V4"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "BTS_V5"
  Mnemonic: "BTS"
  Opcode: "0FAB"
  Description: "Bit Test and Set"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "IMUL_V0"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "IMUL_V1"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "IMUL_V2"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "IMUL_V3"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "IMUL_V4"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "IMUL_V5"
  Mnemonic: "IMUL"
  Opcode: "0FAF"
  Description: "Signed Multiply"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "BTR_V0"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "BTR_V1"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "BTR_V2"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "BTR_V3"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "BTR_V4"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "BTR_V5"
  Mnemonic: "BTR"
  Opcode: "0FB3"
  Description: "Bit Test and Reset"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVZX_V0"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V1"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVZX_V2"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V3"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVZX_V4"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V5"
  Mnemonic: "MOVZX"
  Opcode: "0FB6"
  Description: "Move with Zero-Extend"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVZX_V6"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V7"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVZX_V8"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V9"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVZX_V10"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVZX_V11"
  Mnemonic: "MOVZX"
  Opcode: "0FB7"
  Description: "Move with Zero-Extend"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "POPCNT_V0"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "POPCNT_V1"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "POPCNT_V2"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "POPCNT_V3"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "POPCNT_V4"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "POPCNT_V5"
  Mnemonic: "POPCNT"
  Opcode: "0FB8"
  Description: "Bit Population Count"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "BTC_V0"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "BTC_V1"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "BTC_V2"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "BTC_V3"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "BTC_V4"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "BTC_V5"
  Mnemonic: "BTC"
  Opcode: "0FBB"
  Description: "Bit Test and Complement"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "BSF_V0"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "BSF_V1"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "BSF_V2"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "BSF_V3"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "BSF_V4"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "BSF_V5"
  Mnemonic: "BSF"
  Opcode: "0FBC"
  Description: "Bit Scan Forward"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "BSR_V0"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "BSR_V1"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "BSR_V2"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM', 'I' ]
- Name: "BSR_V3"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "BSR_V4"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM', 'I' ]
- Name: "BSR_V5"
  Mnemonic: "BSR"
  Opcode: "0FBD"
  Description: "Bit Scan Reverse"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "MOVSX_V0"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V1"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVSX_V2"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V3"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVSX_V4"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V5"
  Mnemonic: "MOVSX"
  Opcode: "0FBE"
  Description: "Move with Sign-Extension"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1, 'I' ]
- Name: "MOVSX_V6"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V7"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVSX_V8"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V9"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "MOVSX_V10"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "REXO16RMR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM', 'I' ]
- Name: "MOVSX_V11"
  Mnemonic: "MOVSX"
  Opcode: "0FBF"
  Description: "Move with Sign-Extension"
  Format: "REXO16RMM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2, 'I' ]
- Name: "XADD_V0"
  Mnemonic: "XADD"
  Opcode: "0FC0"
  Description: "Exchange and Add"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_8',    'ModRM_RM','IO' ]
- Name: "XADD_V1"
  Mnemonic: "XADD"
  Opcode: "0FC0"
  Description: "Exchange and Add"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_8','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [1], 1,'IO' ]
- Name: "XADD_V2"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_16',    'ModRM_RM','IO' ]
- Name: "XADD_V3"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_32',    'ModRM_RM','IO' ]
- Name: "XADD_V4"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "REXO16MRR"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     [  'R_64_REX',    'ModRM_RM','IO' ]
- Name: "XADD_V5"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_16','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [2], 2,'IO' ]
- Name: "XADD_V6"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "XADD_V7"
  Mnemonic: "XADD"
  Opcode: "0FC1"
  Description: "Exchange and Add"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVNTI_V0"
  Mnemonic: "MOVNTI"
  Opcode: "0FC3"
  Description: "Store Doubleword Using Non-Temporal Hint"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_32','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4,'IO' ]
- Name: "MOVNTI_V1"
  Mnemonic: "MOVNTI"
  Opcode: "0FC3"
  Description: "Store Doubleword Using Non-Temporal Hint"
  Format: "REXO16MRM"
  Operands:
    REX_W :        [     '1',       'REX_W', '?' ]
    REX_X :        [     '0',       'REX_X', '?' ]
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'R_64_REX','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64_REX',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "ADDSUBPD_V0"
  Mnemonic: "ADDSUBPD"
  Opcode: "0FD0"
  Description: "Packed Double-FP Add/Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ADDSUBPD_V1"
  Mnemonic: "ADDSUBPD"
  Opcode: "0FD0"
  Description: "Packed Double-FP Add/Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "ADDSUBPS_V0"
  Mnemonic: "ADDSUBPS"
  Opcode: "0FD0"
  Description: "Packed Single-FP Add/Subtract"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "ADDSUBPS_V1"
  Mnemonic: "ADDSUBPS"
  Opcode: "0FD0"
  Description: "Packed Single-FP Add/Subtract"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSRLW_V0"
  Mnemonic: "PSRLW"
  Opcode: "0FD1"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSRLW_V1"
  Mnemonic: "PSRLW"
  Opcode: "0FD1"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSRLW_V2"
  Mnemonic: "PSRLW"
  Opcode: "0FD1"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSRLW_V3"
  Mnemonic: "PSRLW"
  Opcode: "0FD1"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSRLD_V0"
  Mnemonic: "PSRLD"
  Opcode: "0FD2"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSRLD_V1"
  Mnemonic: "PSRLD"
  Opcode: "0FD2"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSRLD_V2"
  Mnemonic: "PSRLD"
  Opcode: "0FD2"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSRLD_V3"
  Mnemonic: "PSRLD"
  Opcode: "0FD2"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSRLQ_V0"
  Mnemonic: "PSRLQ"
  Opcode: "0FD3"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSRLQ_V1"
  Mnemonic: "PSRLQ"
  Opcode: "0FD3"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSRLQ_V2"
  Mnemonic: "PSRLQ"
  Opcode: "0FD3"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSRLQ_V3"
  Mnemonic: "PSRLQ"
  Opcode: "0FD3"
  Description: "Shift Packed Data Right Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDQ_V0"
  Mnemonic: "PADDQ"
  Opcode: "0FD4"
  Description: "Add Packed Quadword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDQ_V1"
  Mnemonic: "PADDQ"
  Opcode: "0FD4"
  Description: "Add Packed Quadword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDQ_V2"
  Mnemonic: "PADDQ"
  Opcode: "0FD4"
  Description: "Add Packed Quadword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDQ_V3"
  Mnemonic: "PADDQ"
  Opcode: "0FD4"
  Description: "Add Packed Quadword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULLW_V0"
  Mnemonic: "PMULLW"
  Opcode: "0FD5"
  Description: "Multiply Packed Signed Integers and Store Low Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMULLW_V1"
  Mnemonic: "PMULLW"
  Opcode: "0FD5"
  Description: "Multiply Packed Signed Integers and Store Low Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULLW_V2"
  Mnemonic: "PMULLW"
  Opcode: "0FD5"
  Description: "Multiply Packed Signed Integers and Store Low Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULLW_V3"
  Mnemonic: "PMULLW"
  Opcode: "0FD5"
  Description: "Multiply Packed Signed Integers and Store Low Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVQ_V12"
  Mnemonic: "MOVQ"
  Opcode: "0FD6"
  Description: "Move Quadword"
  Format: "O16MRR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['XMM',    'ModRM_RM','IO' ]
- Name: "MOVQ_V13"
  Mnemonic: "MOVQ"
  Opcode: "0FD6"
  Description: "Move Quadword"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "PSUBUSB_V0"
  Mnemonic: "PSUBUSB"
  Opcode: "0FD8"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBUSB_V1"
  Mnemonic: "PSUBUSB"
  Opcode: "0FD8"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBUSB_V2"
  Mnemonic: "PSUBUSB"
  Opcode: "0FD8"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBUSB_V3"
  Mnemonic: "PSUBUSB"
  Opcode: "0FD8"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBUSW_V0"
  Mnemonic: "PSUBUSW"
  Opcode: "0FD9"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBUSW_V1"
  Mnemonic: "PSUBUSW"
  Opcode: "0FD9"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBUSW_V2"
  Mnemonic: "PSUBUSW"
  Opcode: "0FD9"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBUSW_V3"
  Mnemonic: "PSUBUSW"
  Opcode: "0FD9"
  Description: "Subtract Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINUB_V0"
  Mnemonic: "PMINUB"
  Opcode: "0FDA"
  Description: "Minimum of Packed Unsigned Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMINUB_V1"
  Mnemonic: "PMINUB"
  Opcode: "0FDA"
  Description: "Minimum of Packed Unsigned Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMINUB_V2"
  Mnemonic: "PMINUB"
  Opcode: "0FDA"
  Description: "Minimum of Packed Unsigned Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINUB_V3"
  Mnemonic: "PMINUB"
  Opcode: "0FDA"
  Description: "Minimum of Packed Unsigned Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PAND_V0"
  Mnemonic: "PAND"
  Opcode: "0FDB"
  Description: "Logical AND"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PAND_V1"
  Mnemonic: "PAND"
  Opcode: "0FDB"
  Description: "Logical AND"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PAND_V2"
  Mnemonic: "PAND"
  Opcode: "0FDB"
  Description: "Logical AND"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PAND_V3"
  Mnemonic: "PAND"
  Opcode: "0FDB"
  Description: "Logical AND"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDUSB_V0"
  Mnemonic: "PADDUSB"
  Opcode: "0FDC"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDUSB_V1"
  Mnemonic: "PADDUSB"
  Opcode: "0FDC"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDUSB_V2"
  Mnemonic: "PADDUSB"
  Opcode: "0FDC"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDUSB_V3"
  Mnemonic: "PADDUSB"
  Opcode: "0FDC"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDUSW_V0"
  Mnemonic: "PADDUSW"
  Opcode: "0FDD"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDUSW_V1"
  Mnemonic: "PADDUSW"
  Opcode: "0FDD"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDUSW_V2"
  Mnemonic: "PADDUSW"
  Opcode: "0FDD"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDUSW_V3"
  Mnemonic: "PADDUSW"
  Opcode: "0FDD"
  Description: "Add Packed Unsigned Integers with Unsigned Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXUB_V0"
  Mnemonic: "PMAXUB"
  Opcode: "0FDE"
  Description: "Maximum of Packed Unsigned Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMAXUB_V1"
  Mnemonic: "PMAXUB"
  Opcode: "0FDE"
  Description: "Maximum of Packed Unsigned Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMAXUB_V2"
  Mnemonic: "PMAXUB"
  Opcode: "0FDE"
  Description: "Maximum of Packed Unsigned Byte Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXUB_V3"
  Mnemonic: "PMAXUB"
  Opcode: "0FDE"
  Description: "Maximum of Packed Unsigned Byte Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PANDN_V0"
  Mnemonic: "PANDN"
  Opcode: "0FDF"
  Description: "Logical AND NOT"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PANDN_V1"
  Mnemonic: "PANDN"
  Opcode: "0FDF"
  Description: "Logical AND NOT"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PANDN_V2"
  Mnemonic: "PANDN"
  Opcode: "0FDF"
  Description: "Logical AND NOT"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PANDN_V3"
  Mnemonic: "PANDN"
  Opcode: "0FDF"
  Description: "Logical AND NOT"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PAVGB_V0"
  Mnemonic: "PAVGB"
  Opcode: "0FE0"
  Description: "Average Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PAVGB_V1"
  Mnemonic: "PAVGB"
  Opcode: "0FE0"
  Description: "Average Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PAVGB_V2"
  Mnemonic: "PAVGB"
  Opcode: "0FE0"
  Description: "Average Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PAVGB_V3"
  Mnemonic: "PAVGB"
  Opcode: "0FE0"
  Description: "Average Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSRAW_V0"
  Mnemonic: "PSRAW"
  Opcode: "0FE1"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSRAW_V1"
  Mnemonic: "PSRAW"
  Opcode: "0FE1"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSRAW_V2"
  Mnemonic: "PSRAW"
  Opcode: "0FE1"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSRAW_V3"
  Mnemonic: "PSRAW"
  Opcode: "0FE1"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSRAD_V0"
  Mnemonic: "PSRAD"
  Opcode: "0FE2"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSRAD_V1"
  Mnemonic: "PSRAD"
  Opcode: "0FE2"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSRAD_V2"
  Mnemonic: "PSRAD"
  Opcode: "0FE2"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSRAD_V3"
  Mnemonic: "PSRAD"
  Opcode: "0FE2"
  Description: "Shift Packed Data Right Arithmetic"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PAVGW_V0"
  Mnemonic: "PAVGW"
  Opcode: "0FE3"
  Description: "Average Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PAVGW_V1"
  Mnemonic: "PAVGW"
  Opcode: "0FE3"
  Description: "Average Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PAVGW_V2"
  Mnemonic: "PAVGW"
  Opcode: "0FE3"
  Description: "Average Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PAVGW_V3"
  Mnemonic: "PAVGW"
  Opcode: "0FE3"
  Description: "Average Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULHUW_V0"
  Mnemonic: "PMULHUW"
  Opcode: "0FE4"
  Description: "Multiply Packed Unsigned Integers and Store High Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMULHUW_V1"
  Mnemonic: "PMULHUW"
  Opcode: "0FE4"
  Description: "Multiply Packed Unsigned Integers and Store High Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULHUW_V2"
  Mnemonic: "PMULHUW"
  Opcode: "0FE4"
  Description: "Multiply Packed Unsigned Integers and Store High Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULHUW_V3"
  Mnemonic: "PMULHUW"
  Opcode: "0FE4"
  Description: "Multiply Packed Unsigned Integers and Store High Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULHW_V0"
  Mnemonic: "PMULHW"
  Opcode: "0FE5"
  Description: "Multiply Packed Signed Integers and Store High Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMULHW_V1"
  Mnemonic: "PMULHW"
  Opcode: "0FE5"
  Description: "Multiply Packed Signed Integers and Store High Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULHW_V2"
  Mnemonic: "PMULHW"
  Opcode: "0FE5"
  Description: "Multiply Packed Signed Integers and Store High Result"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULHW_V3"
  Mnemonic: "PMULHW"
  Opcode: "0FE5"
  Description: "Multiply Packed Signed Integers and Store High Result"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTPD2DQ_V0"
  Mnemonic: "CVTPD2DQ"
  Opcode: "0FE6"
  Description: "Convert Packed Double-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTPD2DQ_V1"
  Mnemonic: "CVTPD2DQ"
  Opcode: "0FE6"
  Description: "Convert Packed Double-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTTPD2DQ_V0"
  Mnemonic: "CVTTPD2DQ"
  Opcode: "0FE6"
  Description: "Convert with Trunc. Packed Double-FP Values to DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTTPD2DQ_V1"
  Mnemonic: "CVTTPD2DQ"
  Opcode: "0FE6"
  Description: "Convert with Trunc. Packed Double-FP Values to DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "CVTDQ2PD_V0"
  Mnemonic: "CVTDQ2PD"
  Opcode: "0FE6"
  Description: "Convert Packed DW Integers to Double-FP Values"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "CVTDQ2PD_V1"
  Mnemonic: "CVTDQ2PD"
  Opcode: "0FE6"
  Description: "Convert Packed DW Integers to Double-FP Values"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "MOVNTQ_V0"
  Mnemonic: "MOVNTQ"
  Opcode: "0FE7"
  Description: "Store of Quadword Using Non-Temporal Hint"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8,'IO' ]
- Name: "MOVNTDQ_V0"
  Mnemonic: "MOVNTDQ"
  Opcode: "0FE7"
  Description: "Store Double Quadword Using Non-Temporal Hint"
  Format: "O16MRM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc', 'I' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM','IO' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16,'IO' ]
- Name: "PSUBSB_V0"
  Mnemonic: "PSUBSB"
  Opcode: "0FE8"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBSB_V1"
  Mnemonic: "PSUBSB"
  Opcode: "0FE8"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBSB_V2"
  Mnemonic: "PSUBSB"
  Opcode: "0FE8"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBSB_V3"
  Mnemonic: "PSUBSB"
  Opcode: "0FE8"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBSW_V0"
  Mnemonic: "PSUBSW"
  Opcode: "0FE9"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBSW_V1"
  Mnemonic: "PSUBSW"
  Opcode: "0FE9"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBSW_V2"
  Mnemonic: "PSUBSW"
  Opcode: "0FE9"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBSW_V3"
  Mnemonic: "PSUBSW"
  Opcode: "0FE9"
  Description: "Subtract Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMINSW_V0"
  Mnemonic: "PMINSW"
  Opcode: "0FEA"
  Description: "Minimum of Packed Signed Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMINSW_V1"
  Mnemonic: "PMINSW"
  Opcode: "0FEA"
  Description: "Minimum of Packed Signed Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMINSW_V2"
  Mnemonic: "PMINSW"
  Opcode: "0FEA"
  Description: "Minimum of Packed Signed Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMINSW_V3"
  Mnemonic: "PMINSW"
  Opcode: "0FEA"
  Description: "Minimum of Packed Signed Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "POR_V0"
  Mnemonic: "POR"
  Opcode: "0FEB"
  Description: "Bitwise Logical OR"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "POR_V1"
  Mnemonic: "POR"
  Opcode: "0FEB"
  Description: "Bitwise Logical OR"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "POR_V2"
  Mnemonic: "POR"
  Opcode: "0FEB"
  Description: "Bitwise Logical OR"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "POR_V3"
  Mnemonic: "POR"
  Opcode: "0FEB"
  Description: "Bitwise Logical OR"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDSB_V0"
  Mnemonic: "PADDSB"
  Opcode: "0FEC"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDSB_V1"
  Mnemonic: "PADDSB"
  Opcode: "0FEC"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDSB_V2"
  Mnemonic: "PADDSB"
  Opcode: "0FEC"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDSB_V3"
  Mnemonic: "PADDSB"
  Opcode: "0FEC"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDSW_V0"
  Mnemonic: "PADDSW"
  Opcode: "0FED"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDSW_V1"
  Mnemonic: "PADDSW"
  Opcode: "0FED"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDSW_V2"
  Mnemonic: "PADDSW"
  Opcode: "0FED"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDSW_V3"
  Mnemonic: "PADDSW"
  Opcode: "0FED"
  Description: "Add Packed Signed Integers with Signed Saturation"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMAXSW_V0"
  Mnemonic: "PMAXSW"
  Opcode: "0FEE"
  Description: "Maximum of Packed Signed Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMAXSW_V1"
  Mnemonic: "PMAXSW"
  Opcode: "0FEE"
  Description: "Maximum of Packed Signed Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMAXSW_V2"
  Mnemonic: "PMAXSW"
  Opcode: "0FEE"
  Description: "Maximum of Packed Signed Word Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMAXSW_V3"
  Mnemonic: "PMAXSW"
  Opcode: "0FEE"
  Description: "Maximum of Packed Signed Word Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PXOR_V0"
  Mnemonic: "PXOR"
  Opcode: "0FEF"
  Description: "Logical Exclusive OR"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PXOR_V1"
  Mnemonic: "PXOR"
  Opcode: "0FEF"
  Description: "Logical Exclusive OR"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PXOR_V2"
  Mnemonic: "PXOR"
  Opcode: "0FEF"
  Description: "Logical Exclusive OR"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PXOR_V3"
  Mnemonic: "PXOR"
  Opcode: "0FEF"
  Description: "Logical Exclusive OR"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "LDDQU_V0"
  Mnemonic: "LDDQU"
  Opcode: "0FF0"
  Description: "Load Unaligned Integer 128 Bits"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSLLW_V0"
  Mnemonic: "PSLLW"
  Opcode: "0FF1"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSLLW_V1"
  Mnemonic: "PSLLW"
  Opcode: "0FF1"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSLLW_V2"
  Mnemonic: "PSLLW"
  Opcode: "0FF1"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSLLW_V3"
  Mnemonic: "PSLLW"
  Opcode: "0FF1"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSLLD_V0"
  Mnemonic: "PSLLD"
  Opcode: "0FF2"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSLLD_V1"
  Mnemonic: "PSLLD"
  Opcode: "0FF2"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSLLD_V2"
  Mnemonic: "PSLLD"
  Opcode: "0FF2"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSLLD_V3"
  Mnemonic: "PSLLD"
  Opcode: "0FF2"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSLLQ_V0"
  Mnemonic: "PSLLQ"
  Opcode: "0FF3"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSLLQ_V1"
  Mnemonic: "PSLLQ"
  Opcode: "0FF3"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSLLQ_V2"
  Mnemonic: "PSLLQ"
  Opcode: "0FF3"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSLLQ_V3"
  Mnemonic: "PSLLQ"
  Opcode: "0FF3"
  Description: "Shift Packed Data Left Logical"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMULUDQ_V0"
  Mnemonic: "PMULUDQ"
  Opcode: "0FF4"
  Description: "Multiply Packed Unsigned DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMULUDQ_V1"
  Mnemonic: "PMULUDQ"
  Opcode: "0FF4"
  Description: "Multiply Packed Unsigned DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PMULUDQ_V2"
  Mnemonic: "PMULUDQ"
  Opcode: "0FF4"
  Description: "Multiply Packed Unsigned DW Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMULUDQ_V3"
  Mnemonic: "PMULUDQ"
  Opcode: "0FF4"
  Description: "Multiply Packed Unsigned DW Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PMADDWD_V0"
  Mnemonic: "PMADDWD"
  Opcode: "0FF5"
  Description: "Multiply and Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PMADDWD_V1"
  Mnemonic: "PMADDWD"
  Opcode: "0FF5"
  Description: "Multiply and Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [4], 4, 'I' ]
- Name: "PMADDWD_V2"
  Mnemonic: "PMADDWD"
  Opcode: "0FF5"
  Description: "Multiply and Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PMADDWD_V3"
  Mnemonic: "PMADDWD"
  Opcode: "0FF5"
  Description: "Multiply and Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSADBW_V0"
  Mnemonic: "PSADBW"
  Opcode: "0FF6"
  Description: "Compute Sum of Absolute Differences"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSADBW_V1"
  Mnemonic: "PSADBW"
  Opcode: "0FF6"
  Description: "Compute Sum of Absolute Differences"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSADBW_V2"
  Mnemonic: "PSADBW"
  Opcode: "0FF6"
  Description: "Compute Sum of Absolute Differences"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSADBW_V3"
  Mnemonic: "PSADBW"
  Opcode: "0FF6"
  Description: "Compute Sum of Absolute Differences"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBB_V0"
  Mnemonic: "PSUBB"
  Opcode: "0FF8"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBB_V1"
  Mnemonic: "PSUBB"
  Opcode: "0FF8"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBB_V2"
  Mnemonic: "PSUBB"
  Opcode: "0FF8"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBB_V3"
  Mnemonic: "PSUBB"
  Opcode: "0FF8"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBW_V0"
  Mnemonic: "PSUBW"
  Opcode: "0FF9"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBW_V1"
  Mnemonic: "PSUBW"
  Opcode: "0FF9"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBW_V2"
  Mnemonic: "PSUBW"
  Opcode: "0FF9"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBW_V3"
  Mnemonic: "PSUBW"
  Opcode: "0FF9"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBD_V0"
  Mnemonic: "PSUBD"
  Opcode: "0FFA"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBD_V1"
  Mnemonic: "PSUBD"
  Opcode: "0FFA"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBD_V2"
  Mnemonic: "PSUBD"
  Opcode: "0FFA"
  Description: "Subtract Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBD_V3"
  Mnemonic: "PSUBD"
  Opcode: "0FFA"
  Description: "Subtract Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PSUBQ_V0"
  Mnemonic: "PSUBQ"
  Opcode: "0FFB"
  Description: "Subtract Packed Quadword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PSUBQ_V1"
  Mnemonic: "PSUBQ"
  Opcode: "0FFB"
  Description: "Subtract Packed Quadword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PSUBQ_V2"
  Mnemonic: "PSUBQ"
  Opcode: "0FFB"
  Description: "Subtract Packed Quadword Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PSUBQ_V3"
  Mnemonic: "PSUBQ"
  Opcode: "0FFB"
  Description: "Subtract Packed Quadword Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDB_V0"
  Mnemonic: "PADDB"
  Opcode: "0FFC"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDB_V1"
  Mnemonic: "PADDB"
  Opcode: "0FFC"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDB_V2"
  Mnemonic: "PADDB"
  Opcode: "0FFC"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDB_V3"
  Mnemonic: "PADDB"
  Opcode: "0FFC"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDW_V0"
  Mnemonic: "PADDW"
  Opcode: "0FFD"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDW_V1"
  Mnemonic: "PADDW"
  Opcode: "0FFD"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDW_V2"
  Mnemonic: "PADDW"
  Opcode: "0FFD"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDW_V3"
  Mnemonic: "PADDW"
  Opcode: "0FFD"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
- Name: "PADDD_V0"
  Mnemonic: "PADDD"
  Opcode: "0FFE"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['MM',    'ModRM_RM', 'I' ]
- Name: "PADDD_V1"
  Mnemonic: "PADDD"
  Opcode: "0FFE"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'MM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [8], 8, 'I' ]
- Name: "PADDD_V2"
  Mnemonic: "PADDD"
  Opcode: "0FFE"
  Description: "Add Packed Integers"
  Format: "O16RMR"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['XMM',    'ModRM_RM', 'I' ]
- Name: "PADDD_V3"
  Mnemonic: "PADDD"
  Opcode: "0FFE"
  Description: "Add Packed Integers"
  Format: "O16RMM"
  Operands:
    ModRM_Mod :    [     '3',   'ModRM_Mod', '?' ]
    ModRM_RegOpc : [  'XMM','ModRM_RegOpc','IO' ]
    ModRM_RM :     ['ABR_64',    'ModRM_RM', 'I' ]
  MemoryOperands:
    MEM1 :         [ ['ModRM_RM'], [16], 16, 'I' ]
