; Microprobe Test Definition File
[MPT]
mpt_version = 0.5 ;  Format version of this MPT file.

[REGISTERS] ; Section to specify the initial register values

; Format: register = value. E.g.:

; Set GR0, GR1 and GR2 register to 0, 1, 2 values respectively
;GR0 = 0x0


[DATA] ; Section to specify the variables

; Data section default address. Variables will be placed from this address
; if their address is not specified

default_address = 0x0000000010040000

; Variable Declaration
; Format: var_name = [ "type", nelems, address, alignment, init_values ]
; where:
;   - "type": is a string specifying the type of elements in the variable
;   - nelems: is the number of elements in the variable
;   - address : is the address of the variable, if set the address will be
;               fixed, otherwise, it will be computer by microprobe
;   - alignment : alignment requirements of the variable. It should not
;                 conflict with address if specified. It can be set to None
;   - init_values : if it is a single value, all the elements will be
;                   initialized to that value, if it is an array, elements
;                   will be initialized to the values specified in a round-
;                   robin fashion. Two special keywords can be specified:
;                   RNDFP and RNDINT to initialize the elements to random FP
;                   and random INT values
;
; Note that variable names ARE NOT case sensitive. I.e. VAR = Var = var

count	=	[ "int64_t", 1, 0x10040000, 0x8, 3405695742 ]
linkedlist	=	[ "uint8_t", 80, 0x10040010, 0x0, [8, 7, 6, 5, 4, 3, 2, 1, 32, 240, 56, 57, 91, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 48, 240, 56, 57, 91, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 64, 240, 56, 57, 91, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 80, 240, 56, 57, 91, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0] ]
microprobe_stack	=	[ "uint8_t", 4096, None, 0x10, None ]

[CODE] ; Section to specify the code

; Code section default address. Code will be placed from this address
; if the instruction address is not specified

default_address = 0x0000000010020000

; The code specified after 'instructions' entry (below) is the code that will be
; processed by microprobe. The instruction format is similar to GNU assembler
; format, it also allows the specification of labels (NOT case sensitive) and
; references to the declared variables. It is also possible to specify instruction
; addresses and to do code expansion by referencing other user
; defined entries. Check the example below to see examples of these features.
;
; *****************************************************************************
; ******  Although Microprobe performs some sanity checks, it is the   ********
; ******  responsibility of the user to define correct code.           ********
; ******                                                               ********
; *****************************************************************************

instructions =
  <ELF_ABI_START>:
    BL c2mpt_function                               
    BL ELF_ABI_EXIT                                   
  0x0000000010030000 <C2MPT_FUNCTION>:
    ADDIS 9, 2, 0x2                                   
    LD 9, -0x7ef8(9)                                  
    CMPI 7, 1, 9, 0x0                                 
    BC 12, 30, C2MPT_FUNCTION+0X44     @ BP=N  ; BP is the branch pattern decorator
                                               ; and specifies the branch behavior. 
                                               ; In this particular case is always 
                                               ; not taken. One can provide a list
                                               ; of T/N characters or a pointer to 
                                               ; a file.
    ADDIS 10, 2, 0x2                   
    LD 10, -0x7eb0(10)                 
    ORI 0, 0, 0                        
    ORI 0, 0, 0                        
    LD 8, 0x0(9)                       @ MA=0x200-0x240-0x8                             
    LD 9, 0x8(9)                       @ MA=./mpt2trace_test001_addresses.txt 
                                               ; MA is the memory access decorator 
                                               ; and specifies the sequence of 
                                               ; addresses accessed by this 
                                               ; instruction. One can provide a 
                                               ; list of values, a range (start-end-stride) 
                                               ; or a pointer to a file with 
                                               ; values or ranges.
    CMPI 7, 1, 9, 0x0                  
    ADD 10, 10, 8                      
    BC 4, 30, C2MPT_FUNCTION+0X20      @ BP=TTTTTTTTTTTTTN             
    RLDICR 10, 10, 1, 62               
    ADDIS 9, 2, 0x2                    
    STD 10, -0x7eb0(9)                 
    BCLR 20, 0, 0                      @ BT=0x10020004 BP=T ; BT is the branch target
                                             ; decorator. It is needed to know the
                                             ; the target of indirect branches. One
                                             ; can provide a comma separated lists
                                             ; of targets or a pointer to a file.
    ADDIS 10, 2, 0x2                   
    LD 10, -0x7eb0(10)                 
    B C2MPT_FUNCTION+0X34             
    ORI 0, 0, 0                        
  0x0000000010030060 <MY_SUBROUTINE>:
    RLDICR 3, 3, 1, 62                 
    ADDIS 9, 2, 0x2                     
    STD 3, -0x7eb0(9)                  
    BCLR 20, 0, 0                      @ BT=0x10020004 BP=T
  <ELF_ABI_EXIT>:
    ORI 0, 0, 0                       
    BCLR 20, 0, 0                      @ BT=0x0 BP=T ; BT to a unknown instruction
                                             ; address, ends the trace generation
                                             ; process
